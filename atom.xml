<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Treecatee</title>
  
  <subtitle>得失弹指一挥间。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="Treecatee.gitgub.io/"/>
  <updated>2019-04-03T19:43:31.885Z</updated>
  <id>Treecatee.gitgub.io/</id>
  
  <author>
    <name>Treecatee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eng-KaocVocabulary-1</title>
    <link href="Treecatee.gitgub.io/post/kaoyan/"/>
    <id>Treecatee.gitgub.io/post/kaoyan/</id>
    <published>2019-03-27T20:37:53.000Z</published>
    <updated>2019-04-03T19:43:31.885Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="考研 - 英语" scheme="Treecatee.gitgub.io/categories/%E8%80%83%E7%A0%94-%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="英语" scheme="Treecatee.gitgub.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="词汇" scheme="Treecatee.gitgub.io/tags/%E8%AF%8D%E6%B1%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="Treecatee.gitgub.io/post/javascript/"/>
    <id>Treecatee.gitgub.io/post/javascript/</id>
    <published>2019-03-12T07:56:00.000Z</published>
    <updated>2019-03-27T20:29:25.682Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div>]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="JavaScript" scheme="Treecatee.gitgub.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="Treecatee.gitgub.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 基础</title>
    <link href="Treecatee.gitgub.io/post/html-css/"/>
    <id>Treecatee.gitgub.io/post/html-css/</id>
    <published>2019-03-11T04:00:00.000Z</published>
    <updated>2019-03-11T10:22:05.373Z</updated>
    
    <content type="html"><![CDATA[<p>hhh… ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>CSS 基础</strong></font> </center><p><br></p><p><br></p><h3 id="一-CSS-初识"><font color="#FF6347" face="Comic sans MS">一. CSS 初识</font><a href="post/HTML-CSS#一-CSS-初识"></a></h3><p><br></p><font face="Microsoft YaHei"><strong>CSS是给HTML标记加的样式；JS是给HTML标记加的行为。HTML标记是最先出现的。</strong></font><blockquote><ol><li>CSS是什么?</li><li>为什么要使用CSS?</li><li>CSS和HTML是什么关系？</li><li>CSS应该怎样使用？</li></ol></blockquote><p><br></p><font color="#00B2EE"><strong>1. CSS是什么?</strong></font><ol><li><p>CSS（Cascading Stylesheets，层叠样式表）。</p></li><li><p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p></li><li><p>是一种制作网页的新技术，现在已经为大多数的浏览器所支持，成为网页设计必不可少的工具之一。使用CSS能够简化网页的格式代码，加快下载显示的速度，也减少了需要上传的代码数量，大大减少了重复劳动的工作量。尤其是当你面对的是有数百个网页的站点时，CSS简直象是神对我们的恩赐！</p></li></ol><p><br></p><font color="#00B2EE"><strong>2. 为什么要使用CSS?</strong></font><blockquote><p><font color="#FF7F00"><strong>HTML</strong>超文本标注语言</font>：各种HTML标记。</p><p><font color="#FF7F00"><strong>CSS</strong>层叠样式表</font>：给HTML标记加的样式。</p><p><font color="#FF7F00"><strong>JavaScript</strong>脚本程序</font>：给HTML标记加的程序。</p></blockquote><p>   W3C（The World Wide Web Consortium）把动态HTML（Dynamic HTML）分为三个部分来实现：脚本语言（包括javascript、Vbscript等）、支持动态效果的浏览器（包括Internet Explorer、Netscape Navigator等）和CSS样式表。</p><p><br></p><font color="#00B2EE"><strong>3. CSS和HTML是什么关系？</strong></font><p><strong>CSS的主要目的：是</strong><font color="#FF7F00"><strong>给HTML标记添加各种各样的表现(格式、样式)</strong></font>。比如：文字样式、背景、文本样式、链接样式。</p><p><br></p><font color="#00B2EE"><strong>4. CSS应该怎样使用？</strong></font><blockquote><ol><li>在HTML标签中直接使用。</li><li>在HTML标签先定义属性id或者class，然后在<strong><code>&lt;head&gt;&lt;/head&gt;</code></strong>定义一个样式表来表现这个属性id或者class。</li></ol></blockquote><p>CSS注释以 <strong><code>/*</code></strong> 开始, 以 <strong><code>*/</code></strong>  结束, 实例如下:</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*这是个注释*/</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*这是另一个注释*/</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="二-CSS-框架"><font color="#FF6347" face="Comic sans MS">二. CSS 框架</font><a href="post/HTML-CSS#二-CSS-框架"></a></h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/10/5c84f57ee276a.png" alt="1.png" data-zoomable></p></div><p><br></p><font color="#FF7F00"><strong>选择器：</strong></font>就是选择HTML标记，换句话说：就是给哪个HTML标记加样式。<br><font color="#FF7F00"><strong>格式声明语句：</strong></font>由<strong><code>{ }</code></strong>构成，<strong><code>{ }</code></strong>中每条声明由<strong><code>属性名:属性值;</code></strong>构成。<br><br><font color="#FF7F00"></font><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>每个属性有一个值，属性和值被冒号<strong><code>:</code></strong>分开。属性和属性之间用英文分号<strong><code>；</code></strong>隔开。最后以分号<strong><code>；</code></strong>结束。</li><li>属性值，一个属性名可以取不同的值，这个值不加引号。</li><li>CSS中的数字单位都是<strong><code>px</code></strong>，这个<strong><code>px</code></strong>不能省略。</li></ol></blockquote><p><br></p><h4 id="2-1-CSS-样式"><font color="#3CB371" face="Comic sans MS">2.1 CSS 样式</font><a href="post/HTML-CSS#2-1-CSS-样式"></a></h4><p>要想在浏览器中显示出预期的CSS样式表效果，就要让浏览器识别并正确调用CSS。当浏览器读取样式表时，要依照文本格式来读，这里介绍四种在页面中插入CSS样式表的方法：<strong>链入外部样式表、内部样式表、导入外部样式表和内联样式</strong>。</p><p><br></p><h5 id="1-链入外部样式表"><font color="#00B2EE" face="Microsoft YaHei">1. 链入外部样式表</font><a href="post/HTML-CSS#1-链入外部样式表"></a></h5><p><strong>链入外部样式表：</strong>是把样式表（选择器+声明）保存为一个样式表<strong><code>.css</code></strong>文件，然后在页面中用<strong><code>&lt;link&gt;</code></strong>标记来链接到这个样式表文件，这个<strong><code>&lt;link&gt;</code></strong>标记必须放到页面的<strong><code>&lt;head&gt;...&lt;/head&gt;</code></strong>区内。</p><p>如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><p>上面这个例子表示浏览器从mystyle.css文件中以文档格式读出定义的样式表。<br><strong><code>href=&quot;mystyle.css&quot;</code></strong>是文件所在的位置。<br><strong><code>rel=&quot;stylesheet&quot;</code></strong>是指在页面中使用这个外部的样式表。rel 属性规定当前文档与被链接文档之间的关系。<br><strong><code>type=&quot;text/css&quot;</code></strong>是指文件的类型是样式表文本。<br><strong><code>media</code></strong>是选择媒体类型，这些媒体包括：屏幕，纸张，语音合成设备，盲文阅读设备等。</p></blockquote><p>　　<font color="#FF7F00"><strong>一个外部样式表文件可以应用于多个页面</strong></font>。当你改变这个样式表文件时，所有页面的样式都随之而改变。在制作大量相同样式页面的网站时，非常有用，不仅减少了重复的工作量，而且有利于以后的修改、编辑，浏览时也减少了重复下载代码。</p><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br>样式表文件可以用任何文本编辑器（例如：记事本）打开并编辑，一般样式表文件扩展名为.css。内容是定义的样式表，不包含HTML标记，mystyle.css这个文件的内容如下：</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">hr </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">}</span> <span class="token selector">p </span><span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">}</span> <span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("images/back40.gif")</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*定义水平线的颜色为土黄；段落左边的空白边距为20象素；页面的背景图片为images目录下的back40.gif文件*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h5 id="2-内部样式表"><font color="#00B2EE" face="Microsoft YaHei">2. 内部样式表</font><a href="post/HTML-CSS#2-内部样式表"></a></h5><p><strong>内部样式表：</strong>是把样式表放到页面的<strong><code>&lt;head&gt;...&lt;/head&gt;</code></strong>区里，这些定义的样式就应用到页面中了，样式表是用<strong><code>&lt;style&gt;&lt;/style&gt;</code></strong>标记插入的。</p><p>从下例中可以看出&lt;style&gt;&lt;/style&gt;标记的用法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head> …… &lt;style type="text/css"> hr </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">}</span> <span class="token selector">p </span><span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">}</span> <span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("images/back40.gif")</span><span class="token punctuation">}</span> &lt;/style> …… &lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h5 id="3-导入外部样式表"><font color="#00B2EE" face="Microsoft YaHei">3. 导入外部样式表 </font><a href="post/HTML-CSS#3-导入外部样式表"></a></h5><p><strong>导入外部样式表：</strong>是指<font color="#FF7F00"><strong>在内部样式表的<code>&lt;style&gt;&lt;/style&gt;</code>里导入一个外部样式表</strong></font>，导入时用<strong><code>@import</code></strong>。</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> @import <span class="token string">"mystyle.css"</span> 其他样式表的声明 <span class="token operator">--</span><span class="token operator">></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span> …… <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>例中<strong><code>@import &quot;mystyle.css&quot;</code></strong>表示导入mystyle.css样式表，注意使用时外部样式表的路径。方法和链入样式表的方法很相似，但导入外部样式表输入方式更有优势。实质上<font color="#FF7F00"><strong>它相当于存在内部样式表中的</strong></font>。 </p><font color="#FF7F00"><strong>注意：</strong></font>导入外部样式表必须在样式表的开始部分，在其他内部样式表上面。<br><br><font color="#FF7F00"></font><p><br></p><h5 id="4-内联样式"><font color="#00B2EE" face="Microsoft YaHei">4. 内联样式</font><a href="post/HTML-CSS#4-内联样式"></a></h5><p><strong>内联样式：</strong>是混合在HTML标记里使用的，用这种方法，可以很简单的对某个元素单独定义样式。内联样式的使用是<font color="#FF7F00"><strong>直接将在HTML标记里加入style参数</strong></font>。而style参数的内容就是CSS的属性和值</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 这是一个段落 <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--这个段落颜色为土黄，左边距为20象素--></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>在style参数后面的引号里的内容相当于在样式表大括号里的内容。 </p><font color="#FF7F00"><strong>注意：</strong></font><strong>style参数可以应用于任意BODY内的元素（包括BODY本身）</strong>，除了BASEFONT、PARAM和SCRIPT。<br><br><font color="#FF7F00"></font><p><br></p><h5 id="5-多重样式表叠加的优先级"><font color="#00B2EE" face="Microsoft YaHei">5. 多重样式表叠加的优先级</font><a href="post/HTML-CSS#5-多重样式表叠加的优先级"></a></h5><p>CSS样式表有层叠顺序，这里我们讨论插入样式表的这几种方法的叠加，如果在同一个选择器上使用几个不同的样式表时，这个属性值将会叠加几个样式表，<font color="#FF7F00"><strong>遇到冲突的地方会以最后定义的为准</strong></font>。例如，我们首先<strong>链入</strong><code>&lt;link&gt;</code><strong>一个外部样式表</strong>，其中定义了<strong><code>h3</code></strong>选择符的<strong><code>color</code></strong>、<strong><code>text-alig</code></strong>和<strong><code>font-size</code></strong>属性：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">h3 </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">8</span>pt<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*标题3的文字颜色为红色；向左对齐；文字尺寸为8号字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<strong>内部样式表</strong>里也定义了h3选择符的text-align和font-size属性：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">h3 </span><span class="token punctuation">{</span> <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>pt<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*标题3文字向右对齐；尺寸为20号字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么这个页面叠加后的样式就是：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>pt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*文字颜色为红色；向右对齐；尺寸为20号字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体颜色从外部样式表里保留下来，而对齐方式和字体尺寸都有定义时，按照后定义的优先而依照内部样式表。</p><p><br></p><font face="Microsoft YaHei"><strong>w3school给出的优先级顺序从低到高是：</strong></font><br>浏览器缺省设置<br>外部样式表<br>内部样式表（位于 &lt;head&gt; 标签内部）<br>内联样式（在 HTML 元素内部）<br><br><br>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。<br>可参考：<font color="#00B2EE">《<a href="https://segmentfault.com/a/1190000005005091" target="_blank" rel="noopener">css的样式优先级</a>》</font> <p><br></p><h4 id="2-2-CSS-选择器"><font color="#3CB371" face="Comic sans MS">2.2 CSS 选择器</font><a href="post/HTML-CSS#2-2-CSS-选择器"></a></h4><p>在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。<br>属性选择器可以根据元素的属性及属性值来选择元素。</p><p><strong>三种基本的选择器类型：</strong>标签名选择器、类选择器、ID选择器</p><font color="#FF7F00"><strong>注意：</strong></font>在标签内写入style=” “的方式，应该是CSS的一种引入方式，而不是选择器，因为根本就没有用到选择器。<br><br><br><font color="#FF7F00"></font><h5 id="1-基本选择器"><font color="#00B2EE" face="Microsoft YaHei">1. 基本选择器</font><a href="post/HTML-CSS#1-基本选择器"></a></h5><font face="Microsoft YaHei"><strong>（1）标签名选择器</strong></font><p>一个HTML文档中有许多标签，例如p标签，h1标签等。若要使文档中的所有p标签都使用同一个CSS样式，就应使用标签选择器。 </p><font color="#FF7F00"><strong>注意：</strong></font>CSS标签选择器，与HTML标签的名称一样，但不能加尖括号。<br><br>示例：<br><br><font color="#FF7F00"></font><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;head>    &lt;style type="text/css">       h1</span><span class="token punctuation">{</span>         <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token selector">p</span><span class="token punctuation">{</span>         <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font face="Microsoft YaHei"><strong>（2）类选择器</strong></font><ul><li><p>使用标签选择器可以为整个HTML文档中的同一个标签指定相同的CSS样式。但是在实际运用中，HTML文档中的同一个标签会被反复使用。若要为相同的标签赋予不同的CSS样式就应使用类选择器。 </p></li><li><p><font color="#FF7F00"><strong>描述：</strong></font>给一类HTML标签加样式。这里所指的“一类”是：每个HTML标签都有一个class属性，且class的值一样。class属性是公共属性，每个HTML标签都有。</p></li><li><p>类选择器的名称，必须以<strong><code>.</code></strong>开头，后限HTML标签的class属性的值。如：<strong><code>.box{ color:red; }</code></strong></p></li></ul><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>测试一下<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token punctuation">.</span><span class="token constant">NO1</span><span class="token punctuation">{</span>                      color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>                      background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#88ff66;</span>                    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//无;或,号</span>               <span class="token punctuation">.</span>test<span class="token punctuation">{</span>                       color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>                       border<span class="token punctuation">:</span>1px blue solid<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>NO1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>习近平心中的互联网<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>测试代码<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><p>这种定义class 的方式是前端开发最常用的选择器，有几个突出的特点：可以给不同的标签设置同一个类，从而用一条CSS命令控制几个标签，减少大量代码，是页面修改简单，易维护，易改版；其次，后台工作人员机会不会用到有关class的相关设置，不需要跟后台人员之间进行交互；再者，可以通过js等动态改变标签的Classname，从而改变整个标签的样式，使前端动态效果实现起来更为容易。</p></blockquote><p><br></p><font face="Microsoft YaHei"><strong>（3）id选择器</strong></font><ul><li><p>ID选择器和类选择器相似，不同的是，ID选择器不能复用。在一个XHTML文档中，一个ID选择器只能把其CSS样式指定给一个标签。 </p></li><li><p><font color="#FF7F00"><strong>注：</strong></font>网页中HTML标签的id属性的值，必须是唯一的。id属性一般是给JS使用的，不是让你来加样式的。class属性只能给CSS用，不能给JS用的。</p></li><li><p>id选择器的名称，必须以<strong><code>#</code></strong>开头，后跟HTML标记的id属性的值。</p></li></ul><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>php<span class="token punctuation">.</span>cn<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token shell-comment comment">#NO1{</span>        color<span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#88ff99;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>haha<span class="token punctuation">{</span>         color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>         background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#88ff66;</span>     <span class="token punctuation">}</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>NO1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>习近平心中的互联网<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>互联网是<span class="token number">20</span>世纪最伟大的发明。<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font face="Microsoft YaHei"><strong>（4）选择器的优先级</strong></font><p>参考：</p><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/css-style-priority.html" target="_blank" rel="noopener">CSS 样式优先级</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/ombre/p/7418667.html" target="_blank" rel="noopener">CSS样式优先级问题</a>》</font> <blockquote><p><strong>选择器的优先级从高到低：</strong><br>ID 选择器， 如 <strong><code>#id{}</code></strong><br>类选择器， 如 <strong><code>.class{}</code></strong><br>属性选择器， 如 <strong><code>a[href=&quot;segmentfault.com&quot;]{}</code></strong><br>伪类选择器， 如 <strong><code>:hover{}</code></strong><br>伪元素选择器， 如 <strong><code>::before{}</code></strong><br>标签选择器， 如 <strong><code>span{}</code></strong><br>通配选择器， 如 <strong><code>*{}</code></strong></p></blockquote><p><br></p><h5 id="2-id、class选择器的区别"><font color="#00B2EE" face="Microsoft YaHei">2. id、class选择器的区别</font><a href="post/HTML-CSS#2-id、class选择器的区别"></a></h5><p>id和class属性是网页中两个通用的属性，它们协同工作使整个页面变得丰富多彩。当我们为一个元素定义样式时。可以使用id，也可以使用class。但是我们也应该注意这两者的区别。 </p><ol><li><p>在css样式表中书写时，id选择符前面应该加前缀符号‘#’，而class选择符前面应该加前缀符号‘.’。 </p></li><li><p>id属性一般在一个页面中只可以使用一次，而class可以被多次引用。 </p></li><li><p>id作为元素的标签，用于区分不同结构和内容，而class作为一个样式，它可以应用到任何结构和内容上。 </p></li><li><p>在布局思路上，一般坚持这样的原则：id是先确定页面的结构和内容，然后再为它定义样式：而class相反，它先定义好一类样式，然后再页面中根据需要把类样式应用到不同的元素和内容上面。 </p></li><li><p>目前浏览器都能允许在同一个页面内出现多个相同属性值的id，一般情况下也能正常显示，不过当使用javascript通过id来控制元素时就会出现错误。 </p></li><li><p>在实际应用时，class更多的被应用到文字版块以及页面修饰等方面，而id更多地被用来实现宏伟布局和设计包含块，或包含框的样式。 </p></li></ol><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>ID 有高优先级、唯一性的特点，特指「个体」。<br>相对于 ID，class 的优先级比较适中，特指「特定群体」。<br>Class 的使用需要参考面向对象的抽象概念，把共有的属性抽象出来。</li><li>ID是先找到结构/内容，再给它定义样式；<br>Class是先定义好一种样式，再套给多个结构/内容</li></ol></blockquote><p><br></p><h5 id="3-组合选择器"><font color="#00B2EE" face="Microsoft YaHei">3. 组合选择器</font><a href="post/HTML-CSS#3-组合选择器"></a></h5><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html" target="_blank" rel="noopener">CSS 组合选择器</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html" target="_blank" rel="noopener">CSS基础教程之组合选择器</a>》</font> ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hhh… ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="Treecatee.gitgub.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="Treecatee.gitgub.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML-基础</title>
    <link href="Treecatee.gitgub.io/post/html-basics/"/>
    <id>Treecatee.gitgub.io/post/html-basics/</id>
    <published>2019-03-09T12:15:19.000Z</published>
    <updated>2019-03-11T13:13:08.032Z</updated>
    
    <content type="html"><![CDATA[<p>使用HTML标记实际上也就是使用标签和其属性 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>HTML 基础</strong></font> </center><p><br></p><p><br></p><h3 id="一-HTML-初识"><font color="#FF6347" face="Comic sans MS">一. HTML 初识</font><a href="post/HTML-basics#一-HTML-初识"></a></h3><p>当您保存 HTML 文件时，既可以使用 .htm 也可以使用 .html 扩展名。两者没有区别，完全根据您的喜好。</p><p><br></p><p><strong>HTML标签编写规范</strong></p><p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p><p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p><p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p><p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层。</p><p><br></p><font color="#00B2EE"><strong>HTML，Hypertext Markup Language ,超文本标注语言。</strong></font>HTML是一种规范，是一种标准，编写网页的一种标准。<br><font color="#00B2EE"></font><ul><li><strong>超文本：</strong>就是网页上不光有文本，还有图片、音乐、视频等。</li><li><strong>标注：</strong>是一种记号，是一种标志。如：红绿灯</li><li><strong>语言：</strong>这里的“语言”就是代码，跟所谓“程序语言”一点关系都没有。</li></ul><p><strong>HTML的主要目的：</strong><font color="#FF7F00"><strong>就是用来显示网页的不同效果、不同部分。如：<code>&lt;b&gt;文本&lt;/b&gt;</code></strong></font></p><p><br></p><p><br></p><h4 id="1-1-HTML文件结构"><font color="#3CB371" face="Comic sans MS">1.1 HTML文件结构</font><a href="post/HTML-basics#1-1-HTML文件结构"></a></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>php<span class="token punctuation">.</span>cn<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>这里是存放网页内容的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><strong>HTML 页面整体构成</strong><br>用浏览器打开任意一个网页，右键选择查看网页源码，就可以看到网站的HTML代码，总结一下，整体结构如下图：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c823abe1bb83.png" alt=" 1.png" data-zoomable></p></div><font color="#00B2EE" face="Microsoft YaHei"><strong>一、HTML文件结构的说明：</strong></font><ul><li><p><strong><code>&lt;!DOCTYPE HTML&gt;</code>：</strong>html5标准网页声明，<font color="#FF7F00"><strong>必须放在 HTML 文档的第一行</strong></font>，位于<code>&lt;html&gt;</code>标签之前。声明有助于浏览器中正确显示网页。</p></li><li><p><strong><code>&lt;html&gt;&lt;/html&gt;</code>：</strong>告诉浏览器，其中的代码用什么格式(图片、视频)来编译。</p></li><li><p><strong><code>&lt;head&gt;&lt;/head&gt;</code>：</strong>头部中包含的标记是页面的标题、序言、说明等内容，它本身<font color="#FF7F00"><strong>不作为内容来显示</strong></font>，但影响网页显示的效果。</p><ol><li>下面<font color="#FF7F00"><strong>这些标签可用在 head 部分：<code>&lt;title&gt;</code>,<code>&lt;meta&gt;</code>,  <code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code></strong></font>。</li><li>头部中最常用的标记符是标题标记符<code>&lt;title&gt;页面标题&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>标记符，其中标题标记符用于定义网页的标题，它的内容显示在网页窗口的标题栏中，网页标题可被浏览器用作书签和收藏清单。</li><li>设置文档标题和其它在网页中不显示的信息，比如direction方向、语言代码Language Code（实体定义!ENTITY % i18n）、指定字典中的元信息、等等。</li></ol></li><li><p><strong><code>&lt;body&gt;&lt;/body&gt;</code>：</strong>是网页主要内容的显示区域。网页中显示的实际内容均包含在这2个正文标记符之间。正文标记符又称为实体标记。网页中99%的内容都必须放在<code>&lt;body&gt;</code>。只有放在<code>&lt;body&gt;</code>中，最终浏览器翻译以后，才能看见结果。</p></li></ul><p><br></p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、关于头部<code>&lt;head&gt;&lt;/head&gt;</code>中常用的两个标签<code>&lt;title&gt;&lt;/title&gt;</code>和<code>&lt;meta&gt;</code>：</strong></font><ol><li><p><strong><code>&lt;title&gt;纯文本&lt;/title&gt;</code></strong><font color="#FF7F00"><strong>中只能是纯文本，任何标记都会原封不动的显示。</strong></font></p></li><li><p><strong><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code></strong>功能：告诉浏览器，如何翻译汉字。</p><ol><li><strong>http-equiv：</strong>模拟http协议的文件头原信息，主要目的是服务器向客户端返回时，用什么格式显示。</li><li><strong>Content-type：</strong>内容类型。</li><li><strong>Content：</strong>详细内容类型介绍。</li><li><strong>Text/html：</strong>网页是text格式，html是文本中的小格式。</li><li><strong>Charset：</strong>字符集，主要控制汉字如何显示。</li><li><strong>Utf-8：</strong>多国语言编码，什么国家的语言都可以正常显示。</li></ol></li></ol><p><br></p><p><br></p><h4 id="1-2-HTML文件组成"><font color="#3CB371" face="Comic sans MS">1.2 HTML文件组成</font><a href="post/HTML-basics#1-2-HTML文件组成"></a></h4><blockquote><p><font color="#FF7F00"><strong>HTML 是什么</strong></font></p><ol><li>HTML 是用来描述网页的一种语言。</li><li>HTML 不是一种编程语言，而是一种标记语言</li><li>标记语言是一套标记标签 (markup tag)</li><li>HTML 使用标记标签来描述网页</li><li>HTML 文档包含了HTML 标签及文本内容</li><li>HTML文档也叫做 web 页面</li></ol></blockquote><p><br></p><blockquote><p><font color="#FF7F00"><strong>HTML 标签</strong></font></p><ol><li>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</li><li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li><li>HTML 标签通常是成对出现的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code>。也有单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>开始和结束标签也被称为开放标签和闭合标签</li><li>标签语法格式：<ol><li><strong>双边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></li><li><strong>单边标签：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></li></ol></li></ol></blockquote><p><br></p><blockquote><p><font color="#FF7F00"><strong>HTML 元素</strong></font></p><ol><li>“HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.</li><li>但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签，如下实例:</li><li>HTML 元素:<code>&lt;p&gt;这是一个段落。&lt;/p&gt;</code></li></ol></blockquote><hr size="2" color="#00B2EE" width="100%" noshade><ul><li><p>HTML元素是组成HTML文档最基本的部件，它是用标签来表现的，一般来说，“起始标签”表示元素的开始，“结束标签”表示元素的结束。</p></li><li><p>HTML元素分为“有内容的元素”和“空元素”两种。</p></li><li><p>“有内容的元素”是由起始标签、结束标签以及两者之间的元素内容组成的，其中元素内容既可以是需要显示在网页中的文字内容，也可以是其它元素。</p></li></ul><hr size="2" color="#00B2EE" width="100%" noshade><p><br></p><blockquote><p><font color="#FF7F00"><strong>HTML 元素属性</strong></font></p><ol><li>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。</li><li>属性总是以名称/值对的形式出现，比如：<code>name=&quot;value&quot;</code>。</li><li>属性值应该始终被包括在<strong>引号内</strong>。双引号是最常用的，不过使用单引号也没有问题。</li></ol></blockquote><hr size="2" color="#00B2EE" width="100%" noshade><ul><li>HTML的元素属性提供了对HTML元素的描述和控制信息，借助于元素属性，HTML网页才会展现丰富多彩且格式美观的内容。</li><li>例如要设置<code>&lt;p&gt;</code>元素中文字内容的颜色为红色，字号为30像素，这时就需要用到HTML元素属性了。如在<code>&lt;p&gt;</code>元素名称的尖括号内添加了<code>style=&quot;color:#ff0000;font-size:30px&quot;</code>内容，浏览器就会按照设定的效果来显示内容。</li></ul><hr size="2" color="#00B2EE" width="100%" noshade><p><br></p><p><br></p><h3 id="二-HTML-标签"><font color="#FF6347" face="Comic sans MS">二. HTML 标签</font><a href="post/HTML-basics#二-HTML-标签"></a></h3><p><br></p><h4 id="2-1-标签介绍"><font color="#3CB371" face="Comic sans MS">2.1 标签介绍</font><a href="post/HTML-basics#2-1-标签介绍"></a></h4><p>按功能排序HTML的标签请参考：<font color="#00B2EE">《<a href="http://www.runoob.com/tags/ref-byfunc.html" target="_blank" rel="noopener">HTML 标签参考手册- (HTML5 标准)</a>》</font> </p><p><strong>HTML标签分两类：</strong>双边标签和单边标签。</p><p><br></p><p><strong>1. 双边标签</strong></p><ul><li>双边标签，是指有开始和结束标签，内容放在开始和结束标签之间。如：<code>&lt;b&gt;内容&lt;/b&gt;</code></li></ul><ul><li><p>“属性”的通俗理解：一个东西总是有一些特征，重量，体积等，这就是一个东西的“属性”</p></li><li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;内容&lt;/标签&gt;</code></strong></p></li></ul><p><br></p><p><strong>2. 单边标签</strong></p><ul><li><p>单边标签，只有开始标签，而没结束标签，单边标签一般是没有内容。如：<code>&lt;br&gt;</code></p></li><li><p>单边标签一般起一个特殊的功能。</p></li><li><p>单边标签常用的有10多个标记。</p></li><li><p><strong>语法格式：<code>&lt;标签 属性1 = “值1”  属性2 = “值2”&gt;</code></strong></p></li></ul><p><br></p><p>先来看一下双边标签例子，观察<code>&lt;font&gt;&lt;/font&gt;</code>标签</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>directoree<span class="token punctuation">.</span>top<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">&lt;body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/08/5c82461ac1553.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>第一个，哈哈哈哈<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>看看我有什么特别的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行如下图：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c828faaaf57d.jpg" alt="3.png" data-zoomable></p></div><p><br></p><p>再来看一下单边标签例子，观察<code>&lt;br&gt;</code>标签</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>treecatee<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">&lt;body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/08/5c82461ac1553.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>第二个，哈哈哈哈<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>再看看我有什么特别的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>再看看我有什么特别的<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行如下图：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c828fa9efed8.jpg" alt="4.png" data-zoomable></p></div><p><br></p><p><strong>HTML标签编写规范</strong></p><p>HTML<font color="#FF7F00"><strong>标记不区分大小写</strong></font>。如：<code>&lt;font&gt;</code>、<code>&lt;Font&gt;</code>、<code>&lt;fOnt&gt;</code>。单特殊符号必须小写，如<code>&amp;nbsp</code>。</p><p>HTML标记属性可有可无。有的标记是没有属性的，如：<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>等</p><p>双边标记的内容在开始和结束标签之间，单边标记没有内容。</p><p>HTML标记可以相互嵌套，但一定注意是顺序嵌套，外层套内层，一层套一层，不能交叉嵌套。</p><p><br></p><p><hr size="2" color="#00B2EE" width="100%" noshade></p><hr size="2" color="#00B2EE" width="100%" noshade><p><br></p><h4 id="2-2-常用标签-文本"><font color="#3CB371" face="Comic sans MS">2.2 常用标签-文本</font><a href="post/HTML-basics#2-2-常用标签-文本"></a></h4><ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;!DOCTYPE HTML&gt;</code></strong> html5标准网页声明（必须有）</li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;html&gt;&lt;/html&gt;</code></strong> 声明代码格式（必须有）</li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;head&gt;&lt;/head&gt;</code></strong> 文件头（必须有）<ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;title&gt;&lt;/title&gt;</code></strong> 标题（必须有）</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;meta&gt;</code></strong> 元数据  …..</li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;body&gt;&lt;/body&gt;</code></strong>&emsp;<strong><code>&lt;h1&gt; - &lt;h6&gt;</code></strong>（必须有）</li><li style="list-style: none"><input type="checkbox"> 文本标签<ul><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;b&gt;&lt;/b&gt;</code></strong> 加粗</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;i&gt;&lt;/i&gt;</code></strong> 斜体</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;u&gt;&lt;/u&gt;</code></strong> 下划线</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;s&gt;&lt;/s&gt;</code></strong> 删除线</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong> 上标</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong> 下标</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;font&gt;&lt;/font&gt;</code></strong> 字体标记<ul><li style="list-style: none"><input type="checkbox"> <strong><code>size</code></strong> 大小(1 -&gt; 7)</li><li style="list-style: none"><input type="checkbox"> <strong><code>color</code></strong> 颜色</li><li style="list-style: none"><input type="checkbox"> <strong><code>face</code></strong> 字体</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;p&gt;&lt;/p&gt;</code></strong> 表示一个段落</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;br&gt;</code></strong> 换行 </li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;hr&gt;</code></strong> 段落分割线 </li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong> 定义预格式化的文本和格式代码块</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;strong&gt;</code>和<code>&lt;em&gt;</code></strong> 加粗和斜体（强调）</li><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;span&gt;&lt;/span&gt;</code></strong> 对文档中的行内元素进行组合</li></ul><p><br></p><font size="4" face="Microsoft YaHei"><strong>1. <code>&lt;head&gt;&lt;/head&gt;</code>头标签</strong></font><blockquote><p><strong><code>&lt;head&gt;</code></strong>内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息等。<br>可添加到head部分的标签：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>:</p><ul><li><strong><code>&lt;title&gt;</code>：</strong>指定整个网页的标题，在浏览器最上方显示。</li><li><strong><code>&lt;base&gt;</code>：</strong>为页面上的所有链接规定默认地址或默认目标(target)。</li><li><strong><code>&lt;meta&gt;</code>：</strong>提供有关页面的基本信息。</li><li><strong><code>&lt;script&gt;</code>：</strong>定义客户端脚本，如JavaScript。</li><li><strong><code>&lt;style&gt;</code>：</strong>定义内部样式表与网页的关系。</li></ul></blockquote><p><br></p><ol><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;title&gt;&lt;/title&gt;</code>：标签定义文档的标题。</strong></font> <br></p><ol><li>title 元素在所有 HTML/XHTML 文档中都是必需的，无属性；</li><li><code>&lt;title&gt;纯文本&lt;/title&gt;</code>中间只能是纯文本；</li><li>title 元素能够：<ol><li>定义浏览器工具栏中的标题</li><li>提供页面被添加到收藏夹时显示的标题</li><li>显示在搜索引擎结果中的页面标题</li><li>告诉用户和搜索引擎这个网页的主要内容是什么，</li><li>搜索引擎可以通过网页标题，迅速的判断出当前网页的主题。</li></ol></li></ol></li></ol><p><br></p><hr size="2" color="#00B2EE" width="100%" noshade><ol start="2"><li><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;meta&gt;</code>：标签</strong></font> <br><ol><li><code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。</li><li>元数据不会显示在页面上，但是对于机器是可读的。</li><li>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</li><li><code>&lt;meta&gt;</code> 标签始终只能位于 head 元素中。但是头部可以有多个<code>&lt;meta&gt;</code> 标签。</li><li>元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</li><li><strong>包含属性：（有属性就必须有对应的值(content)）</strong><ol><li><font color="#FF7F00"><strong>content：</strong></font>必须属性。<ol><li>定义与 http-equiv 或 name 属性相关的元信息，content中的内容其实就是各个参数的变量值。</li><li>变量值可以有多个，用半角逗号<code>,</code>隔开。</li></ol></li><li><font color="#FF7F00"><strong>http-equiv：</strong></font>可选属性。可选值：<ol><li><strong><code>content-type</code>，内容类别</strong>，用于设置页面的类别和语言字符集。编写格式<code>&lt;meta http-equiv=“content-type” context=“text/html”；charset=“gb2312”/&gt;</code>，content属性的值代表页面采用HTML代码输出，字符集为gb2312（简体中文），国际化网站开发的话，为了字符统一，建议charset采用utf-8.</li><li><strong><code>refresh</code>。刷新</strong>，用于设置多长时间内网页自己刷新一次，或者用一段时间自动跳转到其他页面，第一种编写格式<code>&lt;meta http-equiv=“refresh” context=“30”/&gt;</code>表示隔30秒刷新一次，第二种编写格式<code>&lt;meta http-equiv=“refresh” context=“30；url=www.google.com”/&gt;</code>，表示30秒后页面自动跳转到<a href="http://www.google.com网站" target="_blank" rel="noopener">www.google.com网站</a></li></ol></li><li><font color="#FF7F00"><strong>name：</strong></font>可选属性。<ol><li>用于页面的关键字和描述，是写给搜索引擎看的；</li><li>与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</li><li>主要用于描述网页的内容，用于对搜索引擎的优化，必须重点掌握。正确地设置name属性，以便搜索引擎（比如google，baidu）的搜索机器人查找，分类，搜索引擎一般都会自动查找meta值来给网页分类。name的取值(content)如下：<ol><li><strong><code>keywords</code></strong>。即关键字，用于说明网页所包含的关键字等信息，从而提高被搜索引擎搜索到的概率。编写格式为<code>&lt;meta name=&quot;keywords&quot; content =“关键字”/&gt;</code>，content属性的值为用户所设置的具体关键字。（一般可设置多个关键字，他们之间用英文半角的逗号分开，搜索引擎都限制关键字的数量，所以关键字内容要简洁精练）</li><li><strong><code>description</code></strong>。中文意思为”描述”，用于描述网页的主要内容、主题等，合理设置也可以提高被搜索引擎搜索到的概率。格式为<code>&lt;meta name=&quot;description&quot; content =“对页面的描述”/&gt;</code>，content属性值为用户所设置的页面具体描述的内容，最多容纳1024个字符，但搜索引擎一边只显示约前175个字符。</li><li><strong><code>author</code></strong>。作者，用于设置网站作者的名称，比较专业的网站经常用到。格式为<code>&lt;meta name=&quot;author&quot; content =“作者名称”/&gt;</code></li></ol></li></ol></li></ol></li></ol></li></ol><p>可参读：<font color="#00B2EE">《<a href="http://www.php.cn/code/443.html" target="_blank" rel="noopener">HTML &lt;head&gt; 元素</a>》</font> 、<font color="#00B2EE">《<a href="https://www.cnblogs.com/tielemao/archive/2018/05/25/9086693.html" target="_blank" rel="noopener">HTML-head头部浅析</a>》</font> </p><p><br></p><p>例1：打开该网页后每隔20秒刷新一次</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>这是个展示网页hhh<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>希望你能够在这里学的开心<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>例2：打开该网页20秒后跳转到百度首页</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2;url<span class="token punctuation">=</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>                  <span class="token string">'注意这里的2后是分号“;” '</span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>跳转网页hhh<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>希望你能够在这里学的开心<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><hr size="2" color="#00B2EE" width="100%" noshade><ol start="3"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;base&gt;</code>：标签</strong></font> <br> </p><p><code>&lt;base&gt;</code> 标签为页面上的所有链接设置默认的地址或默认的目标（target）</p></li></ol><p><br></p><ol start="4"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;link&gt;</code>：标签</strong></font> <br> </p><p><code>&lt;link&gt;</code> 标签定义文档与外部资源之间的关系。</p></li></ol><p><br></p><ol start="5"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;style&gt;</code>：标签</strong></font> <br> </p><p><code>&lt;style&gt;</code> 标签用于为 HTML 文档定义样式信息。</p></li></ol><p><br></p><ol start="6"><li><p><font color="#00B2EE" face="Microsoft YaHei"><strong><code>&lt;script&gt;&lt;/script&gt;</code>：标签</strong></font> <br></p><p><code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如JavaScript。</p></li></ol><p><br></p><font size="4" face="Microsoft YaHei"><strong>2. <code>&lt;body&gt;</code>标签和标题</strong></font><p>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code>标签来定义的。</p><p><code>body</code>用法如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">用法</th><th style="text-align:left">作用</th><th style="text-align:left">可选属性/是否赞成使用该属性</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;body&gt;内容&lt;/body&gt;</code></td><td style="text-align:left">定义文档的主体</td><td style="text-align:left">alink：规定文档中活动链接（active link）的的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>background URL：规定文档的背景图。<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>bgcolor：规定文档的背景颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>link：规定文档中未访问链接的默认颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>text：规定文档中所有文本的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。<br>vlink：规定文档中已被访问链接的颜色<br>&emsp;&emsp;&emsp;不赞成使用。请使用样式取代它。</td></tr></tbody></table></div></div><p><strong><code>&lt;body&gt;</code>的常用属性</strong></p><p>bgColor：网页背景色。如：<code>&lt;body  bgColor = “red”&gt;</code></p><p>background：网页背景图片地址。如：<code>&lt;body  background = “images/01.jpg”&gt;</code></p><p><br></p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>demook<span class="token punctuation">.</span>hhh<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/08/5c82461ac1593.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Nice优秀啊<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span></span>是的呢 ヾ<span class="token punctuation">(</span>๑╹◡╹<span class="token punctuation">)</span>ﾉ" <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c8246bcd4f93.png" alt="5.png" data-zoomable></p></div><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>3. 文本修饰标签</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">用法</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><strong><code>&lt;b&gt;&lt;/b&gt;</code></strong></td><td style="text-align:left">加粗字体。如：<code>&lt;b&gt;HTML文件&lt;/b&gt;</code> ----&gt; <b>HTML文件</b></td></tr><tr><td style="text-align:left"><strong><code>&lt;i&gt;&lt;/i&gt;</code></strong></td><td style="text-align:left">斜体italic。如：<code>&lt;i&gt;HTML文本&lt;/i&gt;</code>----&gt; <i>HTML文本</i></td></tr><tr><td style="text-align:left"><strong><code>&lt;u&gt;&lt;/u&gt;</code></strong></td><td style="text-align:left">下划线underline。如：<code>&lt;u&gt;HTML文本&lt;/u&gt;</code>----&gt; <u>HTML文本</u></td></tr><tr><td style="text-align:left"><strong><code>&lt;s&gt;&lt;/s&gt;</code></strong></td><td style="text-align:left">删除线strike。如：<code>&lt;s&gt;删除线&lt;/s&gt;</code>----&gt; <s>删除线</s></td></tr><tr><td style="text-align:left"><strong><code>&lt;sup&gt;&lt;/sup&gt;</code></strong></td><td style="text-align:left">上标，如：<code>3&lt;sup&gt;x&lt;/sup&gt;</code> ----&gt; 3<sup>x</sup></td></tr><tr><td style="text-align:left"><strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong></td><td style="text-align:left">下标，如：<code>6&lt;sub&gt;5&lt;/sub&gt;</code> ----&gt; 6<sub>5</sub></td></tr><tr><td style="text-align:left"><strong><code>&lt;font&gt;&lt;/font&gt;</code></strong></td><td style="text-align:left">字体标记，如：<code>&lt;font size=&quot;4&quot; color=&quot;red&quot; face=&quot;Comic sans MS&quot;&gt;Demo&lt;/font&gt;</code><font size="4" color="red" face="Comic sans MS">Demo</font></td></tr><tr><td style="text-align:left"><strong><code>size</code></strong></td><td style="text-align:left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。文本大小，取值1-7（1小，7大）</td></tr><tr><td style="text-align:left"><strong><code>color</code></strong></td><td style="text-align:left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。颜色值</td></tr><tr><td style="text-align:left"><strong><code>face</code></strong></td><td style="text-align:left"><code>&lt;font&gt;&lt;font&gt;</code>的属性。字体，楷体、黑体、宋体</td></tr></tbody></table></div></div><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>4. <code>&lt;p&gt;&lt;/p&gt;</code>表示一个段落</strong></font><p>属性及取值如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">align</td><td style="text-align:left">left<br>right<br>center<br>justify</td><td style="text-align:left">HTML5不支持。 HTML 4.01已废弃。 <br>不赞成使用。请使用样式取代它。 规定段落中文</td></tr></tbody></table></div></div><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>5. <code>&lt;br&gt;</code> 标签</strong></font><p><code>&lt;br&gt;</code> 标签插入一个简单的换行符。<code>&lt;br&gt;</code> 标签是一个空标签，意味着它没有结束</p><p><strong>提示：</strong>在<font color="#FF7F00"><strong>写地址信息或者写诗词时 <code>&lt;br&gt;</code> 标签非常有用</strong></font>。</p><p><strong>注释：</strong> 请<font color="#FF7F00"><strong>使用 <code>&lt;br&gt;</code> 标签来输入空行，而不是分割段落</strong></font>。</p><p>在 HTML 中，<code>&lt;br&gt;</code> 标签没有结束标签。</p><p>在 XHTML 中，<code>&lt;br&gt;</code> 标签必须被正确地关闭，比如这样：<code>&lt;br /&gt;</code> 。</p><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>6. <code>&lt;hr&gt;</code> 标签</strong></font><div class="article-img"><p><img src="https://i.loli.net/2019/03/08/5c82523cb9d72.png" alt="6.png" data-zoomable></p></div><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>7. <code>&lt;pre&gt;&lt;/pre&gt;</code> <code>&lt;code&gt;&lt;/code&gt;</code></strong></font><p><strong><code>&lt;pre&gt;</code>预排版标记</strong></p><p>功能：将保留所有的空白字符(空格、换行符)，换句话说：就是原封不动输出。<br>可参读：<font color="#00B2EE">《<a href="https://www.jianshu.com/p/6abc36c28e45" target="_blank" rel="noopener">html &lt;.code&gt;&amp;&lt;.pre&gt;</a>》</font> </p><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>8. <code>&lt;strong&gt;</code>和 <code>&lt;em&gt;</code></strong></font><ul><li><p>有了段落又有了标题，现在如果想在一段话中特别强调某几个文字，这时候就可以用到<code>&lt;em&gt;</code>或<code>&lt;strong&gt;</code>标签。</p></li><li><p>但两者在强调的语气上有区别:<code>&lt;em&gt;</code> 表示强调，<code>&lt;strong&gt;</code>表示更强烈的强调。并且在浏览器中<code>&lt;em&gt;</code> 默认用斜体表示，<code>&lt;strong&gt;</code> 用粗体表示。两个标签相比，目前国内前端程序员更喜欢使用<code>&lt;strong&gt;</code>表示强调。</p></li><li><p><font color="#FF7F00"><strong><code>&lt;em&gt;</code>的内容在浏览中显示为斜体，<code>&lt;strong&gt;</code>显示为加粗</strong></font>。如果不喜欢这种样式，没有关系，以后可以使用css样式去改变它。</p></li></ul><p><br></p><p><br></p><font size="4" face="Microsoft YaHei"><strong>9. <code>&lt;span&gt;&lt;/span&gt;</code>&gt;</strong></font><ul><li><p><code>&lt;span&gt;</code> 标签被用来组合文档中的行内元素。span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 <code>&lt;span&gt;</code> 应用样式，那么 <code>&lt;span&gt;</code> 元素中的文本与其他文本不会任何视觉上的差异。</p></li><li><p><code>&lt;span&gt;</code> 标签提供了一种将文本的一部分或者文档的一部分独立出来的方式。</p></li><li><p>被 <code>&lt;span&gt;</code> 元素包含的文本，您可以使用 CSS 对它定义样式，或者使用 JavaScript 对它进行操作。</p></li></ul><p><br></p><p><br></p><h4 id="2-3-常用标签-链接和图像"><font color="#3CB371" face="Comic sans MS">2.3 常用标签-链接和图像</font><a href="post/HTML-basics#2-3-常用标签-链接和图像"></a></h4><h5 id="一-image图像"><font color="#00B2EE" face="Microsoft YaHei">一. image图像</font><a href="post/HTML-basics#一-image图像"></a></h5><p><strong>注：</strong>这是一个单边标签</p><font color="#00B2EE" face="Microsoft YaHei"></font><ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;img&gt;</code></strong> 单边标签，它只包含属性，并且没有闭合标签。<ul><li style="list-style: none"><input type="checkbox" checked> <strong>必须属性</strong> ↓↓<ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>src</code></strong>：地址。src 指 “source”。源属性的值是图像的 URL 地址。语法：<code>&lt;img src=&quot;url&quot; alt=&quot;some_text&quot;&gt;</code></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>alt</code></strong>：图像替代文本，在浏览器无法载入图像时，浏览器将显示这个替代性的文本而不是图像。语法：<code>&lt;img src=&quot;../style/images/boat.gif&quot; alt=&quot;Big Boat&quot;&gt;</code></li></ul></li><li style="list-style: none"><input type="checkbox"> <strong>可选属性</strong> ↓↓<ul><li style="list-style: none"><input type="checkbox"> <strong><code>height</code></strong>：图像高度，默认单位为像素</li><li style="list-style: none"><input type="checkbox"> <strong><code>width</code></strong> ：图像宽度，默认单位为像素</li><li style="list-style: none"><input type="checkbox"> <strong><code>ismap</code></strong> ：为图像定义为服务器端图像映射</li></ul></li></ul></li></ul><p><br></p><p><strong>注：</strong>可以尝试输入其他属性看看效果，想要让图片居中，只能通过CSS。</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>Life was like a box of chocolates<span class="token punctuation">,</span> you never know what you're gonna get<span class="token punctuation">.</span>（生命就像一盒巧克力，结果往往出人意料。）<span class="token operator">--</span><span class="token operator">-</span>《阿甘正传》  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://s2.ax1x.com/2019/03/04/kOxQJS.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c83893d59c1b.png" alt="11.png" data-zoomable></p></div><p><br></p><h5 id="二-超级链接"><font color="#00B2EE" face="Microsoft YaHei">二. 超级链接</font><a href="post/HTML-basics#二-超级链接"></a></h5><p>请注意<font color="#FF7F00"><strong>超级链接和锚点链接是不一样滴……</strong></font></p><p>网站中随处可见超级链接的身影，打开百度新闻，任意点击一段话，就会打开新闻详情页，这全部都是超级链接</p><p><strong>语法格式：<code>&lt;a  属性 = “值”&gt;……&lt;/a&gt;</code></strong><br><strong>注：</strong><code>&lt;a&gt;</code>中不能再套<code>&lt;a&gt;</code>标记</p><p><br></p><font face="Microsoft YaHei" color="#20B2AA"><strong>1. 标签</strong></font> <ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;a&gt;&lt;/a&gt;</code></strong> 超级链接，中间是文本提示，常用属性:<ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>href</code></strong>：目标文件的地址URL（该URL可以是相对地址，也可以是绝对地址）</li><li style="list-style: none"><input type="checkbox" checked> <strong><code>target</code></strong>：目标文件的显示窗口的方法：<ul><li style="list-style: none"><input type="checkbox"> <strong><code>_blank</code></strong>：在新窗口中打开目标文件。</li><li style="list-style: none"><input type="checkbox"> <strong><code>_self</code></strong>：在当前窗口中打开目标文件(默认打开)，相当于“替换”当前页面操作。</li><li style="list-style: none"><input type="checkbox"> <strong><code>_parent</code></strong>：在父级窗口来打开目标文件。常用框架网页中</li><li style="list-style: none"><input type="checkbox"> <strong><code>_top</code></strong>：在最顶级窗口来打开目标文件。常用框架网页中</li></ul></li></ul></li></ul><p><br></p><font face="Microsoft YaHei" color="#20B2AA"><strong>2. 绝对地址URL</strong></font> <p><strong>（1）远程的绝对地址</strong>：直接输入远程绝对路径</p><ol><li>访问远程的文件，总是以<code>&lt;a href=&quot;http://域名/主机名..&quot;&gt;提示文本&lt;/a&gt;</code><br>如：<code>&lt;a href=&quot;https://Treecatee.github.io&quot; target=&quot;_blank&quot;&gt;Treecatee.github.io&lt;/a&gt;</code></li></ol><p><br></p><p><strong>（2）本地的绝对地址(很少使用)</strong>：访问本地绝对的路径文件</p><ol><li>访问本地的绝对地址，是以<code>&lt;a href=&quot;http://file:///开头的绝对地址。&quot;&gt;file:///开头的绝对地址。&lt;/a&gt;</code><br>如：<code>&lt;a href=&quot;file:///D:/image.html&quot; target=&quot;_blank&quot;&gt;</code></li></ol><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://treecatee.github.io<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>远程绝对路径访问，哈哈哈😁<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///D:/image.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>。・∀・<span class="token punctuation">)</span>ノ本地绝对路径访问，不要忘记“<span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span>”<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c8399a12d344.png" alt="12.png" data-zoomable></p></div><font face="Microsoft YaHei" color="#20B2AA"><strong>3. 相对地址URL</strong>（项目中路径一般是相对路径）</font> <p>（1）当前文件和目标文件是<strong>同级关系</strong>，链接地址直接写目标文件名。</p><p>（2）当前文件与<strong>目标文件所在的文件夹是同级关系</strong>，先找“文件夹名”，然后再找“文件名”。</p><p>（3）目标文件位于<strong>上一层目录中</strong>，往上找对应的目录，再找目录中的文件。</p><ol><li><strong>注意：</strong><ol><li><strong><code>./</code></strong>代表当前目录，默认使用</li><li><strong><code>../</code></strong>代表上一级目录</li><li><strong><code>../../</code></strong>代表上两级目录</li></ol></li></ol><p><br></p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tina.html<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>同级目录下的本地相对路径链接，哈哈哈😁<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../test/2.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>上级目录下的本地相对路径链接 <span class="token punctuation">(</span>。・∀・<span class="token punctuation">)</span>ノ<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../dream/hap.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>上上级目录下的本地相对路径链接 ♪<span class="token punctuation">(</span>´▽｀<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font face="Microsoft YaHei" color="#20B2AA"><strong>4. 特殊的链接</strong></font> <p>(1) 下载链接</p><ol><li><p>这些文件网页可以直接执行，如：.jpg、.png、.gif、.html、.htm、.txt等。</p></li><li><p>大部分文件，浏览器是不能直接执行的。如：.doc、.xls、.ppt、.rar、.psd……</p></li></ol><p>(2) 邮箱链接</p><p>(3) 普通空链接（#）如：<code>&lt;a href=&quot;#&quot;&gt;这是一个空链接&lt;/a&gt;</code></p><p><br></p><h5 id="三-锚点链接"><font color="#00B2EE" face="Microsoft YaHei">三. 锚点链接</font><a href="post/HTML-basics#三-锚点链接"></a></h5><p><strong><code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></strong> ：定义锚点，做个记号<br><strong><code>&lt;a href=&quot;[文件名]#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong> ：记号，功能是跳到做记号的地方</p><p>分为当前页面跳转和跨页面跳转，页内跳转时不用文件名，跨页跳转时用。</p><p><br></p><blockquote><ol><li>锚点是什么？</li><li>为什么要用锚点？</li><li>锚点怎么用？</li></ol></blockquote><p><br></p><ol><li><strong>锚点是什么？</strong></li></ol><p>如我们在做一个很长的网页时，需要在页面内做一个导航，点击导航里的链接不是新开一个窗口或者跳转到其他网址，而是<font color="#FF7F00"><strong>跳转到当前页的某一个位置</strong></font>。那么所要跳转到的那个位置，我们就叫做<font color="#FF7F00"><strong>锚点</strong></font>，它是一种<font color="#FF7F00"><strong>在页面内部定位的方式</strong></font>。</p><ol start="2"><li><strong>为什么要用锚点？</strong></li></ol><p>在写项目的时候，页面比较长，这时候需要设置锚点进行<font color="#FF7F00"><strong>快速定位</strong></font>到某个段落或某个位置。</p><ol start="3"><li><strong>锚点怎么用？</strong></li></ol><p>分为当前页面跳转或者跨页面跳转：</p><ul><li style="list-style: none"><input type="checkbox" checked> <strong>定义锚点</strong>(作个记号)：用于定位的目的地。不管是当前当前页面内还是跨页跳转定义方法都一样；<ul><li style="list-style: none"><input type="checkbox"> 定义方法：<strong><code>&lt;a id=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></strong>或<strong><code>&lt;h2 id=&quot;锚点名称&quot;&gt;&lt;/h2&gt;</code></strong>或…..</li><li style="list-style: none"><input type="checkbox" checked> 锚点名称命名规则：<ul><li style="list-style: none"><input type="checkbox"> 可以包含字母、数字、下划线，但<font color="#FF7F00"><strong>只能以字母开头</strong></font>。</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong>锚点</strong>（触发），也称为记号。<ul><li style="list-style: none"><input type="checkbox"> 跳到当前页面定义方法：<strong><code>&lt;a  href=&quot;#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong></li><li style="list-style: none"><input type="checkbox"> 跨页面跳转定义方法：<strong><code>&lt;a  href=&quot;目标页面路径#锚点名称&quot;&gt;提示文本（必须有）&lt;/a&gt;</code></strong></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>id</code></strong>或<strong><code>name</code></strong>：定义锚点链接的名称。<ul><li style="list-style: none"><input type="checkbox"> name是老方法，id是在name基础上发明的，后来才有的。</li><li style="list-style: none"><input type="checkbox"> 使用name属性设置锚点很方便但<font color="#FF7F00"><strong>只能针对a标签来使用</strong></font>，具有一定的局限性。而对div等其他没有name属性的标签就不能起到作用了。</li><li style="list-style: none"><input type="checkbox"> id兼容性很好。</li></ul></li></ul><p><br></p><p>示例（页内跳转）：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--设置锚点，索引功能--></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第一段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第二段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第三段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>                   <span class="token punctuation">.</span>                   <span class="token punctuation">.</span>                   <span class="token punctuation">.</span>                   <span class="token punctuation">.</span>              <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--做记号--></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我是标题一<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我是标题二<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>我是标题三<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>  　　      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>返回新闻顶部<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>　　  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>示例（跨内跳转）：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>                 <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--设置锚点，索引功能,然后在目的页面做好记号--></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://treecatee.github.io#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第一段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://directoree.top#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第二段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://taobao.com#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>点击我就会跳到第三段<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>　　  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="2-4-HTML字符实体"><font color="#3CB371" face="Comic sans MS">2.4 HTML字符实体</font><a href="post/HTML-basics#2-4-HTML字符实体"></a></h4><p><br></p><font face="Microsoft YaHei"><strong>HTML 中的</strong><font color="#FF7F00"><strong>预留字符</strong></font><strong>必须被替换为</strong><font color="#FF7F00"><strong>字符实体</strong></font>。</font><p><br></p><font face="Microsoft YaHei"><strong>1. HTML 实体</strong></font><ol><li><p>在 HTML 中，某些字符是预留的。</p></li><li><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p></li><li><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p></li><li><p><strong>注：</strong><font color="#FF7F00"><strong>记得加上半角分号<code>;</code>符号啊，不然识别不出来</strong></font></p></li></ol><p><br></p><blockquote><p>如需显示小于号，我们必须这样写：<code>&amp;lt;</code> 或 <code>&amp;#60;</code><br><strong>提示：</strong>使用实体名而不是数字的好处是，名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。</p></blockquote><p><br></p><font face="Microsoft YaHei"><strong>2. 不间断空格（non-breaking space）</strong></font><ul><li><p>HTML 中的常用字符实体是不间断空格(<code>&amp;nbsp;</code>)。</p></li><li><p>浏览器总是会截短 HTML 页面中的空格。<font color="#FF7F00"><strong>如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个</strong></font>，因此，要使用10个空格的话就需要写10个<code>&amp;nbsp;</code> 。（如需在页面中增加空格的数量，您需要使用 <code>&amp;nbsp;</code> 字符实体）</p></li></ul><p><br></p><font face="Microsoft YaHei"><strong>3. HTML 中有用的字符实体</strong></font><p><strong>注释：</strong>实体名称对大小写敏感！半角分号不要忘记！<br>如果想要输出<code>&amp;nbsp;</code>而不被转义为空格，可这样：<code>&amp;amp;nbsp;</code>，因为<code>&amp;amp;</code>对应<code>$</code>-->&amp;nbsp;</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">显示结果</th><th style="text-align:left">描述</th><th style="text-align:left">实体名称</th><th style="text-align:left">实体编号</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left">空格</td><td style="text-align:left"><strong><code>&amp;nbsp;</code></strong></td><td style="text-align:left"><strong><code>&amp;#160;</code></strong></td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于号</td><td style="text-align:left"><strong><code>&amp;lt;</code></strong></td><td style="text-align:left"><strong><code>&amp;#60;</code></strong></td></tr><tr><td style="text-align:left">></td><td style="text-align:left">大于号</td><td style="text-align:left"><strong><code>&amp;gt;</code></strong></td><td style="text-align:left"><strong><code>&amp;#62;</code></strong> </td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">和号</td><td style="text-align:left"><strong><code>&amp;amp;</code></strong></td><td style="text-align:left"><strong><code>&amp;#38;</code></strong></td></tr><tr><td style="text-align:left">“</td><td style="text-align:left">引号</td><td style="text-align:left"><strong><code>&amp;quot;</code></strong></td><td style="text-align:left"><strong><code>&amp;#34;</code></strong></td></tr><tr><td style="text-align:left">‘</td><td style="text-align:left">撇号</td><td style="text-align:left"><strong><code>&amp;apos;</code></strong>(IE不支持)</td><td style="text-align:left"><strong><code>&amp;#39;</code></strong></td></tr><tr><td style="text-align:left">￠</td><td style="text-align:left">分（cent）</td><td style="text-align:left"><strong><code>&amp;cent;</code></strong></td><td style="text-align:left"><strong><code>&amp;#162;</code></strong></td></tr><tr><td style="text-align:left">£</td><td style="text-align:left">镑（pound）</td><td style="text-align:left"><strong><code>&amp;pound;</code></strong></td><td style="text-align:left"><strong><code>&amp;#163;</code></strong></td></tr><tr><td style="text-align:left">¥</td><td style="text-align:left">元（yen）</td><td style="text-align:left"><strong><code>&amp;yen;</code></strong></td><td style="text-align:left"><strong><code>&amp;#165;</code></strong></td></tr><tr><td style="text-align:left">€</td><td style="text-align:left">欧元（euro）</td><td style="text-align:left"><strong><code>&amp;euro;</code></strong></td><td style="text-align:left"><strong><code>&amp;#8364;</code></strong></td></tr><tr><td style="text-align:left">§</td><td style="text-align:left">小节</td><td style="text-align:left"><strong><code>&amp;sect;</code></strong></td><td style="text-align:left"><strong><code>&amp;#167;</code></strong></td></tr><tr><td style="text-align:left">©</td><td style="text-align:left">版权（copyright）</td><td style="text-align:left"><strong><code>&amp;copy;</code></strong></td><td style="text-align:left"><strong><code>&amp;#169;</code></strong></td></tr><tr><td style="text-align:left">®</td><td style="text-align:left">注册商标</td><td style="text-align:left"><strong><code>&amp;reg;</code></strong></td><td style="text-align:left"><strong><code>&amp;#174;</code></strong></td></tr><tr><td style="text-align:left">™</td><td style="text-align:left">商标</td><td style="text-align:left"><strong><code>&amp;trade;</code></strong></td><td style="text-align:left"><strong><code>&amp;#8482;</code></strong></td></tr><tr><td style="text-align:left">×</td><td style="text-align:left">乘号</td><td style="text-align:left"><strong><code>&amp;times;</code></strong></td><td style="text-align:left"><strong><code>&amp;#215;</code></strong></td></tr><tr><td style="text-align:left">÷</td><td style="text-align:left">除号</td><td style="text-align:left"><strong><code>&amp;divide;</code></strong></td><td style="text-align:left"><strong><code>&amp;#247;</code></strong></td></tr></tbody></table></div></div><p>完整的实体符号参考：<font color="#00B2EE">[<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">HTML ISO-8859-1 参考手册</a>]</font> </p><p><br></p><p><br></p><h3 id="三-HTML-列表"><font color="#FF6347" face="Comic sans MS">三. HTML 列表</font><a href="post/HTML-basics#三-HTML-列表"></a></h3><p>列表就是像word里面的标题一样，顺着往下数的标题。</p><p>HTML 支持<font color="#FF7F00"><strong>无序列表ul</strong></font>(unordered list）、<font color="#FF7F00"><strong>有序列表ol</strong></font>（ordered list）和<font color="#FF7F00"><strong>自定义列表dl</strong></font>（definition list）</p><p><br></p><ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;ul&gt;&lt;/ul&gt;</code></strong> 无序列表<ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li><li style="list-style: none"><input type="checkbox" checked> <strong><code>type</code></strong> 列表项属性，放在&lt;ul type=””&gt;里，取值有：<ul><li style="list-style: none"><input type="checkbox"> <strong><code>disc</code></strong> 小黑点</li><li style="list-style: none"><input type="checkbox"> <strong><code>circle</code></strong> 空心圆</li><li style="list-style: none"><input type="checkbox"> <strong><code>square</code></strong> 实心方块</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;ol&gt;&lt;/ol&gt;</code></strong> 有序列表<ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;li&gt;&lt;/li&gt;</code></strong> 列表项</li><li style="list-style: none"><input type="checkbox" checked> <strong><code>type</code></strong> 编号类型，放在&lt;ol type=””&gt;里，取值有：<ul><li style="list-style: none"><input type="checkbox"> <strong><code>1</code></strong> 整数有序列表</li><li style="list-style: none"><input type="checkbox"> <strong><code>a</code></strong> 字母小写有序列表</li><li style="list-style: none"><input type="checkbox"> <strong><code>A</code></strong> 字母大写有序列表</li><li style="list-style: none"><input type="checkbox"> <strong><code>i</code></strong> 罗马小写有序列表</li><li style="list-style: none"><input type="checkbox"> <strong><code>I</code></strong> 罗马大写有序列表</li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>start</code></strong> 从第几个开始编号(数字)，放在&lt;dl type=”” start=””&gt;里。</li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;dl&gt;&lt;/dl&gt;</code></strong> 自定义列表<ul><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;dt&gt;&lt;/dt&gt;</code></strong> 自定义列表项<ul><li style="list-style: none"><input type="checkbox"> <strong><code>&lt;dd&gt;&lt;/dd&gt;</code></strong> 自定义列表项的描述</li></ul></li></ul></li></ul><p><br></p><p>列表展示如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://i.loli.net/2019/03/09/5c8320e82a362.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--有序列表开始--></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第一条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--无序列表开始--></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第一条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第二条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>                         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--无序列表结束--></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第三条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第四条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第二条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>          <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第五条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>这里是第六条无序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></span>                             <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--有序列表结束--></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第三条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span>哈哈，这里是第四条有序列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span></span>我是第一个自定义列表的列表项<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span></span>我是第一个自定义列表的列表项的描述<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c832ded3bac1.png" alt="7.png" data-zoomable></p></div><p>可参读博文：<font color="#00B2EE">《<a href="https://www.cnblogs.com/yyhh/p/4208951.html" target="_blank" rel="noopener">HTML表格与列表</a>》</font> </p><p><br></p><p><br></p><h3 id="四-HTML-表格"><font color="#FF6347" face="Comic sans MS">四. HTML 表格</font><a href="post/HTML-basics#四-HTML-表格"></a></h3><font color="#00B2EE" face="Microsoft YaHei"><strong>一、表格</strong></font><p>网页中有类似word里面的功能，当然，也会有类似excel里面的功能，表格就是其中之一。</p><p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><p><br></p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格的结构</strong></font><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span>                         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义表格--></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义一行--></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义一个标题单元格--></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span><span class="token markup">&lt;/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--定义一个单元格--></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><font color="#00B2EE" face="Microsoft YaHei"><strong>二、表格标签及属性</strong></font><p><strong>注：</strong>属性是区分大小写的，bgColor如果写成bgcolor是没有效果的</p><ul><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;table&gt;&lt;/table&gt;</code></strong> 表，---->可选属性： ↓↓<ul><li style="list-style: none"><input type="checkbox"> <strong><code>Width</code></strong>：表格宽度，单位可以是百分比，也可以是固定值。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> pixels</li><li style="list-style: none"><input type="checkbox"> %</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>Height</code></strong>：表格高度。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> pixels</li><li style="list-style: none"><input type="checkbox"> %</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>Align</code></strong>：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> left</li><li style="list-style: none"><input type="checkbox"> center</li><li style="list-style: none"><input type="checkbox"> right</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>Border</code></strong>：边框粗细。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> pixels</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>Bordercolor</code></strong>：边框颜色。取值：rgb(x,x,x)、#xxxxxx、colorname</li><li style="list-style: none"><input type="checkbox"> <strong><code>bgColor</code></strong>：表格背景色（<font color="#FF7F00">不赞成使用该属性</font>）。取值： rgb(x,x,x)、#xxxxxx、colorname</li><li style="list-style: none"><input type="checkbox"> <strong><code>background</code></strong>：背景图片，取值：URL</li><li style="list-style: none"><input type="checkbox"> <strong><code>cellpadding</code></strong>：单元格边线到内容间的距离(填充距离)。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> pixels</li><li style="list-style: none"><input type="checkbox"> %</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>cellspacing</code></strong>：单元格与单元格之间的距离(间距)，默认是双线<strong>，这个很重要</strong><br>取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> pixels</li><li style="list-style: none"><input type="checkbox"> %</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>rules</code></strong>：合并单元格边框线，取值：all。<strong>注意：</strong>rules兼容性不好，请使用CSS来取代它。</li><li style="list-style: none"><input type="checkbox"> <strong><code>summary</code></strong>：摘要，使搜索引擎更好的读懂表格内容，更好的帮助特殊用户读取表格内容。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> text</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;caption&gt;&lt;/caption&gt;</code></strong>：定义表格标题。可选属性： ↓↓<ul><li style="list-style: none"><input type="checkbox"> <strong><code>Align</code></strong>：表格水平对齐方式（<font color="#FF7F00">不赞成使用该属性</font>），取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> left</li><li style="list-style: none"><input type="checkbox"> top</li><li style="list-style: none"><input type="checkbox"> rightbottom</li><li style="list-style: none"><input type="checkbox"> bottom</li></ul></li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;tr&gt;&lt;/tr&gt;</code></strong>：行标记。可选属性： ↓↓<ul><li style="list-style: none"><input type="checkbox"> <strong><code>bgColor</code></strong>：行的背景色。取值： rgb(x,x,x)、#xxxxxx、colorname</li><li style="list-style: none"><input type="checkbox"> <strong><code>Height</code></strong>：行高度。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> pixels</li><li style="list-style: none"><input type="checkbox"> %</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>Align</code></strong>：表格内容对齐方式。取值： ↓↓<ul><li style="list-style: none"><input type="checkbox"> left</li><li style="list-style: none"><input type="checkbox"> center</li><li style="list-style: none"><input type="checkbox"> right</li><li style="list-style: none"><input type="checkbox"> justify</li><li style="list-style: none"><input type="checkbox"> char</li></ul></li><li style="list-style: none"><input type="checkbox"> <strong><code>valign</code></strong>：属性趋向于垂直对齐，其值包含：top、bottom、middle、baseline</li></ul></li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;th&gt;&lt;/th&gt;</code></strong>：标题单元格（每列第一行），居中加粗显示。</li><li style="list-style: none"><input type="checkbox" checked> <strong><code>&lt;td&gt;&lt;/td&gt;</code></strong>：普通单元格。<code>&lt;th&gt;</code>和<code>&lt;td&gt;</code>可选属性： ↓↓<ul><li style="list-style: none"><input type="checkbox"> <strong><code>height</code></strong>：单元格高度</li><li style="list-style: none"><input type="checkbox"> <strong><code>width</code></strong>：单元格宽度</li><li style="list-style: none"><input type="checkbox"> <strong><code>bgColor</code></strong>：单元格背景色</li><li style="list-style: none"><input type="checkbox"> <strong><code>background</code></strong>：单元格背景图片</li><li style="list-style: none"><input type="checkbox"> <strong><code>align</code></strong>：水平对齐</li><li style="list-style: none"><input type="checkbox"> <strong><code>valign</code></strong>：垂直水齐</li><li style="list-style: none"><input type="checkbox"> <strong><code>rowspan</code></strong>：<font color="#FF7F00"><strong>上下单元格合并。合并属性必须放在第一个单元格中。</strong></font></li><li style="list-style: none"><input type="checkbox"> <strong><code>colspan</code></strong>：<font color="#FF7F00"><strong>左右单元格合并。合并时，有增就得有减，要保证每一行单元格的个数不变。</strong></font></li></ul></li></ul><p><br></p><p><br></p><font color="#00B2EE" face="Microsoft YaHei"><strong>三、表格标签示例</strong></font><ol><li><code>&lt;table&gt;、&lt;tr&gt;、&lt;th&gt;、&lt;td&gt;</code>示例：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>             cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>工号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>职位<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">001</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小明<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>设计师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">002</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小方<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>工程师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">003</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小白<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>程序员<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c836d74b4ebb.png" alt="8.png" data-zoomable></p></div><p><br></p><p><br></p><ol start="2"><li><code>&lt;caption&gt;&lt;/caption&gt;</code>表格标题示例：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>     <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>             cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span></span><span class="token number">2019.3</span>月日历<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span></span>   <span class="token markup">&lt;!--放在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>中间<span class="token operator">--</span><span class="token operator">></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>工号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>职位<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">001</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小明<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>设计师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">002</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小方<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>工程师<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">003</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>小白<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>             <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>程序员<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c836e941fa2e.png" alt="10.png" data-zoomable></p></div><p><br></p><p><br></p><ol start="3"><li>空表格、跨行或者跨列表格示例：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE HTML></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--建立空表，无属性--></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>zdd<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">30</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>ddz<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">27</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--合并左右单元格--></span></span>     <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"400"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>             cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>电话<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>Bill Gates<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">854</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">855</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>         <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--合并上下单元格--></span></span>   <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"2"</span> width<span class="token operator">=</span><span class="token string">"400"</span> height<span class="token operator">=</span><span class="token string">"100"</span> bordercolor<span class="token operator">=</span><span class="token string">"blue"</span> bgColor<span class="token operator">=</span><span class="token string">"#88cc66"</span>           cellspacing<span class="token operator">=</span><span class="token string">"0"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> rules<span class="token operator">=</span><span class="token string">"all"</span><span class="token operator">></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span></span>姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span>Bill Gates<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>电话<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">854</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span></span><span class="token number">555</span> <span class="token number">77</span> <span class="token number">855</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-img"><p><img src="https://i.loli.net/2019/03/09/5c83737340e28.png" alt="11.png" data-zoomable></p></div><p><br></p><p><br></p><h3 id="五-HTML-表单"><font color="#FF6347" face="Comic sans MS">五. HTML 表单</font><a href="post/HTML-basics#五-HTML-表单"></a></h3><p><br></p><p>表单很简单，在HTML里它就是用来人与服务器的交互，或者说是HTML的输入输出交互的重要功能！</p><p>表单后续有时间再详细叙述吧，或者可以看在本站博文就有开始使用了….<font color="#00B2EE">《<a href="https://directoree.top/post/PHP-MySQL" target="_blank" rel="noopener">PHP操作MySQL数据库</a>》</font></p><p><br></p><p><br></p><h3 id="六-CSS"><font color="#FF6347" face="Comic sans MS">六. CSS</font><a href="post/HTML-basics#六-CSS"></a></h3><font color="#00B2EE">《<a href="https://directoree.github.io/post/HTML-CSS" target="_blank" rel="noopener">CSS 基础</a>》</font><p>本文参考：</p><font color="#00B2EE">《<a href="http://www.php.cn/code/570.html" target="_blank" rel="noopener">html/css快速入门</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/665.html" target="_blank" rel="noopener">HTML+CSS基础入门教程</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/24737.html" target="_blank" rel="noopener">HTML极速入门(2018版)</a>》</font><br><font color="#00B2EE">《<a href="http://www.php.cn/code/5007.html" target="_blank" rel="noopener">弹指间学会HTML视频教程</a>》</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用HTML标记实际上也就是使用标签和其属性 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="Treecatee.gitgub.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="Treecatee.gitgub.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Python-文件系统</title>
    <link href="Treecatee.gitgub.io/post/python-filecontents/"/>
    <id>Treecatee.gitgub.io/post/python-filecontents/</id>
    <published>2019-03-06T07:08:54.000Z</published>
    <updated>2019-03-07T07:41:03.786Z</updated>
    
    <content type="html"><![CDATA[<p>Python是 文件对象.write()，PHP是fwrite() 😀…<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>文件系统</strong></font> </center><p>推荐参考资料：</p><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-inputoutput.html" target="_blank" rel="noopener">Python3 输入和输出</a>》</font><br><font color="#00B2EE">《<a href="https://www.cnblogs.com/sjie0224/articles/7562509.html" target="_blank" rel="noopener">Python学习之路-11 (文件操作)</a>》</font> <p><br></p><p><br></p><h3 id="一-读写文件"><font color="#FF6347" face="Comic sans MS">一. 读写文件</font><a href="post/Python-FileContents#一-读写文件"></a></h3><p>Python提供了 input() 内置函数从标准输入读入一行文本，并将输入以字符串形式返回，默认的标准输入是键盘。</p><p>input 可以接收一个Python表达式作为输入，并将运算结果返回。</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"你输入的内容是: "</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>这会产生如下的对应着输入的结果：请输入：菜鸟教程你输入的内容是<span class="token punctuation">:</span>  菜鸟教程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><p><font color="#00B2EE"><strong>使用到的方法：</strong></font></p><ul><li><font color="#FF7F00"><strong>open()：</strong></font> 以某种读写模式打开一个文件，将会返回一个 file 对象；</li><li><font color="#FF7F00"><strong>f.write(string) ：</strong></font> 将 string 写入到文件中, 然后返回写入的字符数；</li><li><font color="#FF7F00"><strong>f.read(size)：</strong></font> 将读取一定数目的数据, 然后作为字符串或字节对象返回；</li><li><font color="#FF7F00"><strong>f.readline() ：</strong></font> 从文件读取整行，包括 “\n” 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 “\n” 字符。；</li><li><font color="#FF7F00"><strong>f.readlines() ：</strong></font> 将返回该文件中包含的所有行；</li><li><font color="#FF7F00"><strong>f.tell() ：</strong></font> 返回文件对象当前所处的位置, 它是从文件开头开始算起的<strong>字节数</strong>；</li><li><font color="#FF7F00"><strong>f.seek() ：</strong></font> 如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数；</li><li><font color="#FF7F00"><strong>f.close() ：</strong></font> 当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，如果尝试再调用该文件，则会抛出异常。</li></ul></blockquote><p><br></p><p><br></p><h4 id="1-1-open"><font color="#3CB371" face="Comic sans MS">1.1 open()</font><a href="post/Python-FileContents#1-1-open"></a></h4><p>Python open() 方法用于打开一个文件，并<font color="#FF7F00"><strong>返回文件对象</strong></font>，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。</p><p><strong>注意：</strong>使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。</p><p>open() 函数常用形式是接收两个参数：<strong>文件名(file)和模式(mode)</strong>。即<strong><code>a = open(file, mode);</code></strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left">open(file, mode, buffering, encoding=None, <br>&emsp;&emsp;&emsp;errors=None, newline=None, <br>&emsp;&emsp;&emsp;closefd=True, opener=None)</td><td style="text-align:left">file: 必需，文件路径（相对或者绝对路径）。<br>mode: 可选，文件打开模式<br>buffering: 设置缓冲<br>encoding: 一般使用utf8<br>errors: 报错级别<br>newline: 区分换行符<br>closefd: 传入的file参数类型<br>opener:</td><td style="text-align:left">文件对象</td></tr></tbody></table></div></div><p><br></p><font color="#FF7F00"><strong>mode 参数有：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">t</td><td style="text-align:left">文本模式 (默认)。</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td style="text-align:left">b</td><td style="text-align:left">二进制模式。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">打开一个文件进行<strong>更新(可读可写)</strong>。</td></tr><tr><td style="text-align:left">U</td><td style="text-align:left">通用换行模式（不推荐）。</td></tr><tr><td style="text-align:left">r</td><td style="text-align:left">以<strong>只读方式</strong>打开文件。文件的指针将会放在<strong>文件的开头</strong>。这是默认模式。</td></tr><tr><td style="text-align:left">rb</td><td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。<br>一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left">打开一个文件<strong>用于读写</strong>。文件指针将会放在文件的<strong>开头</strong>。</td></tr><tr><td style="text-align:left">rb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文件<strong>只用于写入</strong>。如果该文件已存在则打开文件，并从开头开始编辑，即<strong>原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb</td><td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有<br>内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left">打开一个文件用于<strong>读写</strong>。如果该文件已存在则打开文件，并<strong>从开头开始编辑</strong>，<strong>即原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，<br>即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">打开一个文件用于<strong>追加(不能读)</strong>。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left">ab</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，<br>新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文件用于<strong>读写</strong>。如果该文件已存在，文件<strong>指针将会放在文件的结尾</strong>。<br>文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left">ab+</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。<br>如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></div></div><p><br></p><p>下图很好的总结了这几种模式：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/06/5c7fb64577036.png" alt="2.png" data-zoomable></p></div><p><br></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">读</th><th style="text-align:center">写</th><th style="text-align:center">创建</th><th style="text-align:center">覆盖</th><th style="text-align:center">指针在开始</th><th style="text-align:center">指针在结尾</th></tr></thead><tbody><tr><td style="text-align:center"><strong>r</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>r+</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>w</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>w+</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>a</strong></td><td style="text-align:center"></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>✔</strong>    </td></tr><tr><td style="text-align:center"><strong>a+</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"><strong>✔</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>✔</strong></td></tr></tbody></table></div></div><font color="#FF7F00"><strong>总结：</strong></font><br>1. w 和 a 都是<font color="#FF7F00"><strong>写入不能读内容</strong></font>，前者是覆盖，后者是追加内容。<br>2. w+ 和 a+ 都是<font color="#FF7F00"><strong>写入且能读内容</strong></font>，前者是覆盖，后者是追加内容。<br><br><br><br><br>以下实例将字符串写入到文件 foo.txt 中：<br><br><font color="#FF7F00"></font><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件打开失败"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>此时打开文件 foo<span class="token punctuation">.</span>txt<span class="token punctuation">,</span>显示如下：Python 是一个非常好的语言。是的，的确非常好!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>第一个参数为要打开的文件名。</li><li>第二个参数描述文件如何使用的字符。 mode 可以是 <code>r</code> 如果文件只读, <code>w</code> 只用于写 (如果存在同名文件则将被删除), 和 <code>a</code> 用于追加文件内容; 所写的任何数据都会被自动增加到末尾. <code>r+</code> 同时用于读写。 mode 参数是可选的; <code>r</code> 将是默认值。</li></ol></blockquote><p><br></p><p><br></p><h4 id="1-2-f-write"><font color="#3CB371" face="Comic sans MS">1.2 f.write()</font><a href="post/Python-FileContents#1-2-f-write"></a></h4><p><br></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left">f.write(string)</td><td style="text-align:left">将 string 写入到文件中</td><td style="text-align:left">返回写入的字符数</td></tr></tbody></table></div></div><p><br></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/pythonst/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"16845654316532"</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-3-f-read"><font color="#3CB371" face="Comic sans MS">1.3 f.read()</font><a href="post/Python-FileContents#1-3-f-read"></a></h4><p>为了读取一个文件的内容，调用 <code>f.read(size)</code>, 这将读取一定数目的数据, 然后作为字符串或字节对象返回。</p><p>size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。</p><p><strong>注意：</strong><font color="#FF7F00"><strong><code>f.read(size)</code>必须在<code>r</code>或者<code>r+</code>模式下来读取内容。</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left">f.read(size)</td><td style="text-align:left">文件读取指定的字节数（读取的时候文件内容的<br>一个字符按一个字节来读），如果未给定或为负则读取所有</td><td style="text-align:left">字符串或字节对象返回</td></tr></tbody></table></div></div><p><br></p><p>以下实例假定文件 foo.txt 已存在（上面实例中已创建）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''foo.txt文件内容为16845654316532'''</span><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span>  m <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">is</span> str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token number">168456</span>      <span class="token triple-quoted-string string">'''把一个字符当作一个字节读取'''</span><span class="token boolean">False</span>       <span class="token triple-quoted-string string">'''isinstance(变量,类型)判断变量的类型'''</span><span class="token boolean">True</span>        <span class="token triple-quoted-string string">'''type()...is 也可以判断类型'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-4-f-close"><font color="#3CB371" face="Comic sans MS">1.4 f.close()</font><a href="post/Python-FileContents#1-4-f-close"></a></h4><p>在文本文件中 (那些打开文件的模式下没有 b 的), 只会相对于文件起始位置进行定位。</p><p>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源，<font color="#FF7F00"><strong>如果尝试再调用该文件，则会抛出异常</strong></font>。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开一个文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/pythonst/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"16845654316532"</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">14</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"3-7.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> I<span class="token operator">/</span>O operation on closed file<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<font color="#FF7F00"><strong><code>try ... finally</code></strong></font>来实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''foo.txt内容为16845654316532'''</span><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span>      m <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">168456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>但是每次都这么写实在太繁琐，所以，Python引入了<font color="#FF7F00"><strong><code>with</code>语句搭配<code>as</code></strong></font>来自动帮我们调用close()方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''foo.txt内容为16845654316532'''</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"g:/PythonSt/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT： <span class="token number">16845654316532</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-5-f-readline"><font color="#3CB371" face="Comic sans MS">1.5 f.readline()</font><a href="post/Python-FileContents#1-5-f-readline"></a></h4><p><br></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left">fileObject.readline(size)</td><td style="text-align:left">size为从文件中读取的字节数。<br>从文件读取整行，（包括 “\n” 字符。）</td><td style="text-align:left">size非负数则返回指定大小的字节数，<br>包括”\n”字符。</td></tr></tbody></table></div></div><p><br></p><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取第一行 %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的字符串为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span>文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取第一行 www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>读取的字符串为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-6-f-readlines"><font color="#3CB371" face="Comic sans MS">1.6 f.readlines()</font><a href="post/Python-FileContents#1-6-f-readlines"></a></h4><p>概述<br>readlines() 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for… in … 结构进行处理。 如果碰到结束符 EOF 则返回空字符串。</p><p>如果碰到结束符 EOF 则返回空字符串。<br>关于EOF可参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">文件结束符EOF</a>]</font> </p><p><br></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left">fileObject.readlines( )</td><td style="text-align:left">无参数</td><td style="text-align:left">返回列表，包含所有的行。</td></tr></tbody></table></div></div><p><br></p><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python">请自行区分下面两种输出方式：（<span class="token number">1</span>）<span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token punctuation">[</span><span class="token string">"www.runoob.com'\\n'\n"</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com\n'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com\n'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com\n'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>（<span class="token number">2</span>）<span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment" spellcheck="true">#依次读取每行  </span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true">#去掉每行头尾空白  </span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-7-f-tell"><font color="#3CB371" face="Comic sans MS">1.7 f.tell()</font><a href="post/Python-FileContents#1-7-f-tell"></a></h4><p>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left">f.tell()</td><td style="text-align:left">无参数</td><td style="text-align:left">返回文件指针的当前位置（整数）</td></tr></tbody></table></div></div><p><br></p><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取当前文件位置</span>pos <span class="token operator">=</span> fo<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"当前位置: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>当前位置<span class="token punctuation">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-8-f-seek"><font color="#3CB371" face="Comic sans MS">1.8 f.seek()</font><a href="post/Python-FileContents#1-8-f-seek"></a></h4><p>如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。</p><p>from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾。from_what 值为默认为0，即文件开头。例如：</p><p>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符<br>seek(x,1) ： 表示从当前位置往后移动x个字符<br>seek(-x,2)：表示从文件的结尾往前移动x个字符</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">语法格式</th><th style="text-align:left">参数说明</th><th style="text-align:left">返回类型</th></tr></thead><tbody><tr><td style="text-align:left"> f.seek(offset[, whence])</td><td style="text-align:left">offset： 开始的偏移量，也就是代表需要移动偏移的字节数，<br>如果是负数表示从倒数第几位开始。<br>whence：可选，默认值为 0。给 offset 定义一个参数，<br>表示要从哪个位置开始偏移；0 代表从文件开头开始算起，<br>1 代表从当前位置开始算起，2 代表从文件末尾算起。</td><td style="text-align:left">无返回值</td></tr></tbody></table></div></div><p><br></p><p>实例<br>以下实例演示了 readline() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><p><code>www.runoob.com&#39;\n&#39;</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code><br><code>www.runoob.com</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开文件</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"runoob.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"文件名为: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重新设置文件读取指针到开头</span>fo<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>line <span class="token operator">=</span> fo<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"读取的数据为: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：文件名为<span class="token punctuation">:</span>  runoob<span class="token punctuation">.</span>txt读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span>读取的数据为<span class="token punctuation">:</span> www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token string">'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-9-file-对象的方法"><font color="#3CB371" face="Comic sans MS">1.9 file 对象的方法</font><a href="post/Python-FileContents#1-9-file-对象的方法"></a></h4><p><br></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法及描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.close()</a></font><br>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.flush()</a></font> <br>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件,<br>而不是被动的等待输出缓冲区写入。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.fileno()</a></font> <br>返回一个整型的文件描述符(file descriptor FD 整型), <br>可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.isatty()</a></font><br>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.next()</a></font> <br>返回文件下一行。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.read([size])</a></font> <br>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.readline([size])</a></font> <br>读取整行，包括 “\n” 字符。</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.readlines([sizeint])</a></font><br> 读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, <br>实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.seek(offset[, whence])</a></font> <br>设置文件当前位置</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.tell()</a></font> <br>返回文件当前位置。</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.truncate([size])</a></font> <br>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；<br>截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.write(str)</a></font> <br>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><font color="#00B2EE"><a href="https://blog.csdn.net/polar9527/article/details/38518703" target="_blank" rel="noopener">file.writelines(sequence)</a></font> <br>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="二-在内存读写"><font color="#FF6347" face="Comic sans MS">二. 在内存读写</font><a href="post/Python-FileContents#二-在内存读写"></a></h3><p>可参考：</p><font color="#00B2EE">[<a href="https://blog.51cto.com/limingyu/2320441?source=dra" target="_blank" rel="noopener">StringIO和BytesIO</a>]</font><br><font color="#00B2EE">[<a href="https://www.jianshu.com/p/b74a83e0f9fc" target="_blank" rel="noopener">Python文件读写、StringIO和BytesIO</a>]</font><p><br></p><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p><p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p><p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p><p>很明显，使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p><p>注意，本章的IO编程都是同步模式，异步IO由于复杂度太高，后续涉及到服务器端程序开发时我们再讨论。</p><p><br></p><p>就单独说一下Python的input()和print()：</p><p><strong>input()：</strong> 在控制台把数据输入到内存中，然后从内存中把数据以字符串形式返回给调用处；</p><p><strong>print()：</strong> 从内存中输出括号里的相对应的信息。</p><p><br></p><h4 id="2-1-StringIO"><font color="#3CB371" face="Comic sans MS">2.1 StringIO</font><a href="post/Python-FileContents#2-1-StringIO"></a></h4><p>很多时候，数据读写不一定是文件，也可以在<font color="#FF7F00"><strong>内存中</strong></font>读写。</p><p>StringIO是IO模块中的类，所以使用的时候要引用模块： <code>from io import StringIO</code></p><p>StringIO顾名思义就是<font color="#FF7F00"><strong>在内存中读写str</strong></font>。</p><ul><li><p>内存中，开辟的一个文本模式的buffer,可以像文件对象一样操作它；</p></li><li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p></li><li><p>当close方法被调用的时候，这个buffer会被释放；</p></li></ul><p><strong>好处：</strong></p><p>  一般来说，磁盘的操作比内存的操作要慢得多；内存足够的情况下，一般的优化思路是少落地，减少磁盘IO的过程，可以大大提高程序的运行效率。</p><blockquote><p><strong>使用到的方法：</strong></p><ul><li><font color="#FF7F00"><strong>StringIO()：</strong></font>创建一个StringIO对象，类似文件的<code>open()</code>方法，创建的这个对象要赋值给一个变量；</li><li><font color="#FF7F00"><strong>f.write(‘String’)：</strong></font>将字符String写入到内存，返回写入的字节数（一个字符按一个字节算）；</li><li><font color="#FF7F00"><strong>f.getvalue(size)：</strong></font>从内存中读取size个字节（一个字符按一个字节算），若无参数则读取全部字节；</li><li><font color="#FF7F00"><strong>f.readable()：</strong></font>判断IO是否可读；</li><li><font color="#FF7F00"><strong>f.writable()：</strong></font>判断IO是否可写；</li><li><font color="#FF7F00"><strong>f.seekable()：</strong></font>指针是否可操作。</li></ul></blockquote><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token comment" spellcheck="true">#内存中构建</span>f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#像文件对象一样操作  这里一定要赋值给一个变量!</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>seekable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello\nPython"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#无视指针，输出全部内容</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token boolean">True</span> <span class="token boolean">True</span> <span class="token boolean">True</span>HelloHelloPython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="2-2-BytesIO"><font color="#3CB371" face="Comic sans MS">2.2 BytesIO</font><a href="post/Python-FileContents#2-2-BytesIO"></a></h4><p>StringIO操作的只能是str，如果要操作<font color="#FF7F00"><strong>二进制数据</strong></font>，就需要使用BytesIO。</p><p>BytesIO是IO模块中的类，所以使用的时候要引用模块：<code>from io import BytesIO</code></p><ul><li><p>内存中，开辟的一个二进制模式的buffer，可以像文件对象一样操作它；</p></li><li><p>当使用close()前写入的数据是<font color="#FF7F00"><strong>使用追加模式</strong></font>；</p></li><li><p>当close方法被调用的时候，这个buffer会被释放；</p></li><li><p>使用到的方法和StringIO一样，不过一个读的是字符一个读的是字节。</p></li></ul><p><br></p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOff <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>readable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ff<span class="token punctuation">.</span>writable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ff<span class="token punctuation">.</span>seekable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'Hello\nPython'</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT：<span class="token boolean">True</span> <span class="token boolean">True</span> <span class="token boolean">True</span>b<span class="token string">'Hello\n'</span>b<span class="token string">'Hello\nPython\xe4\xb8\xad\xe6\x96\x87'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><strong>file-like对象</strong></p><p>类文件对象，可以像文件对象一样操作；</p><p>socket对象，输入输出对象(stdin、stdout)都是类文件对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> stdoutf <span class="token operator">=</span> stdout<span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"90data.net"</span><span class="token punctuation">)</span>OUTPUT：<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_io.TextIOWrapper'</span><span class="token operator">></span>90data<span class="token punctuation">.</span>net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="三-操作目录"><font color="#FF6347" face="Comic sans MS">三. 操作目录</font><a href="post/Python-FileContents#三-操作目录"></a></h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如dir、cp等命令。</p><p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<font color="#FF7F00"><strong>os模块</strong></font>也可以直接<font color="#FF7F00"><strong>调用操作系统提供的接口函数</strong></font>。</p><font face="Comic sans MS"><font color="#00B2EE">具体方法：[<a href="http://www.runoob.com/python3/python3-os-file-methods.html" target="_blank" rel="noopener">Python3 OS 文件/目录方法</a>]</font><br></font><p>打开Python交互式命令行，我们来看看如何使用os模块的基本功能：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''如果是posix，说明系统是Linux、Unix或Mac OS X，                   如果是nt，就是Windows系统。'''</span>os<span class="token punctuation">.</span>uname<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''注意uname()函数在Windows上不提供，也就是说，                     os模块的某些函数是跟操作系统相关的。'''</span>os<span class="token punctuation">.</span>environ        <span class="token triple-quoted-string string">'''在操作系统中定义的环境变量，全部保存在os.environ                     这个变量中'''</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>  <span class="token triple-quoted-string string">'''要获取某个环境变量的值，可以调用os.environ.get('key')，                        如os.environ.get('PATH')'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token triple-quoted-string string">'''查看当前目录的绝对路径:'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><strong>操作文件和目录</strong></p><p>操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p><pre class="line-numbers language-python"><code class="language-python">查看当前目录的绝对路径<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token string">'/Users/michael'</span>在某个目录下创建一个新目录，首先把新目录的完整路径表示出来<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/michael'</span><span class="token punctuation">,</span> <span class="token string">'testdir'</span><span class="token punctuation">)</span><span class="token string">'/Users/michael/testdir'</span>然后创建一个目录<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span>删掉一个目录<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>把两个路径合成一个时，不要直接拼字符串，而要通过os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，这样可以正确处理不同操作系统的路径分隔符。在Linux<span class="token operator">/</span>Unix<span class="token operator">/</span>Mac下，os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>返回这样的字符串：part<span class="token number">-1</span><span class="token operator">/</span>part<span class="token number">-2</span>而Windows下会返回这样的字符串：part<span class="token number">-1</span>\part<span class="token number">-2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">,</span> <span class="token string">'file.txt'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token punctuation">)</span>可以直接让你得到文件扩展名，很多时候非常方便：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">,</span> <span class="token string">'file.txt'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token punctuation">)</span>可以直接让你得到文件扩展名，很多时候非常方便：<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>文件操作使用下面的函数。假定当前目录下有一个test<span class="token punctuation">.</span>txt文件： 对文件重命名<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'test.py'</span><span class="token punctuation">)</span> 删掉文件<span class="token punctuation">:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.py'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。幸运的是shutil模块提供了copyfile<span class="token punctuation">(</span><span class="token punctuation">)</span>的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是os模块的补充。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'.lein'</span><span class="token punctuation">,</span> <span class="token string">'.local'</span><span class="token punctuation">,</span> <span class="token string">'.m2'</span><span class="token punctuation">,</span> <span class="token string">'.npm'</span><span class="token punctuation">,</span> <span class="token string">'.ssh'</span><span class="token punctuation">,</span> <span class="token string">'.Trash'</span><span class="token punctuation">,</span> <span class="token string">'.vim'</span><span class="token punctuation">,</span> <span class="token string">'Applications'</span><span class="token punctuation">,</span> <span class="token string">'Desktop'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>要列出所有的<span class="token punctuation">.</span>py文件，也只需一行代码：<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">and</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.py'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'apis.py'</span><span class="token punctuation">,</span> <span class="token string">'config.py'</span><span class="token punctuation">,</span> <span class="token string">'models.py'</span><span class="token punctuation">,</span> <span class="token string">'pymonitor.py'</span><span class="token punctuation">,</span> <span class="token string">'test_db.py'</span><span class="token punctuation">,</span> <span class="token string">'urls.py'</span><span class="token punctuation">,</span> <span class="token string">'wsgiapp.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="四-序列化"><font color="#FF6347" face="Comic sans MS">四. 序列化</font><a href="post/Python-FileContents#四-序列化"></a></h3><p>参读资料：</p><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000" target="_blank" rel="noopener">廖雪峰的官方网站 序列化</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/yyds/p/6563608.html" target="_blank" rel="noopener">Python之数据序列化（json、pickle、shelve）</a>》</font><br></font><br><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/zhangxinqi/p/8034380.html" target="_blank" rel="noopener">python3之序列化（pickle&amp;json&amp;shelve）</a>》</font><br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python是 文件对象.write()，PHP是fwrite() 😀…&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="Treecatee.gitgub.io/post/markdownusage/"/>
    <id>Treecatee.gitgub.io/post/markdownusage/</id>
    <published>2019-03-06T02:11:53.341Z</published>
    <updated>2019-01-11T12:36:32.077Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://marxi.co/" target="_blank" rel="noopener">1.Markdown在线编辑器</a></p><p><a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">2.Markdown高级语法大全</a></p><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">3.Markdown高级语法</a></p><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://marxi.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1.Markdown在线编辑器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python-函数式编程</title>
    <link href="Treecatee.gitgub.io/post/python-functionalprogramming/"/>
    <id>Treecatee.gitgub.io/post/python-functionalprogramming/</id>
    <published>2019-03-04T10:57:28.000Z</published>
    <updated>2019-03-06T07:04:37.689Z</updated>
    
    <content type="html"><![CDATA[<p>装饰器还没搞懂，搞懂了再来继续写吧~<br>函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…<br>返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎*<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>函数式编程</strong></font> </center><p><br></p><p><br></p><p><br></p><center><font face="Comic sans MS"><strong>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</strong></font> </center><p><br></p><p><br></p><h3 id="一-高阶函数"><font color="#FF6347" face="Comic sans MS">一. 高阶函数</font><a href="post/Python-FunctionalProgramming#一-高阶函数"></a></h3><p><br></p><blockquote><ol><li><font color="#FF7F00"><strong>变量可以指向函数</strong></font>；</li><li><font color="#FF7F00"><strong>函数名也是变量</strong></font>；</li><li><font color="#FF7F00"><strong>函数可以作为return的返回值</strong></font>；</li><li><font color="#FF7F00"><strong>函数可以作为另一个函数的参数</strong></font>。</li></ol></blockquote><p><br></p><h4 id="1-1-变量指向函数"><font color="#3CB371" face="Comic sans MS">1.1 变量指向函数</font><a href="post/Python-FunctionalProgramming#1-1-变量指向函数"></a></h4><p><br></p><p>&emsp;&emsp; <font face="Microsoft YaHei">在讲变量和字符串的时候我们讲过，变量就是一个对象，可以当作一个指针使用，而函数名也是一个变量，也就是一个对象。函数名其实就是指向函数的变量！注意，函数名是一个变量！变量！变量！当作指针用。</font></p><p>&emsp;&emsp; <font face="Sans-serif">既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。<br></font></p><p><br></p><hr><hr><font color="red" face="Comic sans MS"><strong>见过两种函数赋值给变量的形式</strong></font><font face="Comic sans MS">，这两种形式是有区别的，分别总结一下。</font><br>一种是<br><br><strong><code>a = f</code></strong><br><br>另一种是<br><br><strong><code>a = f()</code></strong><br><br><br><br><font color="red"><strong>1.</strong> <strong><code>a = f</code></strong> <strong>型属于将变量指向函数。</strong></font><p>如下用示例说明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">)</span>输出：<span class="token number">10</span><span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function abs<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>  可见，abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>是函数调用，而abs是函数本身。要获得函数调用结果，我们可以把结果赋值给变量：  x <span class="token operator">=</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>输出：<span class="token number">10</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>但是，如果把函数本身赋值给变量呢？f <span class="token operator">=</span> abs<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>输出：<span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function abs<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结论：函数本身也可以赋值给变量，即：变量可以指向函数。如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：f <span class="token operator">=</span> abs<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>输出：<span class="token number">10</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>成功！说明变量f现在已经指向了abs函数本身。直接调用abs<span class="token punctuation">(</span><span class="token punctuation">)</span>函数和调用变量f<span class="token punctuation">(</span><span class="token punctuation">)</span>完全相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>说明变量f现在已经指向了abs函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。这是廖雪峰老师python教程上的例子，现在调用<code>f()</code>和调用<code>abs()</code>是一样的了。</p><p><br></p><p>再举一个工厂函数的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maker</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>　　<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>　　　　<span class="token keyword">return</span> X<span class="token operator">**</span>N　　<span class="token keyword">return</span> action<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这个嵌套函数的外层返回值为内层函数的函数名，注意没有括号，这里有无括号是有很大区别的。此时调用外部函数：f<span class="token operator">=</span>maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token operator">//</span>此时进入maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>，且定义了一个action<span class="token punctuation">(</span>X<span class="token punctuation">)</span>函数，然后返回action函数名（对象）给f<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>那么如上所述，f便指向了action函数，且限制条件为N<span class="token operator">=</span><span class="token number">2</span>，可以理解为f为N等于<span class="token number">2</span>时的action函数。我们来调用它：<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token operator">//</span>此时相当于调用了cation<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>函数，这也是在外部使用内部嵌套函数的方法，              <span class="token operator">//</span>因为内部嵌套函数是不允许在外部访问的。输出：<span class="token number">9</span>            <span class="token operator">//</span>证明f和action函数是一样的。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>如上的示例也可以用<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token operator">=</span>maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>来输出结果一样，两个括号连在一起相当于执行了这两个函数。<span class="token keyword">def</span> <span class="token function">maker</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> c<span class="token operator">**</span>N     <span class="token keyword">return</span> af<span class="token operator">=</span>maker<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="red"><strong>2.</strong> <strong><code>a = f()</code></strong> <strong>型属于将f()的返回值赋值给a的过程</strong></font><pre class="line-numbers language-python"><code class="language-python">这里的a仅仅接收f<span class="token punctuation">(</span><span class="token punctuation">)</span>的返回值，如果f<span class="token punctuation">(</span><span class="token punctuation">)</span>没有返回值，那么a即被赋值为None。这里值得注意的一点是，在a<span class="token operator">=</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>的执行过程中，f<span class="token punctuation">(</span><span class="token punctuation">)</span>会运行一次，如：<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    z <span class="token operator">=</span> x<span class="token operator">+</span>y    <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>a <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'******我是分隔符，嘿嘿嘿******'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">7</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>我是分隔符，嘿嘿嘿<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>None<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这里在分隔符前输出了<span class="token number">7</span>，说明赋值过程函数add执行了，然而a的值为None，且只能通过<span class="token keyword">print</span>语句才可以显示。这是因为add<span class="token punctuation">(</span><span class="token punctuation">)</span>函数没有<span class="token keyword">return</span>语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-2-传入函数与返回函数名"><font color="#3CB371" face="Comic sans MS">1.2 传入函数与返回函数名</font><a href="post/Python-FunctionalProgramming#1-2-传入函数与返回函数名"></a></h4><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>一、传入函数（把函数作为参数）</strong></font><p>&emsp;&emsp;既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。</p><p>一个最简单的高阶函数：</p><pre class="line-numbers language-pyhton"><code class="language-pyhton">def add(x, y, f):    return f(x) + f(y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们调用<code>add(-5, 6, abs)</code>时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>y <span class="token operator">=</span> <span class="token number">6</span>f <span class="token operator">=</span> absf<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token number">11</span><span class="token keyword">return</span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用代码验证一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> abs<span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">11</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><p><strong>总结：</strong>编写高阶函数，就是让函数的参数能够接收别的函数。<font color="#FF7F00"><strong>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</strong></font>。</p></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、返回函数名（把函数名作为返回值）</strong></font><p>&emsp;&emsp;高阶函数除了可以接受函数作为参数外，还可以把函数名作为结果值返回。注意Python3<font color="#FF7F00"><strong>返回的是迭代器对象</strong></font>。</p><p><br></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：'''</span><span class="token keyword">def</span> <span class="token function">calc_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">'在函数的参数章节讲过，*传入元组，**传入字典'</span>    ax <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        ax <span class="token operator">=</span> ax <span class="token operator">+</span> n    <span class="token keyword">return</span> ax<span class="token triple-quoted-string string">'''但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：'''</span><span class="token keyword">def</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>            ax <span class="token operator">=</span> ax <span class="token operator">+</span> n        <span class="token keyword">return</span> ax    <span class="token keyword">return</span> sum<span class="token triple-quoted-string string">'''当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：'''</span>f <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token operator">&lt;</span>function lazy_sum<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span>sum at <span class="token number">0x101c6ed90</span><span class="token operator">></span><span class="token triple-quoted-string string">'''调用函数f时，才真正计算求和的结果：'''</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span> <span class="token number">25</span><span class="token triple-quoted-string string">'''在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：'''</span>f1 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>f2 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>f1<span class="token operator">==</span>f2OUTPUT<span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token string">'f1()和f2()的调用结果互不影响。'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>三、闭包</strong></font><p>&emsp;&emsp;注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。    我们来看一个例子：'''</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> i<span class="token operator">*</span>i        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：'''</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token triple-quoted-string string">'''全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：'''</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs<span class="token string">'再看看结果：'</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token triple-quoted-string string">'''缺点是代码较长，可利用lambda函数缩短代码。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="二-装饰器"><font color="#FF6347" face="Comic sans MS">二. 装饰器</font><a href="post/Python-FunctionalProgramming#二-装饰器"></a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰器还没搞懂，搞懂了再来继续写吧~&lt;br&gt;函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…&lt;br&gt;返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎*&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-模块和包</title>
    <link href="Treecatee.gitgub.io/post/python-modules-packages/"/>
    <id>Treecatee.gitgub.io/post/python-modules-packages/</id>
    <published>2019-03-03T10:28:06.000Z</published>
    <updated>2019-03-05T17:28:51.745Z</updated>
    
    <content type="html"><![CDATA[<p>from…import…😀<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>模块和包</strong></font> </center><p><br></p><p><br></p><h3 id="一-模块与包的意义"><font color="#FF6347" face="Comic sans MS">一. 模块与包的意义</font><a href="post/Python-Modules-Packages#一-模块与包的意义"></a></h3><p><br></p><h4 id="1-1-什么是模块？"><font color="#3CB371" face="Comic sans MS">1.1 什么是模块？</font><a href="post/Python-Modules-Packages#1-1-什么是模块？"></a></h4><blockquote><font color="#FF7F00" face="Microsoft YaHei"><strong>在Python中，一个.py文件就称之为一个模块（Module）。</strong></font></blockquote><p><br></p><h4 id="1-2-为什么要使用模块？"><font color="#3CB371" face="Comic sans MS">1.2 为什么要使用模块？</font><a href="post/Python-Modules-Packages#1-2-为什么要使用模块？"></a></h4><ul><li><font face="Microsoft YaHei">为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。</font></li></ul><ul><li><font face="Microsoft YaHei">随着程序的发展，功能越来越多，为了方便管理，我们通常将程序分成一个个的文件，这样做程序的结构更清晰，方便管理。这时我们不仅仅可以把这些文件当做脚本去执行，还可以把他们当做模块来导入到其他的模块中，实现了功能的重复利用。</font></li></ul><ul><li><font face="Microsoft YaHei">我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</font></li></ul><ul><li><font face="Microsoft YaHei">使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</font></li></ul><p><br></p><h4 id="1-3-什么是包？"><font color="#3CB371" face="Comic sans MS">1.3 什么是包？</font><a href="post/Python-Modules-Packages#1-3-什么是包？"></a></h4><ol><li><font face="Microsoft YaHei">如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录（文件夹）来组织模块的方法，称为包（Package）。</font></li></ol><ol start="2"><li><font face="Microsoft YaHei">包是目录级的（文件夹级），文件夹是用来组成py文件（包的本质就是一个包含<code>__init__.py</code>文件的目录）</font></li></ol><ol start="3"><li><font face="Microsoft YaHei"><font color="#FF7F00"><strong>每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包</strong></font>。它可以是空文件，也可以有Python代码，因为 <code>__init__.py</code> 本身就是一个模块。</font></li></ol><ol start="4"><li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的 <code>__init__.py</code> ，<font color="#FF7F00"><strong>导入包本质就是在导入该文件</strong></font>。</font></li></ol><ol start="5"><li><font face="Microsoft YaHei">文件夹里面还可以包含文件夹（可以有多级目录，组成多级层次的包结构）。但是每一个文件夹下面必须有一个 <code>__init__.py</code> 文件。</font></li></ol><ol start="6"><li><font face="Microsoft YaHei">自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。</font></li></ol><p><br></p><font face="Comic sans MS"><strong>举例说明：</strong></font><p>有个包按照如下目录存放文件：</p><p>mycompany<br>├─ __init__.py<br>├─ abc.py<br>└─ xyz.py</p><blockquote><font face="Microsoft YaHei">引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<strong><code>abc.py</code></strong> 模块的名字就变成了 <strong><code>mycompany.abc</code></strong> ，类似的，<strong><code>xyz.py</code></strong> 的模块名变成了 <strong><code>mycompany.xyz</code></strong> 。</font></blockquote><p><br></p><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><p>mycompany<br> ├─ web<br> │  ├─ __init__.py<br> │  ├─ utils.py<br> │  └─ <a href="http://www.py" target="_blank" rel="noopener">www.py</a><br> ├─ __init__.py<br> ├─ abc.py<br> └─ xyz.py</p><blockquote><font face="Microsoft YaHei">文件<code>www.py</code> 的模块名就是<code>mycompany.web.www</code>，两个文件utils.py的模块名分别是<code>mycompany.utils</code>和 <code>mycompany.web.utils</code></font></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>总结</strong><br></font><font face="Microsoft YaHei">模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。<br></font><blockquote><font color="#FF7F00" face="Microsoft YaHei"><strong>创建自己的模块时，要注意：</strong></font><br>1. <font face="Microsoft YaHei"> 模块名要遵循Python变量命名规范，不要使用中文、特殊字符；</font><br>2. <font face="Microsoft YaHei">模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。</font></blockquote><p><br></p><p><br></p><h3 id="二-使用模块-无包组织"><font color="#FF6347" face="Comic sans MS">二. 使用模块 -- 无包组织</font><a href="post/Python-Modules-Packages#二-使用模块-无包组织"></a></h3><p><br></p><blockquote><font color="#FF7F00"><strong>使用模块的几种语句：</strong></font><br>1. <font face="Microsoft YaHei"><strong>import 语句：</strong> <strong><code>import module1[, module2[,... moduleN]</code></strong></font><br>2. <font face="Microsoft YaHei"><strong>from … import 语句：</strong> <strong><code>from  modname import  name1[, name2[, ... nameN]]</code></strong> </font><br>3. <font face="Microsoft YaHei"><strong>from … import * 语句：</strong> <strong><code>from  modname import *</code></strong></font><br>4. <font face="Microsoft YaHei"><strong>__name__属性：</strong> 用来分清该模块是调用者还是被其他模块调用。</font><br>5. <font face="Microsoft YaHei"><strong>dir() 函数：</strong> 用来查找模块中定义的名字，返回一个有序字符串列表。</font></blockquote><p><br></p><h4 id="2-1-import-语句"><font color="#3CB371" face="Comic sans MS">2.1 import 语句</font><a href="post/Python-Modules-Packages#2-1-import-语句"></a></h4><font face="Microsoft YaHei">想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><font face="Microsoft YaHei">使用 Python 源文件，只需在另一个源文件里执行 import 语句。</font></li><li><font face="Microsoft YaHei">一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</font></li><li><font face="Microsoft YaHei">调用者引用模块后可以：<code>模块名.函数名(参数)</code>来使用。</font></li></ol><p><br></p><p>举例说明：<br>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。如想要导入模块 support，需要把命令放在脚本的顶端：</p><pre class="line-numbers language-python"><code class="language-python">support<span class="token punctuation">.</span>py 文件代码<span class="token keyword">def</span> <span class="token function">print_func</span><span class="token punctuation">(</span> par <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello : "</span><span class="token punctuation">,</span> par<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test<span class="token punctuation">.</span>py 文件代码<span class="token comment" spellcheck="true"># 导入模块</span><span class="token keyword">import</span> support<span class="token comment" spellcheck="true"># 现在可以调用模块里包含的函数了</span>support<span class="token punctuation">.</span>print_func<span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>运行test<span class="token punctuation">.</span>py实例输出结果：Hello <span class="token punctuation">:</span>  Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="2-2-from-…-import-语句"><font color="#3CB371" face="Comic sans MS">2.2 from … import 语句</font><a href="post/Python-Modules-Packages#2-2-from-…-import-语句"></a></h4><font face="Microsoft YaHei">Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，<strong>这种访问函数时可以直接使用函数名而不需要前缀</strong>，语法如下：</font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br></p><p>举例说明：<br>例如，要导入模块 fibo 的 fib 函数，使用如下语句：</p><pre class="line-numbers language-python"><code class="language-python">fibo<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># 斐波那契(fibonacci)数列模块</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义到 n 的斐波那契数列</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">//</span>输出为None<span class="token keyword">def</span> <span class="token function">fib2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回到 n 的斐波那契数列</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">return</span> result<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test<span class="token punctuation">.</span>py<span class="token keyword">from</span> fibo <span class="token keyword">import</span> fib<span class="token punctuation">,</span> fib2<span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib2<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">13</span> <span class="token number">21</span> <span class="token number">34</span> <span class="token number">55</span> <span class="token number">89</span> <span class="token number">144</span> <span class="token number">233</span> <span class="token number">377</span>None<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">377</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="2-3-from-…-import-语句"><font color="#3CB371" face="Comic sans MS">2.3 from … import * 语句</font><a href="post/Python-Modules-Packages#2-3-from-…-import-语句"></a></h4><ul><li><font face="Microsoft YaHei">这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</font></li><li><font face="Microsoft YaHei">这种方法，可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表。</font></li><li><font face="Microsoft YaHei">这将把所有的名字都导入进来，但是那些由单一下划线（_）开头的名字不在此例。大多数情况， Python程序员不使用这种方法，因为引入的其它来源的命名，很可能覆盖了已有的定义。</font></li></ul><p><br></p><p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br></p><p><br></p><h3 id="三-使用模块-有包组织"><font color="#FF6347" face="Comic sans MS">三. 使用模块 -- 有包组织</font><a href="post/Python-Modules-Packages#三-使用模块-有包组织"></a></h3><ul><li><font face="Microsoft YaHei">目录只有包含一个叫做 <code>__init__.py</code> 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</font></li><li><font face="Microsoft YaHei">最简单的情况，放一个空的 <code>__init__.py</code>就可以了。当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） <code>__all__</code>变量赋值。</font></li></ul><p><br></p><font color="#00B2EE" face="Comic sans MS">1. <strong>import 语句：</strong></font><p>用户可以每次只导入一个包里面的特定模块，他必须使用全名去访问:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> 包名<span class="token punctuation">.</span>子包名<span class="token punctuation">.</span>模块名                 导入模块包名<span class="token punctuation">.</span>子包名<span class="token punctuation">.</span>模块名 <span class="token punctuation">.</span>函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>           使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS">2. <strong>import …from 语句：</strong></font>    <p>同样会导入子模块，他不需要那些冗长的前缀，只需要<code>模块名.函数名(参数)</code>即可，推荐使用！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 包名<span class="token punctuation">.</span>子包名 <span class="token keyword">import</span> 模块名           导入模块模块名<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>                      使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS">3. <strong>import …from 语句：</strong></font><p>还有一种变化就是直接导入一个函数或者变量:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 包名<span class="token punctuation">.</span>子包名<span class="token punctuation">.</span>模块名  <span class="token keyword">import</span> 函数名      导入模块函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>                               使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br></p><p><br></p><font color="#00B2EE" face="Comic sans MS">4. <strong>import …from * 语句：</strong></font><blockquote><font color="red" face="Comic sans MS" size="4"><strong>注意：这种导入方法必须要注意<code>__init__.py</code>里面的属性<code>__all__</code>已经设置好。<code>__all__</code>是用于控制from…import *</strong><br></font></blockquote><font face="Microsoft YaHei">Python 会进入文件系统，找到这个包里面所有的子模块，一个一个的把它们都导入进来。但是很不幸，这个方法在 Windows平台上工作的就不是非常好，因为Windows是一个大小写不区分的系统。</font><font face="Microsoft YaHei">在这类平台上，没有人敢担保一个叫做 ECHO.py 的文件导入为模块 echo 还是 Echo 甚至 ECHO。</font><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 包名<span class="token punctuation">.</span>子包名 <span class="token keyword">import</span> <span class="token operator">*</span>                 导入所有模块模块名<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>                        使用模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>具体使用方法请看下面章节四。</strong></p><p><br></p><blockquote><p><font color="#FF7F00" face="Microsoft YaHei"><strong>总结使用时注意事项：</strong></font></p><ol><li><font face="Microsoft YaHei">注意当使用<code>from package import item</code>这种形式的时候，对应的<font color="#FF7F00"><strong>item既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量</strong></font>。</font></li><li><font face="Microsoft YaHei">import语法会首先把item当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，恭喜，一个:exc:ImportError 异常被抛出了。</font></li><li><font face="Microsoft YaHei">反之，如果使用形如<code>import item.subitem.subsubitem</code>这种导入形式，<font color="#FF7F00"><strong>最后一项可以是包或者模块（不可以是类，函数或者变量的名字），除了最后一项，都必须是包。</strong></font>。</font></li></ol></blockquote><p><br></p><p><br></p><h3 id="四-init-、-all-、-name-、-author-、-doc-、dir-函数"><font color="#FF6347" face="Comic sans MS">四. __init__、__all__、__name__、__author__、__doc__、dir()函数</font><a href="post/Python-Modules-Packages#四-init-、-all-、-name-、-author-、-doc-、dir-函数"></a></h3><p><br></p><h4 id="4-1-init-、-all"><font color="#3CB371" face="Comic sans MS">4.1 __init__、__all__</font><a href="post/Python-Modules-Packages#4-1-init-、-all"></a></h4><font face="Microsoft YaHei">在使用<code>from 包名.子包名 import \* 语句</code>时必须修改<code>__init__.py</code>文件的<code>__all__</code>    列表变量。</font><blockquote><ol><li><font face="Microsoft YaHei">如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code>     的列表变量，那么在使用 <code>from package import *</code>的时候就把这个列表中的所有名字作为包内容导入。</font></li><li><font face="Microsoft YaHei">作为包的作者，可别忘了在更新包之后保证 <code>__all__</code>     也更新了啊。你说我就不这么做，我就不使用导入<code>*</code>这种用法，好吧，没问题。这里有一个例子</font></li><li><font face="Microsoft YaHei">这表示当你使用<code>from sound.effects import *</code>这种用法时，你只会导入如下包里面这三个子模块。即这种语法导入的是<code>__all__</code>指定的模块。</font></li><li><font face="Microsoft YaHei">在python3中，即使包下没有<code>__init__.py</code>文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</font></li><li><font face="Microsoft YaHei">import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的<code>__init__.py</code>，导入包本质就是在导入该文件。</font></li></ol></blockquote><p><br><br>上述的例子：</p><pre class="line-numbers language-python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">,</span> <span class="token string">"surround"</span><span class="token punctuation">,</span> <span class="token string">"reverse"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br></p><h4 id="4-1-name-、-main"><font color="#3CB371" face="Comic sans MS">4.1 __name__、__main__</font><a href="post/Python-Modules-Packages#4-1-name-、-main"></a></h4><ol><li><font face="Microsoft YaHei">__name__是一个变量。前后加了爽下划线是因为是因为这是系统定义的名字。普通变量不要使用此方式命名变量。</font></li><li><p><font face="Microsoft YaHei">__name__就是标识模块的名字的一个系统变量。这里分两种情况：</font></p><ol><li><font face="Microsoft YaHei">假如当前模块是主模块（也就是调用其他模块的模块），那么此模块名字就是<strong>main</strong>，即__name__==__main__。可以执行后面的内容；</font></li><li><font face="Microsoft YaHei">假如此模块是被import的，其值为被调用模块所属的路径。</font></li></ol></li></ol><p><br></p><p>下面举一个例子：</p><pre class="line-numbers language-python"><code class="language-python">test1<span class="token punctuation">.</span>py<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序自身在运行'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我来自另一模块'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test2<span class="token punctuation">.</span>py<span class="token keyword">import</span> test1<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>运行test2<span class="token punctuation">.</span>py输出结果：我来自另一模块运行test1<span class="token punctuation">.</span>py输出结果：程序自身在运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="4-3-author-、-doc"><font color="#3CB371" face="Comic sans MS">4.3 __author__、__doc__</font><a href="post/Python-Modules-Packages#4-3-author-、-doc"></a></h4><font face="Microsoft YaHei"><font color="#FF7F00"><strong>文档注释：</strong></font>任何模块代码的第一个字符串都被视为模块的文档注释；</font><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__doc__</code>：</strong></font>可以访问一个文件中的第一个单引号（1、2、3对）、双引号（1、2、3对）注释的文档。</font><font face="Microsoft YaHei"><font color="#FF7F00"><strong><code>__author__</code>：</strong></font>可以将一个文件的作者名字赋给它。</font><p><br></p><p>应用示例如下：</p><font color="#FF7F00"></font><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token string">' a test module '</span> <span class="token string">'fgbhjknml'</span>__author__ <span class="token operator">=</span> <span class="token string">'Directoree'</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__author__<span class="token punctuation">)</span>运行结果：<span class="token number">10</span> a test module a test moduleDirectoree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="4-4-dir-函数"><font color="#3CB371" face="Comic sans MS">4.4 dir()函数</font><a href="post/Python-Modules-Packages#4-4-dir-函数"></a></h4><blockquote><font face="Microsoft YaHei">内置的函数 dir() 可以<font color="#FF7F00"><strong>找到模块内定义的所有名称。以一个字符串列表的形式返回</strong></font> 。</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>无参数：</strong></font> 只能列举当前模块已经被定义的名字；</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>有参数：</strong></font> 参数只能是已经引用的模块名字，不能为自身名字，否则会报错。</font></blockquote><p><br></p><p>举例子说明：</p><pre class="line-numbers language-python"><code class="language-python">test3<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token string">' a test module '</span> <span class="token string">'fgbhjknml'</span>__author__ <span class="token operator">=</span> <span class="token string">'Directoree'</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>__author__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果： a test moduleDirectoree<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__author__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>test3<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> test3  <span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>test3<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'__author__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'__author__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="五-非公开函数"><font color="#FF6347" face="Comic sans MS">五. 非公开函数</font><a href="post/Python-Modules-Packages#五-非公开函数"></a></h3><blockquote><p><font color="#FF7F00" face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p></blockquote><font face="Microsoft YaHei">类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；<br></font><br><font face="Microsoft YaHei"></font><font face="Microsoft YaHei">之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</font><p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_private_1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">_private_2</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hi, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_1<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_2<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font face="Microsoft YaHei">我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：<br></font><font face="Microsoft YaHei"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</strong><br></font><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;from…import…😀&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-生成器与迭代器</title>
    <link href="Treecatee.gitgub.io/post/python-generator-iterator/"/>
    <id>Treecatee.gitgub.io/post/python-generator-iterator/</id>
    <published>2019-03-03T02:33:30.000Z</published>
    <updated>2019-03-04T10:01:27.677Z</updated>
    
    <content type="html"><![CDATA[<p>生成器生成想要的数据，可控制循环暂停，迭代器把可迭代的对象转换为生成器。( ⸝⸝⸝•_•⸝⸝⸝ )♡︎♡︎</p><a id="more"></a><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>生成器与迭代器</strong></font> </center><p><br></p><p><br></p><h3 id="一-迭代、列表生成式"><font color="#FF6347" face="Comic sans MS">一. 迭代、列表生成式</font><a href="post/Python-generator-iterator#一-迭代、列表生成式"></a></h3><h4 id="1-1-迭代"><font color="#3CB371" face="Comic sans MS">1.1 迭代</font><a href="post/Python-generator-iterator#1-1-迭代"></a></h4><font color="#FF7F00"><strong>迭代：</strong></font>如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。<font color="#FF7F00"><strong>Python的for…in循环就是迭代</strong></font>。<br><br>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：<br><br><font color="#FF7F00"></font><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>运行结果：abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><ol><li>因为dict、set的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</li><li>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</li><li>当我们使用for循环时，只要作用于一个<font color="#FF7F00"><strong>可迭代对象</strong></font>，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</li></ol></blockquote><p>最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？<font color="#FF7F00"><strong>Python内置的enumerate函数可以把一个list变成索引-元素对</strong></font>，这样就可以在for循环中同时迭代索引和元素本身：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span>运行结果：<span class="token number">0</span> A<span class="token number">1</span> B<span class="token number">2</span> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="1-2-列表生成式"><font color="#3CB371" face="Comic sans MS">1.2 列表生成式</font><a href="post/Python-generator-iterator#1-2-列表生成式"></a></h4><p><strong>规则：</strong>for前面是一个表达式，表示将in后面的元素按照这个表达式进行计算出来后还要看in后面有没有筛选条件，<br>然后赋值给for…in中间的变量。格式如下：</p><font color="#FF7F00"><strong>表达式1 for 变量 in 可迭代对象 [表达式2]</strong></font><p><br></p><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p><p>举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用<code>list(range(1, 11))</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环：</p><pre class="line-numbers language-python"><code class="language-python">L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>但是循环太繁琐，而<font color="#FF7F00"><strong>列表生成式</strong></font>则可以用一行语句代替循环生成上面的list：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span>前面是一个表达式，表示将<span class="token keyword">in</span>后面的元素按照这个表达式进行计算出来后还要看<span class="token keyword">in</span>后面有没有筛选条件，然后赋值给<span class="token keyword">for</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">in</span>中间的变量。格式如下：表达式<span class="token number">1</span> <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象 <span class="token punctuation">[</span>表达式<span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">for</span>循环后面还可以加上<span class="token keyword">if</span>判断，这样我们就可以筛选出仅偶数的平方：a <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span> 还可以使用两层循环，可以生成全排列：b <span class="token operator">=</span> <span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'ABC'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'XYZ'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'AX'</span><span class="token punctuation">,</span> <span class="token string">'AY'</span><span class="token punctuation">,</span> <span class="token string">'AZ'</span><span class="token punctuation">,</span> <span class="token string">'BX'</span><span class="token punctuation">,</span> <span class="token string">'BY'</span><span class="token punctuation">,</span> <span class="token string">'BZ'</span><span class="token punctuation">,</span> <span class="token string">'CX'</span><span class="token punctuation">,</span> <span class="token string">'CY'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">for</span>循环其实可以同时使用两个甚至多个变量，比如dict的items<span class="token punctuation">(</span><span class="token punctuation">)</span>可以同时迭代key和value：d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'x=A'</span><span class="token punctuation">,</span> <span class="token string">'y=B'</span><span class="token punctuation">,</span> <span class="token string">'z=C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="二-生成器"><font color="#FF6347" face="Comic sans MS">二. 生成器</font><a href="post/Python-generator-iterator#二-生成器"></a></h3><p>参考资料：</p><font face="Comic sans MS"><font color="#00B2EE">《<a href="https://www.cnblogs.com/wj-1314/p/8490822.html#undefined" target="_blank" rel="noopener">python 生成器和迭代器有这篇就够了</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/python3/python3-iterator-generator.html" target="_blank" rel="noopener">Python3 迭代器与生成器</a>》</font><br></font><font face="Comic sans MS"><font color="#00B2EE">《<a href="http://www.runoob.com/w3cnote/python-yield-used-analysis.html" target="_blank" rel="noopener">Python yield 使用浅析</a>》</font><br></font><p><br></p><font color="#00B2EE"><strong>什么是生成器？</strong></font><p>　　通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>　　所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为<strong>生成器：generator</strong></p><p>　　生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器。</p><p>　　生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器</p><p><br></p><blockquote><p><font color="#FF7F00"><strong>python提供了两种生成器基本的方式</strong></font></p><p><font color="#FF7F00"><strong>生成器函数：</strong></font>也是用def定义的，利用关键字yield一次返回一个结果、阻塞，重新开始</p><p><font color="#FF7F00"><strong>生成器表达式：</strong></font>返回一个对象，这个对象只有在需要的时候才产生结果</p></blockquote><p><br></p><p><br></p><h4 id="2-1-yield、-next-、send"><font color="#3CB371" face="Comic sans MS">2.1 yield、__next__()、send()</font><a href="post/Python-generator-iterator#2-1-yield、-next-、send"></a></h4><p><br></p><ol><li><p>带有yield语句的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代。</p></li><li><p>yield是一个类似return 的关键字，<font color="#FF7F00"><strong>返回一个值或者表达式</strong></font>，迭代一次遇到yield的时候就返回yield后面（代码块）或者右面（单行）的值，然后暂停。</p></li><li><p>一个函数正常执行遇到yeild时，<font color="#FF7F00"><strong>yeild返回一个值给函数的调用者，然后在这暂停并记住这个位置</strong></font>（因为此时程序要跳转到调用这个函数的地方 =&gt; 因为yeild的返回）<font color="#FF7F00"><strong>！不去执行下一个语句的代码。当程序执行遇到__next__()方法或者next()（Python2用）时，继续执行上次yield的下一个语句直到遇到下一个yield或者该函数结束。</strong></font></p></li><li><p>send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</p></li><li><p>send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</p></li><li><p><font color="#FF7F00"><strong>for…in 循环中会自动调用 next()</strong></font>。这就说明for…in能够不中断地执行完整个函数。</p></li></ol><p><br></p><p>下面举例子说明：</p><pre class="line-numbers language-python"><code class="language-python">下面的例子用 a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> 来说明yeild的返回和暂停<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>例<span class="token number">1</span>：<span class="token keyword">def</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 1'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 2'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 3'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">5</span>a <span class="token operator">=</span> odd<span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*****分割线*****'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*****分割线*****'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> 输出：       step <span class="token number">1</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>分割线<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token number">1</span>step <span class="token number">2</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>分割线<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token number">3</span>结论：这个时候在<span class="token keyword">yield</span> <span class="token number">1</span>处暂停了（输出step1），并且<span class="token keyword">yield</span>返回了一个值<span class="token number">1</span>给a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="2-2-表达式创建生成器"><font color="#3CB371" face="Comic sans MS">2.2 表达式创建生成器</font><a href="post/Python-generator-iterator#2-2-表达式创建生成器"></a></h4><blockquote><font color="#FF7F00"><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误。</strong></font></blockquote><p>要创建一个generator，有很多种方法，第一种方法很简单，只有<font color="#FF7F00"><strong>把一个列表生成式的[]中括号改为（）小括号</strong></font>，就创建一个generator:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#列表生成式</span>lis <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#生成器</span>generator_ex <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">)</span>结果：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>generator object <span class="token operator">&lt;</span>genexpr<span class="token operator">></span> at <span class="token number">0x000002A4CBF9EBA0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>　　那么创建lis和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是&lt;generator object <genexpr> at 0x000002A4CBF9EBA0&gt;，那么如何打印出来generator_ex的每一个元素呢？</genexpr></p><p>　　如果要一个个打印出来，可以通过 <code>__next__()</code> 获得generator的下一个返回值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#生成器</span>generator_ex <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generator_ex<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>结果：<span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span class="token number">9</span><span class="token number">16</span><span class="token number">25</span><span class="token number">36</span><span class="token number">49</span><span class="token number">64</span><span class="token number">81</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"列表生成式.py"</span><span class="token punctuation">,</span> line <span class="token number">42</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>generator_ex<span class="token punctuation">)</span><span class="token punctuation">)</span>StopIteration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><strong>generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误</strong>，而且上面这样不断调用是一个不好的习惯，正确的方法是使用for循环，因为generator也是可迭代对象。</p><p>所以我们创建一个generator后，基本上永远不会调用<code>__next__()</code>，而是通过for循环来迭代，并且不需要关心StopIteration的错误，generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#生成器</span>generator_ex <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> generator_ex<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>结果：<span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span class="token number">9</span><span class="token number">16</span><span class="token number">25</span><span class="token number">36</span><span class="token number">49</span><span class="token number">64</span><span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="2-2-函数创建生成器"><font color="#3CB371" face="Comic sans MS">2.2 函数创建生成器</font><a href="post/Python-generator-iterator#2-2-函数创建生成器"></a></h4><blockquote><font color="#FF7F00"><strong>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个生成器。</strong></font></blockquote><p><br></p><p>下面举例子说明：</p><p>著名的斐波那契数列，除第一个和第二个数外，任何一个数都可以由前两个相加得到：</p><p>1，1，2，3，5，8，13，21，34…..</p><p>斐波那契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#fibonacci数列</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>a <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">8</span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">8</span>done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>a,b = b ,a+b  其实相当于 t =a+b ,a =b ,b =t  ，所以不必写显示写出临时变量t，就可以输出斐波那契数列的前N个数字。</p></blockquote><p><br></p><p>上面我们发现，print(b)每次函数运行都要打印，占内存，所以为了不占内存，我们也可以使用生成器，同样是使用函数，只不过函数中有 <code>yield</code> 语句，所以叫做生成器。但是返回的不再是一个值，而是一个生成器，和上面的例子一样。</p><p>那么这样就不占内存了，这里说一下generator和函数的执行流程，函数是顺序执行的，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用__next__()方法的时候执行，遇到yield语句返回，再次被__next__() 调用时候从上次的返回yield语句处继续执行，也就是用多少，取多少，不占内存。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>a <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token operator">&lt;</span>generator object fib at <span class="token number">0x000001C03AC34FC0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>下面用3个例子说明用for…in 循环的好处，但是拿不到return 语句的返回值，那么就会报错，所以为了不让报错，就要进行异常处理，拿到返回值，如果想要拿到返回值，必须捕获StopIteration错误，而返回值包含在StopIteration的value中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> 使用__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>方法到最后一个的下一个时会报错。<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>a <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可以顺便干其他事情"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>结果：<span class="token operator">&lt;</span>generator object fib at <span class="token number">0x01058B70</span><span class="token operator">></span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span>可以顺便干其他事情<span class="token number">3</span><span class="token number">5</span><span class="token number">8</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token operator">//</span>看到报错，并且 StopIteration<span class="token punctuation">:</span> done  File <span class="token string">"3.py"</span><span class="token punctuation">,</span> line <span class="token number">18</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>StopIteration<span class="token punctuation">:</span> done<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span> 在上面fib的例子，我们在循环过程中不断调用<span class="token keyword">yield</span>，就会不断中断。当然要给循环设置一个条件来退出循环，   不然就会产生一个无限数列出来。把函数改成generator后，我们基本上从来不会用next<span class="token punctuation">(</span><span class="token punctuation">)</span>来获取下一个   返回值，而是直接使用<span class="token keyword">for</span>循环来迭代，但是拿不到<span class="token keyword">return</span> 语句的返回值：<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>结果：<span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token number">8</span>             <span class="token operator">//</span>程序没报错，但是拿不到<span class="token keyword">return</span>返回的值。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span> 如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span>b <span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>g <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> next<span class="token punctuation">(</span>g<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'generator: '</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生成器返回值："</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token keyword">break</span>结果：generator<span class="token punctuation">:</span>  <span class="token number">1</span>generator<span class="token punctuation">:</span>  <span class="token number">1</span>generator<span class="token punctuation">:</span>  <span class="token number">2</span>generator<span class="token punctuation">:</span>  <span class="token number">3</span>generator<span class="token punctuation">:</span>  <span class="token number">5</span>generator<span class="token punctuation">:</span>  <span class="token number">8</span>生成器返回值： done      <span class="token operator">//</span>拿到了<span class="token keyword">return</span>的返回值！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="三-迭代器"><font color="#FF6347" face="Comic sans MS">三. 迭代器</font><a href="post/Python-generator-iterator#三-迭代器"></a></h3><blockquote><p><font color="#FF7F00"><strong>迭代就是循环，迭代器功能是把一个可迭代的对象转换为生成器。因为生成器本身就是可迭代的。</strong></font><br>迭代器包含有next方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出StopIteration的错误停止迭代。</p></blockquote><p><br></p><blockquote><p><font color="#00B2EE"><strong>可以直接作用于for循环的数据类型有以下几种：</strong></font></p><p><font color="#FF7F00"><strong>一类是集合数据类型：</strong></font>如list,tuple,dict,set,str等；</p><p><font color="#FF7F00"><strong>一类是generator：</strong></font>包括生成器和带yield的generator 函数。</p></blockquote><p><br></p><p><br></p><h4 id="3-1-可迭代对象"><font color="#3CB371" face="Comic sans MS">3.1 可迭代对象</font><a href="post/Python-generator-iterator#3-1-可迭代对象"></a></h4><p>这些可以直接作用于for 循环的对象统称为<font color="#00B2EE"><strong>可迭代对象：Iterable</strong></font><br>可以使用 <strong><code>isinstance()</code></strong> 判断一个对象是否为可Iterable对象！</p><p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-isinstance.html" target="_blank" rel="noopener">Python isinstance() 函数</a>]</font></p><p><br></p><p><strong>语法</strong></p><p><code>isinstance(object, classinfo)</code></p><p><strong>参数</strong><br>object – 实例对象。<br>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</p><p><strong>返回值</strong><br>如果两个参数类型（classinfo）相同则返回 True，否则返回 False。</p><p><br></p><p><br></p><h4 id="3-2-迭代器"><font color="#3CB371" face="Comic sans MS">3.2 迭代器</font><a href="post/Python-generator-iterator#3-2-迭代器"></a></h4><p>一个实现了iter方法的对象时可迭代的，一个实现next方法的对象是迭代器<br>可以被next()函数调用并不断返回下一个值的对象称为<font color="#00B2EE"><strong>迭代器：Iterator</strong></font>。<br>可以使用isinstance()判断一个对象是否是Iterator对象</p><p>所以，整体的流程为：</p><ol><li><p>使用isinstance()判断一个对象是否为Iterable对象（可迭代对象），语法为<code>isinstance(对象,Iterable)</code>。返回Ture/False。</p></li><li><p>如果返回 Ture，使用 <code>iter(可迭代对象)</code> 即可得到返回值为生成器的东西。</p></li><li><p>然后就可以把这个返回值作为生成器去尽情的使用了。</p></li></ol><p><br></p><p>查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-iter.html" target="_blank" rel="noopener">Python iter() 函数</a>]</font></p><blockquote><p><font color="#FF7F00"><strong>总结：</strong></font></p><ol><li>凡是可作用于for循环的对象都是Iterable类型；</li><li>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；<br>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</li><li>生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。</li><li>iter()返回值是迭代器对象。</li></ol></blockquote><p><br></p><p>举例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token punctuation">,</span>Iterator<span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>iter<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">False</span><span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成器生成想要的数据，可控制循环暂停，迭代器把可迭代的对象转换为生成器。( ⸝⸝⸝•_•⸝⸝⸝ )♡︎♡︎&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-函数</title>
    <link href="Treecatee.gitgub.io/post/python-function/"/>
    <id>Treecatee.gitgub.io/post/python-function/</id>
    <published>2019-03-02T06:18:58.000Z</published>
    <updated>2019-03-03T11:33:20.285Z</updated>
    
    <content type="html"><![CDATA[<p>有两种定义函数的方法，千万不要忘了冒号和<code>return</code>   ( ´⚰︎` )<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>函数</strong></font> </center><p><br></p><p><br></p><blockquote><p><strong>函数分为：</strong><font color="#FF7F00"><strong>内置（系统）函数和自定义函数</strong></font>。</p><ol><li>自定义函数又分为普通（有名字的）函数和匿名（无名字的）函数，二者定义方式不一样；</li><li>自定义和函数里面还可嵌套定义其他函数，匿名函数定义时是一条语句，并且要赋值给一个变量指针。</li><li>普通函数的函数体如果为空，则必须放入一条pass语句，否则会报错；函数体不为空的必须有return语句，否则会报错。</li></ol></blockquote><p><br></p><p><br></p><h3 id="一-定义函数"><font color="#FF6347" face="Comic sans MS">一. 定义函数</font><a href="post/Python-Function#一-定义函数"></a></h3><blockquote><p><strong>自定义函数简单的规则：</strong></p><ol><li>函数代码块以 <code>def</code> 关键词开头，依次写出函数名、括号、括号中的参数和冒号<code>:</code>。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进写代码块结构。</li><li>用<code>return [表达式]</code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。还可以返回多个值，如<code>return x,y</code></li></ol></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>语法</strong></font><p>Python 定义函数使用 def 关键字，默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。一般格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）<span class="token punctuation">:</span>    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br></p><p>以自定义一个求绝对值的my_abs函数为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x运行结果：<span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="二-参数传递"><font color="#FF6347" face="Comic sans MS">二. 参数传递</font><a href="post/Python-Function#二-参数传递"></a></h3><p>在 python 中，类型属于对象，变量是没有类型的：<br><code>a=[1,2,3]</code><br><code>a=&quot;Runoob&quot;</code><br>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>一、可更改(mutable)与不可更改(immutable)对象</strong></font><p>在 python 中，<font color="#FF7F00"><strong>strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象</strong></font>。</p><p>python 函数的参数传递：</p><ul><li><p><strong>不可变类型：</strong>类似 c++ 的值传递，如 <strong>整数</strong>、<strong>字符串</strong>、<strong>元组</strong>。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p></li><li><p><strong>可变类型：</strong>类似 c++ 的引用传递（地址），如 <strong>列表</strong>，<strong>字典</strong>。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p></li></ul><blockquote><p>python 中<font color="#FF7F00"><strong>一切都是对象</strong></font>，严格意义我们不能说值传递还是引用传递，我们应该说<font color="#FF7F00"><strong>传不可变对象和传可变对象</strong></font>。</p></blockquote><p><br></p><p>python 传不可变对象实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ChangeInt</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">2</span>ChangeInt<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果是 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p></blockquote></blockquote><p><br></p><p>传可变对象实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"修改传入的列表"</span>   mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内取值1: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>   mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内取值2: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># 调用changeme函数</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>changeme<span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>运行结果：函数内取值<span class="token number">1</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>函数内取值<span class="token number">2</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>函数外取值<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、参数</strong></font><p><strong>以下是调用函数时可使用的正式参数类型：</strong></p><ol><li><p><font color="#FF7F00"><strong>必需参数：</strong></font>调用函数时以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p></li><li><p><font color="#FF7F00"><strong>关键字参数：</strong></font>允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p></li><li><p><font color="#FF7F00"><strong>默认参数：</strong></font>定义函数时可指定参数值，调用函数时，如果没有传递参数，则会使用默认参数。</p></li><li><p><font color="#FF7F00"><strong>不定长参数：</strong></font>能处理比当初声明时更多的参数，这些参数被包装进一个<font color="#FF7F00"><strong>元组</strong></font>或<font color="#FF7F00"><strong>字典</strong></font>，通常，这些 可变 参数是参数列表中的最后一个，因为它们将把所有的剩余输入参数传递给函数。</p></li></ol><p><br></p><font color="#FF7F00" face="Comic sans MS"><strong>1. 必需参数：</strong></font><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><p>调用printme()函数，你必须传入一个参数，不然会出现语法错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#调用printme函数</span>printme<span class="token punctuation">(</span><span class="token punctuation">)</span>以上实例输出结果：Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    printme<span class="token punctuation">(</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> printme<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'str'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#FF7F00" face="Comic sans MS"><strong>2. 关键字参数：</strong></font><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>以下实例中演示了函数参数的使用不需要使用指定顺序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span>以上实例输出结果：名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#FF7F00" face="Comic sans MS"><strong>3. 默认参数：</strong></font><p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span>以上实例输出结果：名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">50</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#FF7F00" face="Comic sans MS"><strong>4. 不定长参数：</strong></font><blockquote><p><strong>你可能需要一个函数能处理比当初声明时更多的参数：</strong></p><ol><li>加了星号 <code>*</code> 的参数会以<font color="#FF7F00"><strong>元组(tuple)</strong></font>的形式导入，存放所有未命名的变量参数。</li><li>加了两个星号<code>**</code>的参数会以<font color="#FF7F00"><strong>字典(dict)</strong></font>的形式导入。</li><li>声明函数时，参数中星号 * 可以单独出现。</li><li>如果单独出现星号 * 后的参数必须用关键字传入。</li></ol></blockquote><p><br></p><ol><li>加了星号<code>*</code>的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"循环输出: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span>输出结果：输出<span class="token punctuation">:</span><span class="token number">10</span>输出<span class="token punctuation">:</span><span class="token number">70</span>循环输出<span class="token punctuation">:</span><span class="token number">60</span>循环输出<span class="token punctuation">:</span><span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="2"><li>加了两个星号<code>**</code>的参数会以字典的形式导入。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>以上实例输出结果：<span class="token number">1</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="3"><li>声明函数时，参数中星号 * 可以单独出现，例如:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br></p><ol start="4"><li>如果单独出现星号 * 后的参数必须用关键字传入。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>ca <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>报错如下：Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">3</span> were given改正方式：a <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 正常</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="三-匿名函数"><font color="#FF6347" face="Comic sans MS">三. 匿名函数</font><a href="post/Python-Function#三-匿名函数"></a></h3><font color="#00B2EE" face="Comic sans MS"><strong>python 使用 lambda 来创建匿名函数。</strong></font><blockquote><p><strong>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</strong></p><ol><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li></ol></blockquote><p><br></p><p><strong>语法</strong><br>lambda 函数的语法只包含一个语句，如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br></p><p>如下实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span>sum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2<span class="token comment" spellcheck="true"># 调用sum函数</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>以上实例输出结果：相加后的值为 <span class="token punctuation">:</span>  <span class="token number">30</span>相加后的值为 <span class="token punctuation">:</span>  <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="四-变量作用域"><font color="#FF6347" face="Comic sans MS">四. 变量作用域</font><a href="post/Python-Function#四-变量作用域"></a></h3><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p><p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p><ul><li><font color="#FF7F00"><strong>L （Local）</strong></font> 局部作用域</li><li><font color="#FF7F00"><strong>E （Enclosing）</strong></font> 闭包函数外的函数中(函数A中定义了函数B，A定义的变量对B来说是闭包函数外的函数)</li><li><font color="#FF7F00"><strong>G （Global）</strong></font> 全局作用域</li><li><font color="#FF7F00"><strong>B （Built-in）</strong></font> 内置作用域（内置函数所在模块的范围）</li></ul><p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p><pre class="line-numbers language-python"><code class="language-python">g_count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 全局作用域</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    o_count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 闭包函数外的函数中</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i_count <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 局部作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token string">'I am from Runoob'</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>输出结果：I am <span class="token keyword">from</span> Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><p>实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。<br>如果将 msg 定义在函数中，则它就是局部变量，外部不能访问。</p></blockquote><p><br></p><p><br></p><h3 id="五-全局变量和局部变量"><font color="#FF6347" face="Comic sans MS">五. 全局变量和局部变量</font><a href="post/Python-Function#五-全局变量和局部变量"></a></h3><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p><p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p><pre class="line-numbers language-python"><code class="language-python">total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 这是一个全局变量</span><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#返回2个参数的和."</span>    total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment" spellcheck="true"># total在这里是局部变量.</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内是局部变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>    <span class="token keyword">return</span> total<span class="token comment" spellcheck="true">#调用sum函数</span>sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外是全局变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>以上实例输出结果：函数内是局部变量 <span class="token punctuation">:</span>  <span class="token number">30</span>函数外是全局变量 <span class="token punctuation">:</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>global 和 nonlocal关键字</strong></font><blockquote><p><font color="#FF7F00"><strong>global</strong></font>：内部作用域使用全局变量，并且可以修改，作用影响全局；</p><p><font color="#FF7F00"><strong>nonlocal</strong></font>：函数A嵌套函数B，函数B使用函数A的变量，并且可以修改，作用影响函数A的这个变量；</p></blockquote><ol><li>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。</li></ol><p>以下实例修改全局变量 num：</p><pre class="line-numbers language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num  <span class="token comment" spellcheck="true"># 需要使用 global 关键字声明</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>     num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>以上实例输出结果：<span class="token number">1</span><span class="token number">123</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="2"><li>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nonlocal num   <span class="token comment" spellcheck="true"># nonlocal关键字声明</span>        num <span class="token operator">=</span> <span class="token number">100</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>outer<span class="token punctuation">(</span><span class="token punctuation">)</span>以上实例输出结果：<span class="token number">100</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="六-非公开函数"><font color="#FF6347" face="Comic sans MS">六. 非公开函数</font><a href="post/Python-Function#六-非公开函数"></a></h3><blockquote><p><font color="#FF7F00"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p></blockquote><p>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；</p><p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p><p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_private_1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">_private_2</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hi, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_1<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_2<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p><p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有两种定义函数的方法，千万不要忘了冒号和&lt;code&gt;return&lt;/code&gt;   ( ´⚰︎` )&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-运算符</title>
    <link href="Treecatee.gitgub.io/post/python-operators/"/>
    <id>Treecatee.gitgub.io/post/python-operators/</id>
    <published>2019-03-01T07:06:47.000Z</published>
    <updated>2019-03-01T07:08:22.714Z</updated>
    
    <content type="html"><![CDATA[<p>要常来骚扰…₍ ..̮ ₎ ₍ ..̮ ₎<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>运算符</strong></font> </center><p><br></p><p><br></p><p>Python语言支持以下类型的运算符:</p><ul><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf1" target="_blank" rel="noopener">算术运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf2" target="_blank" rel="noopener">比较（关系）运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf3" target="_blank" rel="noopener">赋值运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf4" target="_blank" rel="noopener">逻辑运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf5" target="_blank" rel="noopener">位运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf6" target="_blank" rel="noopener">成员运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf7" target="_blank" rel="noopener">身份运算符</a></font></li><li><font color="#00B2EE"><a href="http://www.runoob.com/python3/python3-basic-operators.html#ysf8" target="_blank" rel="noopener">运算符优先级</a></font></li></ul><p><br></p><p><br></p><h3 id="一-算术运算符"><font color="#FF6347" face="Comic sans MS"> 一. 算术运算符</font><a href="post/Python-Operators#一-算术运算符"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加 - 两个对象相加</td><td style="text-align:left">a + b 输出结果 30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减 - 得到负数或是一个数减去另一个数</td><td style="text-align:left">a - b 输出结果 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td style="text-align:left">a * b 输出结果 200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除 - x除以y</td><td style="text-align:left">b / a 输出结果 2</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模 - 返回除法的余数</td><td style="text-align:left">b % a 输出结果 0</td></tr><tr><td style="text-align:left">**</td><td style="text-align:left">幂 - 返回x的y次幂</td><td style="text-align:left">a**b 为10的20次方，<br>输出结果 100000000000000000000</td></tr><tr><td style="text-align:left">//</td><td style="text-align:left">取整除 - 返回商的整数部分（向下取整）</td><td style="text-align:left">&gt;&gt;&gt;&gt; 9//2<br>4<br>&gt;&gt;&gt; -9//2<br>-5</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="二-比较运算符"><font color="#FF6347" face="Comic sans MS"> 二. 比较运算符</font><a href="post/Python-Operators#二-比较运算符"></a></h3><p>以下假设变量a为10，变量b为20：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">等于 - 比较对象是否相等</td><td style="text-align:left">(a == b) 返回 False。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">不等于 - 比较两个对象是否不相等</td><td style="text-align:left">(a != b) 返回 True。</td></tr><tr><td style="text-align:left">></td><td style="text-align:left">大于 - 返回x是否大于y</td><td style="text-align:left">(a &gt; b) 返回 False。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。<br>这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td style="text-align:left">(a &lt; b) 返回 True。</td></tr><tr><td style="text-align:left">>=</td><td style="text-align:left">大于等于 - 返回x是否大于等于y。</td><td style="text-align:left">(a &gt;= b) 返回 False。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于等于 - 返回x是否小于等于y。</td><td style="text-align:left">(a &lt;= b) 返回 True。</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="三-赋值运算符"><font color="#FF6347" face="Comic sans MS">三. 赋值运算符</font><a href="post/Python-Operators#三-赋值运算符"></a></h3><p>以下假设变量a为10，变量b为20：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符</td><td style="text-align:left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加法赋值运算符</td><td style="text-align:left">c += a 等效于 c = c + a</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减法赋值运算符</td><td style="text-align:left">c -= a 等效于 c = c - a</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘法赋值运算符</td><td style="text-align:left">c *= a 等效于 c = c * a</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除法赋值运算符</td><td style="text-align:left">c /= a 等效于 c = c / a</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">取模赋值运算符</td><td style="text-align:left">c %= a 等效于 c = c % a</td></tr><tr><td style="text-align:left">**=</td><td style="text-align:left">幂赋值运算符</td><td style="text-align:left">c **= a 等效于 c = c ** a</td></tr><tr><td style="text-align:left">//=</td><td style="text-align:left">取整除赋值运算符</td><td style="text-align:left">c //= a 等效于 c = c // a</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="四-位运算符"><font color="#FF6347" face="Comic sans MS">四. 位运算符</font><a href="post/Python-Operators#四-位运算符"></a></h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13二进制格式如下：</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td style="text-align:left">a = 0011 1100</td><td></td></tr><tr><td style="text-align:left">b = 0000 1101</td><td></td></tr><tr><td style="text-align:left">a&amp;b = 0000 1100</td><td></td></tr><tr><td style="text-align:left">a丨b = 0011 1101</td><td></td></tr><tr><td style="text-align:left">a^b = 0011 0001</td><td></td></tr><tr><td style="text-align:left"><code>~a</code>  = 1100 0011</td><td></td></tr></tbody></table></div></div><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与运算符：<br>参与运算的两个值,如果两个相应位都为1,<br>则该位的结果为1,否则为0</td><td style="text-align:left">(a &amp; b) 输出结果 12 <br>二进制解释： 0000 1100</td></tr><tr><td style="text-align:left">丨</td><td style="text-align:left">按位或运算符：<br>只要对应的二个二进位有一个为1时，结果位就为1。</td><td style="text-align:left">(a 丨 b) 输出结果 61 <br>二进制解释： 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或运算符：<br>当两对应的二进位相异时，结果为1</td><td style="text-align:left">(a ^ b) 输出结果 49 <br>二进制解释： 0011 0001</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">按位取反运算符：<br>对数据的每个二进制位取反,<br>即把1变为0,把0变为1。~x 类似于 -x-1</td><td style="text-align:left">(~a ) 输出结果 -61 <br>二进制解释： 1100 0011 <br>在一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移动运算符：<br>运算数的各二进位全部左移若干位，<br>由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td style="text-align:left">a &lt;&lt; 2 输出结果 240 <br>二进制解释： 1111 0000</td></tr><tr><td style="text-align:left">>></td><td style="text-align:left">右移动运算符：<br>把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，<br>“&gt;&gt;”右边的数指定移动的位数</td><td style="text-align:left">a &gt;&gt; 2 输出结果 15 <br>二进制解释： 0000 1111</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="五-逻辑运算符"><font color="#FF6347" face="Comic sans MS">五. 逻辑运算符</font><a href="post/Python-Operators#五-逻辑运算符"></a></h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">逻辑表达式</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">and</td><td style="text-align:left">x and y</td><td style="text-align:left">布尔”与” - 如果 x 为 False，<br>x and y 返回 False，否则它返回 y 的计算值。</td><td style="text-align:left">(a and b) 返回 20。</td></tr><tr><td style="text-align:left">or</td><td style="text-align:left">x or y</td><td style="text-align:left">布尔”或” - 如果 x 是 True，<br>它返回 x 的值，否则它返回 y 的计算值。</td><td style="text-align:left">(a or b) 返回 10。</td></tr><tr><td style="text-align:left">not</td><td style="text-align:left">not x</td><td style="text-align:left">布尔”非” - 如果 x 为 True，<br>返回 False 。如果 x 为 False，它返回 True。</td><td style="text-align:left">not(a and b) 返回 False</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="六-成员运算符"><font color="#FF6347" face="Comic sans MS">六. 成员运算符</font><a href="post/Python-Operators#六-成员运算符"></a></h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">in</td><td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td style="text-align:left">x 在 y 序列中 , <br>如果 x 在 y 序列中返回 True。</td></tr><tr><td style="text-align:left">not in</td><td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td style="text-align:left">x 不在 y 序列中 , <br>如果 x 不在 y 序列中返回 True。</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="七-身份运算符"><font color="#FF6347" face="Comic sans MS">七. 身份运算符</font><a href="post/Python-Operators#七-身份运算符"></a></h3><p>身份运算符用于比较两个对象的存储单元。<br><strong>注：</strong><font color="#00B2EE">[<a href="http://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id() 函数</a>]</font> 用于获取对象内存地址。</p><p>is 与 == 区别：<font color="#FF7F00"><strong>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等</strong></font>。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">is</td><td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left">x is y, 类似 id(x) == id(y) 。<br> 如果引用的是同一个对象则返回 True，<br>否则返回 False</td></tr><tr><td style="text-align:left">is not</td><td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left">x is not y ， 类似 id(a) != id(b)。<br>如果引用的不是同一个对象则返回结果 True，<br>否则返回 False。</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="八-运算符优先级"><font color="#FF6347" face="Comic sans MS">八. 运算符优先级</font><a href="post/Python-Operators#八-运算符优先级"></a></h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">**</td><td style="text-align:left">指数 (最高优先级)</td></tr><tr><td style="text-align:left">~ + -</td><td style="text-align:left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td style="text-align:left">* / % //</td><td style="text-align:left">乘，除，取模和取整除</td></tr><tr><td style="text-align:left">+ -</td><td style="text-align:left">加法减法</td></tr><tr><td style="text-align:left">>></td><td style="text-align:left">&lt;&lt;    右移，左移运算符</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">位 ‘AND’</td></tr><tr><td style="text-align:left">^ 丨</td><td style="text-align:left">位运算符</td></tr><tr><td style="text-align:left">&lt;= &lt; &gt; &gt;=</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:left">&lt;&gt; == !=</td><td style="text-align:left">等于运算符</td></tr><tr><td style="text-align:left">= %= /= //= -= += *= **=</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:left">is is not</td><td style="text-align:left">身份运算符</td></tr><tr><td style="text-align:left">in not in</td><td style="text-align:left">成员运算符</td></tr><tr><td style="text-align:left">and or not</td><td style="text-align:left">逻辑运算符</td></tr></tbody></table></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要常来骚扰…₍ ..̮ ₎ ₍ ..̮ ₎&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-条件语句与循环</title>
    <link href="Treecatee.gitgub.io/post/python-conditionalstatements-loops/"/>
    <id>Treecatee.gitgub.io/post/python-conditionalstatements-loops/</id>
    <published>2019-03-01T03:29:20.000Z</published>
    <updated>2019-03-01T07:11:19.281Z</updated>
    
    <content type="html"><![CDATA[<p>记得冒号和换行的缩进呀…(｡◕︎‿◕︎)ﾉﾟ･ﾟ･<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>条件语句与循环</strong></font> </center><p><br></p><p><br></p><h3 id="一-条件语句"><font color="#FF6347" face="Comic sans MS">一. 条件语句</font><a href="post/Python-ConditionalStatements-loops#一-条件语句"></a></h3><p><br></p><ol><li><p>if-else-elif是条件语句，判断bool类型，判断为True就继续执行后面的缩进语句，判断为Flase则不执行缩进语句。</p></li><li><p>Python程序语言指定任何非0和非空（Null）值为True，0 或者 null为False。</p></li><li><p>Python<font color="#FF7F00"><strong>只执行if-elif-else 结构中的一个代码块</strong></font>，它依次检查每个条件测试，直到遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p></li><li><p>python 并<font color="#FF7F00"><strong>不支持 switch 语句</strong></font>，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p></li><li><p>设置if 语句的格式。在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如== 、&gt;= 和&lt;= 等比较运算符两边各添加一个空格，例如，<code>if age &lt; 4:</code> 要比<code>if age&lt;4:</code> 好。这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。</p></li><li><p>注意条件语句如果有多条缩进语句时<font color="#FF7F00"><strong>不能忘了冒号（ <code>:</code> ）</strong></font>，不像C语言或其它语言一样，if后面没有括号。</p></li></ol><p><br></p><p>书写格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="二-循环语句"><font color="#FF6347" face="Comic sans MS">二. 循环语句</font><a href="post/Python-ConditionalStatements-loops#二-循环语句"></a></h3><p><br></p><p>Python提供了for循环和while循环（在Python中<strong>没有do..while循环</strong>）:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">循环类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-while-loop.html" target="_blank" rel="noopener">while 循环</a></font></td><td style="text-align:left">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td></tr><tr><td style="text-align:center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-for-loop.html" target="_blank" rel="noopener">for 循环</a></font></td><td style="text-align:left">重复执行语句</td></tr><tr><td style="text-align:center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-nested-loops.html" target="_blank" rel="noopener">嵌套循环</a></font></td><td style="text-align:left">你可以在while循环体中嵌套for循环</td></tr></tbody></table></div></div><p><br></p><p><strong>循环控制语句</strong><br>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">循环类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-break-statement.html" target="_blank" rel="noopener">break 语句</a></font></td><td style="text-align:left">在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td style="text-align:center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-continue-statement.html" target="_blank" rel="noopener">continue 语句</a></font></td><td style="text-align:left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td></tr><tr><td style="text-align:center"><font color="#00B2EE"><a href="http://www.runoob.com/python/python-pass-statement.html" target="_blank" rel="noopener">pass 语句</a></font></td><td style="text-align:left">pass是空语句，是为了保持程序结构的完整性。</td></tr></tbody></table></div></div><p><br></p><h4 id="2-1-While-循环语句"><font color="#3CB371" face="Comic sans MS">2.1 While 循环语句</font><a href="post/Python-ConditionalStatements-loops#2-1-While-循环语句"></a></h4><p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（Null）的值均为True。当判断条件假False时，循环结束。其基本形式为（<strong>注意并没有括号</strong>）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> 判断条件：    执行语句……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br></p><p>Gif 演示 Python while 语句执行过程：</p><div class="article-img"><p><img src="https://i.loli.net/2019/03/01/5c789f82d8f65.gif" alt="loop-over-python-list-animation.gif" data-zoomable></p></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>循环使用 else 语句：</strong></font><p>在 python 中，while … else 在循环条件为 False 时执行 else 语句块：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is  less than 5"</span><span class="token punctuation">)</span>   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is not less than 5"</span><span class="token punctuation">)</span>运行结果：<span class="token number">0</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">1</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">2</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">3</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">4</span>  <span class="token keyword">is</span>  less than <span class="token number">5</span> <span class="token number">5</span>  <span class="token keyword">is</span> <span class="token operator">not</span> less than <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="2-2-for-in-语句"><font color="#3CB371" face="Comic sans MS">2.2 for..in 语句</font><a href="post/Python-ConditionalStatements-loops#2-2-for-in-语句"></a></h4><ol><li><p>Python for循环可以遍历任何序列的项目，如一个<font color="#FF7F00"><strong>列表</strong></font>或者一个<font color="#FF7F00"><strong>字符串</strong></font>。</p></li><li><p>Python 中的 for 语句和 C 或 Pascal 中的略有不同。通常的循环可能会依据一个等差数值步进过程（如 Pascal），或由用户来定义迭代步骤和中止条件（如 C ），Python 的 for 语句依据任意序列（列表或字符串）中的子项，按它们在序列中的顺序来进行迭代。</p></li><li><p>在迭代过程中修改迭代序列不安全（只有在使用列表这样的可变序列时才会有这样的情况）。如果你想要修改你迭代的序列（例如，复制选择项），你可以迭代它的复本。使用切割标识就可以很方便的做到这一点</p></li></ol><p><br></p><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>for…in语句处理字符串和列表不同：</strong></font></p><ol><li><strong>处理列表：</strong><font color="#FF7F00"><strong>每次取列表的一个元素赋给 in 前面的变量</strong></font>；</li><li><strong>处理字符串：</strong><font color="#FF7F00"><strong>每次取字符串的一个字符赋给 in 前面的变量</strong></font>；</li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'beauty'</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>运行结果：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> b e a u t y <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><font color="#FF7F00"><strong>上例列表 for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。这就像把序列中的每一个数(或对象)分配给x，一次一个,然后为每个x值执行语句块。</strong></font></blockquote><p><br></p><h4 id="2-2-break、continue、pass-语句"><font color="#3CB371" face="Comic sans MS">2.2 break、continue、pass 语句</font><a href="post/Python-ConditionalStatements-loops#2-2-break、continue、pass-语句"></a></h4><p><font color="#FF7F00"><strong>break语句：</strong></font> 在循环中，可以提前退出循环。</p><p><font color="#FF7F00"><strong>break语句：</strong></font> 在循环过程中，跳过当前的这次循环，直接开始下一次循环。</p><p><font color="#FF7F00"><strong>pass语句：</strong></font> pass 是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</p><p><br>    </p><p>Python 语言 pass 语句语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># 输出 Python 的每个字母</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'h'</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是 pass 块'</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前字母 :'</span><span class="token punctuation">,</span> letter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Good bye!'</span><span class="token punctuation">)</span>运行结果：当前字母 <span class="token punctuation">:</span> P 当前字母 <span class="token punctuation">:</span> y 当前字母 <span class="token punctuation">:</span> t 这是 <span class="token keyword">pass</span> 块 当前字母 <span class="token punctuation">:</span> h 当前字母 <span class="token punctuation">:</span> o 当前字母 <span class="token punctuation">:</span> n Good bye! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得冒号和换行的缩进呀…(｡◕︎‿◕︎)ﾉﾟ･ﾟ･&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-列表、元组、字典、集合</title>
    <link href="Treecatee.gitgub.io/post/python-list-tuple-dict-set/"/>
    <id>Treecatee.gitgub.io/post/python-list-tuple-dict-set/</id>
    <published>2019-02-28T12:28:00.000Z</published>
    <updated>2019-03-02T09:10:23.177Z</updated>
    
    <content type="html"><![CDATA[<p>Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>Python 列表、元组、字典、集合</strong></font> </center><p><br></p><p><br></p><h3 id="一-认识列表"><font color="#FF6347" face="Comic sans MS">一. 认识列表</font><a href="post/Python-list-tuple-dict-set#一-认识列表"></a></h3><p><br></p><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>列表（list）是什么：</strong></font></p><ol><li>序列是Python中最基本的数据结构。</li><li>在Python中，用方括号 [ ] 来表示列表，并用逗号来分隔其中的元素。并且<font color="#FF7F00"><strong>列表的数据项（各个元素）不需要具有相同的类型</strong></font>。</li><li>序列中的每个元素都分配一个数字 - 它的位置，即索引，<font color="#FF7F00"><strong>第一个索引是0，第二个索引是1，依此类推</strong></font>。<ol><li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li><li>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</li></ol></li><li>把列表当作堆栈使用。涉及的方法有：append()、pop()</li><li>访问和使用列表可以使用切片。[a:b]</li><li>把列表当作队列使用（不过使用起来较麻烦，可自行百度）。</li><li>列表可以<font color="#FF7F00"><strong>嵌套使用</strong></font>。</li><li>列表复制是这样的：<code>list2 = list1[:]</code></li><li>获取列表的索引值：<code>a = list.index(&quot;String&quot;)</code></li></ol></blockquote><p><br></p><p>定义列表的示例：</p><pre class="line-numbers language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="二-切片"><font color="#FF6347" face="Comic sans MS">二. 切片</font><a href="post/Python-list-tuple-dict-set#二-切片"></a></h3><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>切片和索引：</strong></font></p><ol><li>与字符串的索引一样，列表索引从0开始。(在字符串那个章节总结过)列表可以进行截取、组合等；</li><li>你还可以处理列表的部分元素——Python称之为切片。使用下标索引来访问列表中的值，同样你也可以使用方括号[ ]的形式截取字符； [x:y]</li><li>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在<font color="#FF7F00"><strong>到达你指定的第二个索引前面的元素后停止</strong></font>。要输出列表中的前三个元素，需要指定索引<code>0~3</code>，这将输出分别为0 、1 和2 的元素； [1:5]表示索引为1,2,3,4的四个元素</li><li>如果你没有指定第一个索引，Python将自动从列表开头开始； [ :6]</li><li>要让切片终止于列表末尾，也可使用类似的语法，即不指定第二个索引； [2: ]<br>无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。</li><li>如果要遍历列表的部分元素，可在for 循环中使用切片。</li></ol></blockquote><p><br></p><p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p><pre class="line-numbers language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token operator">//</span>类似字符串一样使用索引<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list1[0]: "</span><span class="token punctuation">,</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token operator">//</span>输出第一个元素<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list2[1:5]: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">//</span>输出索引为<span class="token number">1</span>到（<span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span>）的元素<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"list2[:4]: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">//</span>前者输出从第<span class="token number">1</span>个元素到索引为（<span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span>）的元素                                    <span class="token operator">//</span>后者输出索引为<span class="token number">1</span>到最后一个元素运行结果：chemistry <span class="token number">1997</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  physics list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> list2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="三-更新列表"><font color="#FF6347" face="Comic sans MS">三. 更新列表</font><a href="post/Python-list-tuple-dict-set#三-更新列表"></a></h3><h4 id="3-1-处理元素"><font color="#3CB371" face="Comic sans MS">3.1 处理元素</font><a href="post/Python-list-tuple-dict-set#3-1-处理元素"></a></h4><p>附加参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/wl404/p/7884665.html" target="_blank" rel="noopener">列表使用大全</a>]</font> <font color="#00B2EE">[<a href="https://blog.csdn.net/viviliao_/article/details/79518219" target="_blank" rel="noopener">Python3列表元素的修改</a>]</font> </p><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>1. 按索引来使用的方法</strong></font></p><ol><li><font color="#FF7F00">append(‘String’)：</font> 将元素string追加到列表末尾，即把一个元素添加到堆栈顶；</li><li><font color="#FF7F00">pop(X)：</font> 删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。若果不指定则默认删除末尾的元素；</li><li><font color="#FF7F00">insert(X, “String”)：</font> 将元素String插入到索引为X的位置，原来元素从索引为X往后移；</li><li><font color="#FF7F00">del list[X]：</font> 删除列表list索引为X的元素；</li><li><font color="#FF7F00">len(list)：</font> 是个函数，统计列表list元素的个数，和在字符串中使用一样；</li><li>del和pop()的区别在于：del删除的元素不可以再继续使用了，但是pop()有个返回值，因为当作栈使用，它删除的元素还可以在其他地方继续使用；</li><li><font color="#FF7F00">reverse() ：</font> 按元素顺序倒转；</li><li><font color="#FF7F00">sort() ：</font> 是方法，对列表进行永久性排序，前提是列表中所有元素数据类型一样；</li><li><font color="#FF7F00">sorted() ：</font> 注意这是个函数，对列表进行临时排序，若列表中所有元素数据类型不一样会报错；</li></ol></blockquote><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>2. 按值来使用的方法</strong></font></p><ol><li><font color="#FF7F00"><strong>remove(“String”)</strong>：</font> 删除列表中值为String的元素。注意：方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</li></ol></blockquote><p><br></p><p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p><pre class="line-numbers language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span>      <span class="token operator">//</span>append<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>a <span class="token operator">=</span> list2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>          <span class="token operator">//</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">del</span> list2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>              <span class="token operator">//</span><span class="token keyword">del</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list2<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>         <span class="token operator">//</span>insert<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token operator">//</span>len<span class="token punctuation">(</span><span class="token punctuation">)</span>list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span>        <span class="token operator">//</span>removelist1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token number">6</span> <span class="token punctuation">[</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token operator">//</span>临时排序<span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>   <span class="token operator">//</span>永久排序 s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token operator">//</span>倒序运行结果：<span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'scheme'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="3-2-嵌套使用列表"><font color="#3CB371" face="Comic sans MS">3.2 嵌套使用列表</font><a href="post/Python-list-tuple-dict-set#3-2-嵌套使用列表"></a></h4><p><br></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">4</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了。<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span> php php <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="四-列表常用的方法和函数"><font color="#FF6347" face="Comic sans MS">四. 列表常用的方法和函数</font><a href="post/Python-list-tuple-dict-set#四-列表常用的方法和函数"></a></h3><h4 id="4-1-列表操作符"><font color="#3CB371" face="Comic sans MS">4.1 列表操作符</font><a href="post/Python-list-tuple-dict-set#4-1-列表操作符"></a></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。<br>如下所示：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">Python表达式</th><th style="text-align:left">结果</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">len([1, 2, 3])</td><td style="text-align:left">3</td><td style="text-align:left">长度</td></tr><tr><td style="text-align:left">[1, 2, 3] + [4, 5, 6]</td><td style="text-align:left">[1, 2, 3, 4, 5, 6]</td><td style="text-align:left">组合</td></tr><tr><td style="text-align:left">[‘Hi!’] * 4</td><td style="text-align:left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td style="text-align:left">重复</td></tr><tr><td style="text-align:left">3 in [1, 2, 3]</td><td style="text-align:left">True</td><td style="text-align:left">元素是否存在于列表中</td></tr><tr><td style="text-align:left">for x in [1, 2, 3]: print x,</td><td style="text-align:left">1 2 3</td><td style="text-align:left">迭代</td></tr></tbody></table></div></div><p><br></p><p><br></p><h4 id="4-2-列表函数-amp-方法"><font color="#3CB371" face="Comic sans MS">4.2 列表函数&amp;方法</font><a href="post/Python-list-tuple-dict-set#4-2-列表函数-amp-方法"></a></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-lists.html" target="_blank" rel="noopener">Python列表函数&amp;方法</a>]</font></p><p>列表中Python包含以下函数:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">函数</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">cmp(list1, list2)<br>比较两个列表的元素</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">len(list)<br>列表元素个数</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">max(list)<br>返回列表元素最大值</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">min(list)<br>返回列表元素最小值</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">list(seq)<br>将元组转换为列表</td></tr></tbody></table></div></div><p><br></p><p>Python包含以下方法:</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">方法</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">list.append(obj)<br>在列表末尾添加新的对象</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">list.count(obj)<br>统计某个元素在列表中出现的次数</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">list.extend(seq)<br>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">list.index(obj)<br>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">list.insert(index, obj)<br>将对象插入列表</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">list.pop([index=-1])<br>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">list.remove(obj)<br>移除列表中某个值的第一个匹配项</td></tr><tr><td style="text-align:center">8</td><td style="text-align:left">list.reverse()<br>反向列表中元素</td></tr><tr><td style="text-align:center">9</td><td style="text-align:left">list.sort(cmp=None, key=None, reverse=False)<br>对原列表进行排序</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="五-元组"><font color="#FF6347" face="Comic sans MS">五. 元组</font><a href="post/Python-list-tuple-dict-set#五-元组"></a></h3><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>什么是元组tuple：</strong></font></p><ol><li>Python的元组与列表类似，不同之处在于元组的元素不能修改。</li><li>元组使用小括号<code>()</code>，列表使用方括号<code>[]</code>。</li><li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</li><li>当括号中只有一个数字没有逗号时，既表示一个数字也可以便是一个元组，又可以表示数学公式中的小括号，这就产生了歧义。这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时<font color="#FF7F00"><strong>必须加一个逗号</strong></font>。</li></ol></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>一、定义元组</strong></font><pre class="line-numbers language-python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span>tup3 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><br></p><p>创建空元组：<code>tup1 = ()</code></p><p>元组中只包含一个元素时，需要在元素后面添加逗号。<code>tup1 = (50,)</code></p><p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、使用元组</strong></font><ol><li>元组可以使用下标索引来访问元组中的值，如下：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"tup1[0]: "</span><span class="token punctuation">,</span> tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"tup2[1:5]: "</span><span class="token punctuation">,</span> tup2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>以上实例输出结果：tup1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  physicstup2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>元组的值不允许修改，但是可以进行运算，比如连接用加号（+），重复用星号（*）。</p></li><li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token keyword">print</span> tup<span class="token keyword">del</span> tup<span class="token keyword">print</span> <span class="token string">"After deleting tup : "</span><span class="token keyword">print</span> tup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'physics'</span><span class="token punctuation">,</span> <span class="token string">'chemistry'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>After deleting tup <span class="token punctuation">:</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span> tupNameError<span class="token punctuation">:</span> name <span class="token string">'tup'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="4"><li><font color="#FF7F00"><strong>最后来看一个“可变的”tuple：</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>运行结果：<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？<br>别急，我们先看看定义的时候tuple包含的3个元素：</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/28/5c77b1cc56635.png" alt="0.png" data-zoomable></p></div><p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/28/5c77b1f4c3628.png" alt="0 (1).png" data-zoomable></p></div><p><br></p><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>三、元组运算符</strong></font><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">Python表达式</th><th style="text-align:left">结果</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">len((1, 2, 3))</td><td style="text-align:left">3</td><td style="text-align:left">计算元素个数</td></tr><tr><td style="text-align:left">(1, 2, 3) + (4, 5, 6)</td><td style="text-align:left">(1, 2, 3, 4, 5, 6)</td><td style="text-align:left">连接</td></tr><tr><td style="text-align:left">(‘Hi!’,) * 4</td><td style="text-align:left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td style="text-align:left">复制</td></tr><tr><td style="text-align:left">3 in (1, 2, 3)</td><td style="text-align:left">True</td><td style="text-align:left">元素是否存在</td></tr><tr><td style="text-align:left">for x in (1, 2, 3): print x,</td><td style="text-align:left">1 2 3</td><td style="text-align:left">迭代</td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>四、元组内置函数</strong></font><p>Python元组包含了以下内置函数</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">函数</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">cmp(tuple1, tuple2)<br>比较两个元组元素。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">len(tuple)<br>计算元组元素个数。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">max(tuple)<br>返回元组中元素最大值。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">min(tuple)<br>返回元组中元素最小值。</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">tuple(seq)<br>将列表转换为元组。</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="六-字典"><font color="#FF6347" face="Comic sans MS">六. 字典</font><a href="post/Python-list-tuple-dict-set#六-字典"></a></h3><h4 id="6-1-字典的定义"><font color="#3CB371" face="Comic sans MS">6.1 字典的定义</font><a href="post/Python-list-tuple-dict-set#6-1-字典的定义"></a></h4><blockquote><p><font color="#00B2EE" face="Comic sans MS"><strong>关于字典dict：</strong></font></p><ol><li>字典是另一种可变容器模型，且可存储任意类型对象；</li><li>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中；<code>d = {key1 : value1, key2 : value2 }</code></li><li>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一；</li><li>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组；</li><li>第一个键定义为什么数据类型，后面所有的键必须定义为相同的数据类型；</li><li>访问字典里的值，把相应的键放入熟悉的方括弧即可，<code>dict[key]</code></li></ol></blockquote><p><br></p><h4 id="6-2-字典的修改"><font color="#3CB371" face="Comic sans MS">6.2 字典的修改</font><a href="post/Python-list-tuple-dict-set#6-2-字典的修改"></a></h4><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p><font color="#00B2EE" face="Comic sans MS"><strong>一、添加键—值对、修改字典</strong></font><br><br><br><br><font color="#FF7F00"><strong>字典是一种动态结构，可随时在其中添加键—值对</strong></font>。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。<br><br><br>如下示例，我们先建立一个空字典，然后向里面添加元素（键值对）并修改：<br><font color="#FF7F00"></font><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'green'</span>a<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">666</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：green <span class="token number">5</span><span class="token number">666</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、删除键—值对</strong></font><p>能删单一的元素也能清空字典，清空只需一项操作。</p><blockquote><p><font color="#FF7F00"><strong>删除字典可以使用del或者pop()。</strong></font></p><ol><li><font color="#FF7F00"><strong>要删除一个key:</strong></font><ol><li>用pop(key)方法，对应的value也会从dict中删除</li><li>可使用del 语句将相应的键—值对彻底删除。使用del 语句时，必须指定字典名和要删除的键。<code>del dict[&#39;key&#39;]</code></li></ol></li><li><font color="#FF7F00"><strong>删除整个字典：</strong></font>del dict 则dict这个字典被删除了</li></ol></blockquote><p><br></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span><span class="token keyword">del</span> dict<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 删除键是'Name'的条目</span>dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Class'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 清空词典所有条目</span><span class="token keyword">del</span> dict          <span class="token comment" spellcheck="true"># 删除词典</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：<span class="token number">7</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"1.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token string">'type'</span> object <span class="token keyword">is</span> <span class="token operator">not</span> subscriptable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="6-3-字典的遍历"><font color="#3CB371" face="Comic sans MS">6.3 字典的遍历</font><a href="post/Python-list-tuple-dict-set#6-3-字典的遍历"></a></h4><font color="#00B2EE" face="Comic sans MS"><strong>一、判断字典中</strong><font color="red"><strong>某个键</strong></font><strong>是否存在</strong></font><blockquote><p><font color="#FF7F00"><strong>方法：</strong></font></p><ol><li>通过in判断key是否存在；</li><li>通过dict提供的get()方法，如果key不存在，可以返回None，或者返回自己指定的value。</li></ol></blockquote><p><br></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token string">'Name'</span> <span class="token keyword">in</span> dictb <span class="token operator">=</span> <span class="token string">'Year'</span> <span class="token keyword">in</span> dict<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>c <span class="token operator">=</span> dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'如果不存在，这里是返回信息'</span><span class="token punctuation">)</span>d <span class="token operator">=</span> dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Year'</span><span class="token punctuation">,</span><span class="token string">'如果不存在，这里是返回信息'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>运行结果：<span class="token boolean">True</span><span class="token boolean">False</span>Zara如果不存在，这里是返回信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、遍历字典中的所有键</strong></font><p>在不需要使用字典中的值时，方法keys() 很有用。</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>      <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>      <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>  <span class="token keyword">for</span> name <span class="token keyword">in</span> f<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：JenSarahEdwardPhil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>三、遍历字典中的所有值</strong></font><p>如果你感兴趣的主要是字典包含的值，可使用方法values() ，它返回一个值列表，而不包含任何键。</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>    <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token keyword">for</span> g <span class="token keyword">in</span> f<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：PythonCRubyPython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="6-4-字典的各种嵌套"><font color="#3CB371" face="Comic sans MS">6.4 字典的各种嵌套</font><a href="post/Python-list-tuple-dict-set#6-4-字典的各种嵌套"></a></h4><p>请自行查阅Python编程：从入门到实践 6.4</p><p><br></p><h4 id="6-5-字典内置函数-amp-方法"><font color="#3CB371" face="Comic sans MS">6.5 字典内置函数&amp;方法</font><a href="post/Python-list-tuple-dict-set#6-5-字典内置函数-amp-方法"></a></h4><p>可查阅：<font color="#00B2EE">[<a href="http://www.runoob.com/python/python-dictionary.html" target="_blank" rel="noopener">Python字典函数&amp;方法</a>]</font></p><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>一、Python字典包含了以下内置函数：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">函数</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">cmp(dict1, dict2)<br>比较两个字典元素。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">len(dict)<br>计算字典元素个数，即键的总数。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">str(dict)<br>输出字典可打印的字符串表示。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">type(variable)<br>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python字典包含了以下内置方法：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">方法</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">dict.clear()<br>删除字典内所有元素</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">dict.copy()<br>返回一个字典的浅复制</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">dict.fromkeys(seq[, val])<br>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">dict.has_key(key)<br>如果键在字典dict里返回true，否则返回false</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">dict.keys()<br>以列表返回一个字典所有的键</td></tr><tr><td style="text-align:center">8</td><td style="text-align:left">dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td style="text-align:center">9</td><td style="text-align:left">dict.update(dict2)<br>把字典dict2的键/值对更新到dict里</td></tr><tr><td style="text-align:center">10</td><td style="text-align:left">dict.values()<br>以列表返回字典中的所有值</td></tr><tr><td style="text-align:center">11</td><td style="text-align:left">pop(key[,default])<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td style="text-align:center">12</td><td style="text-align:left">popitem()<br>随机返回并删除字典中的一对键和值。</td></tr></tbody></table></div></div><p><br></p><p><br></p><h3 id="七-集合"><font color="#FF6347" face="Comic sans MS">七. 集合</font><a href="post/Python-list-tuple-dict-set#七-集合"></a></h3><blockquote><p><font color="#FF7F00"><strong>集合是什么：</strong></font></p><ol><li>集合和字典类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在集合中，没有重复的key；</li><li>集合可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集，差等操作；</li><li>基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算；</li><li>大括号或 set() <strong>函数</strong>可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典。</li><li>注意：<font color="#FF7F00"><strong>set()只能放一个参数，它会将里面的字符串拆成字符，并且每个字符都是无序的（集合的属性）</strong></font>；</li><li>如果集合中包含多喝不可拆的元素，则必须用{}来定义集合。</li></ol></blockquote><p><br></p><p>仔细分析如下代码：</p><pre class="line-numbers language-python"><code class="language-python">basket <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'apple'</span><span class="token punctuation">,</span>     <span class="token string">'orange'</span><span class="token punctuation">,</span>     <span class="token string">'apple'</span><span class="token punctuation">,</span>     <span class="token string">'pear'</span><span class="token punctuation">,</span>     <span class="token string">'orange'</span><span class="token punctuation">,</span>     <span class="token string">'banana'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span>c <span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token string">'我们'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token punctuation">)</span> 运行结果：<span class="token punctuation">{</span><span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'们'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-字符编码&amp;字符串&amp;格式化</title>
    <link href="Treecatee.gitgub.io/post/python-coding/"/>
    <id>Treecatee.gitgub.io/post/python-coding/</id>
    <published>2019-02-27T17:15:48.000Z</published>
    <updated>2019-02-28T03:38:54.922Z</updated>
    
    <content type="html"><![CDATA[<p>字符编码、字符串(๑°⌓︎°๑)<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>Python-字符编码、字符串、格式化</strong></font> </center><p><br></p><p><br></p><h3 id="一-字符编码"><font color="#FF6347" face="Comic sans MS">一. 字符编码</font><a href="post/Python-Coding#一-字符编码"></a></h3><ol><li><p>我们已经讲过了，字符串也是一种数据类型，但是，<strong>字符串</strong>比较特殊的是还有一个<strong>编码</strong>问题。</p></li><li><p><font color="#FF7F00"><strong>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong></font>。最早的计算机在设计时采用8个比特（<strong><code>8 bit</code></strong>）作为一个字节（<strong><code>1 byte</code></strong>）。</p><ol><li>所以，<strong><code>一个字节</code></strong>能表示的最大的整数就是<strong><code>255</code></strong>（二进制11111111=十进制255）；</li><li>如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，<strong><code>4个字节</code></strong>可以表示的最大整数是<strong><code>4294967295</code></strong>。</li></ol></li><li><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<font color="#FF7F00"><strong>ASCII编码</strong></font>，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p></li><li><p>但是要处理中文显然一个字节是不够的，<strong>至少需要两个字节</strong>，而且还不能和ASCII编码冲突，所以，<font color="#FF7F00"><strong>中国制定了GB2312编码，用来把中文编进去</strong></font>。</p></li><li><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p></li><li><p>因此，<code>Unicode</code>应运而生。<font color="#FF7F00"><strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong></font>。</p><ol><li>Unicode标准也在不断发展，但最常用的是<font color="#00B2EE"><strong>用两个字节表示一个字符</strong></font>（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</li><li><p>现在，捋一捋ASCII编码和Unicode编码的区别：<font color="#00B2EE"><strong>ASCII编码是1个字节，而Unicode编码通常是2个字节</strong></font>。</p><ol><li>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li><li>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符’0’(‘零’)和整数0(零)是不同的；</li><li>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li><li>你可以猜测，如果<font color="red"><strong>把ASCII编码的A用Unicode编码，只需要在前面补0(零)就可以</strong></font>，因此，A的Unicode编码是00000000 01000001。</li></ol></li><li><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，<font color="#00B2EE"><strong>用Unicode编码比ASCII编码需要多一倍的存储空间</strong></font>，在存储和传输上就十分不划算。</p></li><li>所以，<strong>本着节约的精神</strong>，又出现了<font color="#00B2EE"><strong>把Unicode编码转化为“可变长编码”的UTF-8编码</strong></font>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</li></ol></li></ol><div class="article-bounded"><div class="article-table"><table><tbody><tr><td style="text-align:center">字符</td><td style="text-align:center">ASCII</td><td style="text-align:center">Unicode</td><td style="text-align:center">UTF-8</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">1000001</td><td style="text-align:center">00000000 01000001</td><td style="text-align:center">01000001</td></tr><tr><td style="text-align:center">中</td><td style="text-align:center">x</td><td style="text-align:center">01001110 00101101</td><td style="text-align:center">11100100 10111000 10101101</td></tr></tbody></table></div></div><blockquote><ol><li>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是<font color="#FF7F00"><strong>ASCII编码实际上可以被看成是UTF-8编码的一部分</strong></font>，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</li></ol></blockquote><p><strong>总结一下现在计算机系统通用的字符编码工作方式：</strong></p><ol><li><font color="#FF7F00"><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong></font>。</li><li>举例：用记事本编辑(计算机内存中)的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8(保存到文件硬盘或者需要传输)</li></ol><p><br></p><p>PS：所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p><p><br></p><p><br></p><h3 id="二-代码编码和文件编码的设置"><font color="#FF6347" face="Comic sans MS">二. 代码编码和文件编码的设置</font><a href="post/Python-Coding#二-代码编码和文件编码的设置"></a></h3><blockquote><p><strong>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</strong><br>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code> 或者 <code>#coding=utf-8</code> 就行了<br>（<strong>注意：</strong><code>#coding=utf-8</code> 的 <code>=</code> 号两边不要空格。）</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token keyword">print</span> <span class="token string">"你好，世界"</span><span class="token punctuation">;</span>运行结果：你好，世界<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong></p><ol><li>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</li><li>注意：如果你使用编辑器，同时需要设置 py 文件存储的格式为 UTF-8</li></ol></blockquote><p><br></p><p><br></p><h3 id="三-字符与编码的转换"><font color="#FF6347" face="Comic sans MS">三. 字符与编码的转换</font><a href="post/Python-Coding#三-字符与编码的转换"></a></h3><p>在最新的Python 3版本中，<font color="#FF7F00"><strong>字符串是以Unicode编码的</strong></font>，也就是说，Python的字符串支持多语言（字符串可以写任意国家文字）。</p><p><br></p><h4 id="3-1-字符与十进制编码的转换"><font color="#3CB371" face="Comic sans MS">3.1 字符与十进制编码的转换</font><a href="post/Python-Coding#3-1-字符与十进制编码的转换"></a></h4><blockquote><p><strong>使用函数：</strong></p><ol><li>ord()：将字符转换成其对应的整数（十进制），注意不是字符串；</li><li>chr()：将十进制整数转换成其对应的字符。</li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span>ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>b<span class="token operator">=</span>chr<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：<span class="token number">65</span> x <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="3-2-不同编码之间的转换"><font color="#3CB371" face="Comic sans MS">3.2 不同编码之间的转换</font><a href="post/Python-Coding#3-2-不同编码之间的转换"></a></h4><p>由于Python的字符串类型是str，<font color="#FF7F00"><strong>在内存中以Unicode表示，一个字符对应若干个字节</strong></font>。如果要在网络上传输，或者保存到磁盘上，就需要<font color="#FF7F00"><strong>把str变为以字节为单位的bytes</strong></font>。</p><p>Python对bytes类型的数据用带<code>b前缀</code>的<font color="#FF7F00"><strong>单引号</strong></font>或<font color="#FF7F00"><strong>双引号</strong></font>表示：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> b<span class="token string">'ABC'</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>运行结果：b<span class="token string">'ABC'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结论：</strong>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但<font color="#FF7F00"><strong>bytes的每个字符都只占用一个字节</strong></font>。</p></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>不同编码之间的转换使用函数：</strong></font><ol><li><strong>decode()：</strong> 解码，将其他编码的字符串解码成unicode编码；</li><li><strong>encode()：</strong> 转码，将unicode编码的字符串转码成其他编码。</li><li><strong>decode(“utf-8”, errors=”ignore”) ：</strong> 忽略其中有异常的编码，仅显示有效的编码；</li><li><strong>decode(“utf-8”, errors=”replace”)：</strong> 替换其中异常的编码，这个相对来可能一眼就知道那些字符编码出问题了；</li><li><strong>len()：</strong> 计算的是str的字符数，如果换成bytes，len()函数就计算字节数。</li></ol><p><br></p><p>资料查阅：<font color="#00B2EE">[<a href="https://blog.csdn.net/xw_classmate/article/details/51934723" target="_blank" rel="noopener">Python中的编码（encode）与解码（decode）程</a>]</font></p><p><br></p><p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为<font color="#FF7F00"><strong>中间编码</strong></font>，即先将其他编码的字符串解码（<code>decode</code>）成unicode，再从unicode编码（<code>encode</code>）成另一种编码。</p><p><br></p><p>举例1：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：b<span class="token string">'ABC'</span> b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>   File <span class="token string">"C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_21.py"</span><span class="token punctuation">,</span> line <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> UnicodeEncodeError<span class="token punctuation">:</span> <span class="token string">'ascii'</span> codec can't encode characters <span class="token keyword">in</span> position <span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> ordinal <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><p>第三个输出报错是因为含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p></blockquote><p><br></p><p>举例2：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes    </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'ABC'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：ABC 中文 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>   File <span class="token string">"C:\Users\Alvin\AppData\Local\Temp\learn_python_q5t__kzk_py\test_22.py"</span><span class="token punctuation">,</span> line <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>     <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> codec can't decode byte <span class="token number">0xff</span> <span class="token keyword">in</span> position <span class="token number">3</span><span class="token punctuation">:</span> invalid start byte <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第三个输出报错是因为bytes中包含无法解码的字节，decode()方法会报错。</p></blockquote><p><br></p><p>举例3：如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：中 b<span class="token string">'\xe4\xb8\xad'</span> 中 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>举例4：<code>len()</code>函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>b<span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token number">3</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><blockquote><ol><li>可见，1个中文字符经过UTF-8编码后通常<font color="#FF7F00"><strong>会占用3个字节，而1个英文字符只占用1个字节</strong></font>。</li><li>在操作字符串时，我们经常遇到str和bytes的互相转换。<font color="#FF7F00"><strong>为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换</strong></font>。</li></ol></blockquote><p><br></p><p><br></p><h3 id="四-格式化"><font color="#FF6347" face="Comic sans MS">四. 格式化</font><a href="post/Python-Coding#四-格式化"></a></h3><blockquote><p><font color="#FF7F00"><strong>重要总结：</strong></font></p><ol><li>一个常见的问题是如何输出格式化的字符串。<ol><li>我们经常会输出类似”亲爱的<code>xxx</code>你好！你<code>xx</code>月的话费是<code>xx</code>，余额是<code>xx</code>“之类的字符串，而<code>xxx</code>的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</li></ol></li><li>在Python中，采用的格式化方式和C语言是一致的，用<font color="#FF7F00"><strong>%</strong></font>实现。</li><li>%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</li><li>格式化整数还可以指定<font color="#FF7F00"><strong>是否补0和整数</strong></font>；浮点数可以指定<font color="#FF7F00"><strong>小数的位数</strong></font>。</li><li>要输出%，用%对其进行转义，即用%%来表示一个%。</li><li>另一种格式化字符串的方法是使用字符串的<font color="#FF7F00"><strong>format()方法</strong></font>，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多</li></ol></blockquote><p><br></p><p>常见的占位符有：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:center">替换内容</th></tr></thead><tbody><tr><td style="text-align:center">%d</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数</td></tr></tbody></table></div></div><p><br></p><p>示例代码：（里面的“//”并不代表注释符）</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token string">'world'</span>    <span class="token operator">//</span> 替换一个不使用括号b <span class="token operator">=</span> <span class="token string">'Hi, %s, you have $%d.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>   <span class="token operator">//</span> 替换多个使用括号c <span class="token operator">=</span> <span class="token string">'%6d-%02d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">//</span>  <span class="token operator">%</span><span class="token number">6d</span>  表示输出<span class="token number">3</span>之前有（<span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span>）个空格输出                         <span class="token operator">//</span>  <span class="token operator">%</span><span class="token number">05d</span> 表示输出<span class="token number">1</span>之前有（<span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span>）个<span class="token number">0</span>输出d <span class="token operator">=</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span> <span class="token number">3.145926</span>    <span class="token operator">//</span>  <span class="token operator">%</span><span class="token punctuation">.</span><span class="token number">2f</span> 表示输出的浮点数保留两位小数，第三位小数<span class="token operator">>=</span><span class="token number">5</span>就向前进<span class="token number">1</span>e <span class="token operator">=</span> <span class="token string">'growth rate: %d %%'</span> <span class="token operator">%</span> <span class="token number">7</span>   <span class="token operator">//</span>  转义，用<span class="token operator">%</span><span class="token operator">%</span>表示一个<span class="token operator">%</span>输出f<span class="token operator">=</span><span class="token string">'Hello, {0}, 成绩提升了 {1:.1f}%'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">17.125</span><span class="token punctuation">)</span>                         <span class="token operator">//</span>  使用字符串format<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，注意括号里面的<span class="token number">1</span>的意义<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>运行结果：Hello<span class="token punctuation">,</span> world Hi<span class="token punctuation">,</span> Michael<span class="token punctuation">,</span> you have $<span class="token number">1000000</span><span class="token punctuation">.</span>      <span class="token number">3</span><span class="token operator">-</span><span class="token number">000000001</span> <span class="token number">3.15</span>growth rate<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token operator">%</span> Hello<span class="token punctuation">,</span> 小明<span class="token punctuation">,</span> 成绩提升了 <span class="token number">17.1</span><span class="token operator">%</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符编码、字符串(๑°⌓︎°๑)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-变量和数据类型</title>
    <link href="Treecatee.gitgub.io/post/python-variables-datatypes/"/>
    <id>Treecatee.gitgub.io/post/python-variables-datatypes/</id>
    <published>2019-02-27T12:00:39.000Z</published>
    <updated>2019-03-05T16:42:48.388Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个变量就是定义了一个指针！  ٩(ˊᗜˋ*)و<br>字符串内容很多，就很烦(っ ̯ -｡)<br><a id="more"></a></p><p><br></p><p><br></p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>变量和数据类型</strong></font> </center><p><br></p><p><br></p><h3 id="一-变量"><font color="#FF6347" face="Comic sans MS">一. 变量</font><a href="post/Python-Variables-DataTypes#一-变量"></a></h3><font color="#00B2EE" face="Comic sans MS"><strong>一、关于变量</strong></font><blockquote><ol><li><font face="Comic sans MS">变量存储在内存中的值。这就意味着在创建变量时会<strong>在内存中开辟一个空间</strong>。</font></li><li><font face="Comic sans MS">基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</font></li><li><font face="Comic sans MS">Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li><li><font face="Comic sans MS">在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</font></li></ol></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、变量的赋值</strong></font><blockquote><ol><li><font face="Comic sans MS">Python 中的变量赋值<font color="#FF7F00"><strong>不需要类型声明</strong></font>。</font></li><li><font face="Comic sans MS">每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</font></li><li><font face="Comic sans MS">每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</font></li><li><font face="Comic sans MS">变量的赋值分为：<font color="#FF7F00"><strong>单个变量赋值</strong></font>和<font color="#FF7F00"><strong>多个变量赋值</strong></font> </font></li></ol></blockquote><p><br></p><font face="Comic sans MS"><strong>单个变量赋值：</strong>使用等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</font><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"Hello Python world!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><font face="Comic sans MS">我们添加了一个名为message的<strong>变量</strong>。每个变量都存储了一个<strong>值</strong>——与变量相关联的信息。在这里，存储的值为文本“Hello Python world!”。</font></blockquote><p><br></p><font face="Comic sans MS"><strong>多个变量赋值：</strong></font><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><font face="Comic sans MS">或者</font><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"john"</span><span class="token comment" spellcheck="true">#以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 "john" 分配给变量 c。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>三、变量的命名和使用</strong></font><blockquote><font color="#FF7F00"><strong>请务必牢记下述有关变量的规则：</strong></font><br>1. <font face="Comic sans MS">变量名只能包含<font color="#FF7F00"><strong>字母、数字</strong>和<strong>下划线</strong></font>。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。 </font><br>2. <font face="Comic sans MS"><font color="#FF7F00"><strong>变量名不能包含空格</strong></font>，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。</font><br>3. <font face="Comic sans MS"><font color="#FF7F00"><strong>不要将Python关键字和函数名用作变量名</strong></font>，即不要使用Python保留用于特殊用途的单词，如print。</font><br>4. <font face="Comic sans MS">变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。</font><br>5. <font face="Comic sans MS"><font color="#FF7F00"><strong>慎用小写字母l和大写字母O</strong></font>，因为它们可能被人错看成数字1和0。</font><br>6. <font face="Comic sans MS">注意：就目前而言，<font color="#FF7F00"><strong>应使用小写的Python变量名</strong></font>。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。</font></blockquote><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>四、变量是一种动态语言</strong></font><br>&emsp;<br>代码示例：<br><font color="#00B2EE"></font><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>a <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true"># a是整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'ABC'</span> <span class="token comment" spellcheck="true"># a变为字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行结果：<span class="token number">123</span> ABC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font face="Comic sans MS">这种变量本身类型不固定的语言称之为<font color="red"><strong>动态语言</strong></font>，与之对应的是<font color="red"><strong>静态语言</strong></font>。和静态语言相比，<strong>动态语言更灵活</strong>，就是这个原因。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</font><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a是整数类型变量</span>a <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：不能把字符串赋给整型变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>五、Python的变量是Python的指针</strong></font> <p>可参考：<font color="#00B2EE">[<a href="https://www.cnblogs.com/hzwsj/p/5777973.html" target="_blank" rel="noopener">一切都是对象，一切都是指针，一切都是东西（python的编程哲学）</a>]</font><br>&emsp;<br>如下代码：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">5</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行输出：<span class="token number">1769134320</span> <span class="token number">1769134320</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font face="Comic sans MS">我们分别查一下他们的内存地址，发现地址是一样的。</font><blockquote><font face="Comic sans MS"><strong>于是我们可以这样理解：</strong></font><br>1. <font face="Comic sans MS"><font color="#FF7F00"><strong>python把一切数据，一切的一切都看作对象，在python中，没有变量，只有指针，要说变量，也是指针变量</strong></font>。</font><br>2. <font face="Comic sans MS">这样的变量还有如：<strong>列表</strong>，<strong>字典的值</strong>。</font><br>3. <font face="Comic sans MS"><font color="#FF7F00"><strong>但是字符串，数字等类型的变量，字典的键就是传值使用，不是指针，而是不可再改变的值</strong></font>。</font></blockquote><p>&emsp;<br><strong>举例子</strong></p><font color="#00B2EE">例子1：</font>当我们写：<br><font color="#00B2EE"></font><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'ABC'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><font face="Comic sans MS">时，Python解释器干了两件事情：</font><blockquote><ol><li><font face="Comic sans MS">在内存中创建了一个’ABC’的字符串；</font></li><li><font face="Comic sans MS">在内存中创建了一个名为a的变量，<strong>并把它指向’ABC’</strong></font></li></ol></blockquote><p>&emsp;</p><font color="#00B2EE">例子2：</font><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>a <span class="token operator">=</span> <span class="token string">'ABC'</span>b <span class="token operator">=</span> aa <span class="token operator">=</span> <span class="token string">'XYZ'</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：ABC <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font face="Comic sans MS">最后一行打印出变量b的内容到底是<strong><code>&#39;ABC&#39;</code></strong>呢还是<strong><code>&#39;XYZ&#39;</code></strong>？如果从数学意义上理解，就会错误地得出<strong><code>b</code></strong>和<strong><code>a</code></strong>相同，也应该是<strong><code>&#39;XYZ&#39;</code></strong>，但实际上<strong><code>b</code></strong>的值是<strong><code>&#39;ABC&#39;</code></strong>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</font><br>1. <font face="Comic sans MS">执行a = ‘ABC’，解释器创建了字符串’ABC’和变量a，<strong>并把a指向’ABC’</strong>：</font><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c760234f3b42.png" alt="1.png" data-zoomable></p></div><ol start="2"><li><font face="Comic sans MS">执行b = a，解释器创建了变量b，并把b指向a指向的字符串’ABC’：</font></li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c7602fa3c6f7.png" alt="0 (1).png" data-zoomable></p></div><ol start="3"><li><font face="Comic sans MS">执行a = ‘XYZ’，解释器创建了字符串’XYZ’，并把a的指向改为’XYZ’，但b并没有更改：</font></li></ol><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c7603411d5fc.png" alt="0 (2).png" data-zoomable></p></div><font face="Comic sans MS">所以，最后打印变量b的结果自然是’ABC’了。</font><p><br><br>&emsp;</p><h3 id="二-常量"><font color="#FF6347" face="Comic sans MS">二. 常量</font><a href="post/Python-Variables-DataTypes#二-常量"></a></h3><font face="Comic sans MS">所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，<strong>通常用全部大写的变量名表示常量</strong>：</font><pre class="line-numbers language-python"><code class="language-python">PI <span class="token operator">=</span> <span class="token number">3.14159265359</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><font face="Comic sans MS"><font color="#FF7F00"><strong>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变</strong></font>，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</font><font color="#FF7F00"></font><h3 id="三-数据类型"><font color="#FF6347" face="Comic sans MS">三. 数据类型</font><a href="post/Python-Variables-DataTypes#三-数据类型"></a></h3><font face="Comic sans MS"><strong>标准数据类型</strong><br><br>在内存中存储的数据可以有多种类型。<br><br>Python 定义了一些标准类型，用于存储各种类型的数据。</font><blockquote><font face="Comic sans MS">Python<font color="#FF7F00"><strong>有五个标准</strong></font>的数据类型：</font><br>1. <font face="Microsoft YaHei">Numbers（数字）</font><br>2. <font face="Microsoft YaHei">String（字符串）</font><br>3. <font face="Sans-serif">List（列表）</font><br>4. <font face="Sans-serif">Tuple（元组）</font><br>5. <font face="Sans-serif">Dictionary（字典）</font></blockquote><h4 id="3-1-数字运算和函数"><font color="#3CB371" face="Comic sans MS">3.1 数字运算和函数</font><a href="post/Python-Variables-DataTypes#3-1-数字运算和函数"></a></h4><font color="#00B2EE" face="Comic sans MS"><strong>一、整数的定义和基础知识</strong></font> <ol><li><font face="Comic sans MS"><font color="#FF7F00"><strong>Python可以处理任意大小的整数，当然包括负整数</strong></font>，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</font></li><li><font face="Comic sans MS">计算机由于使用二进制，所以，有时候用<font color="#FF7F00"><strong>十六进制表示整数</strong></font>比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</font></li></ol><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、整数运算</strong></font> <font face="Comic sans MS">在Python中，可对整数执行加（<strong><code>+</code></strong>）减（<strong><code>-</code></strong>）乘（<strong><code>*</code></strong>）除（<strong><code>/</code></strong>）平方（<code>**</code>）取余（<code>%</code>）运算。</font><p><br></p><font face="Comic sans MS"><font color="red"><strong>注意事项：</strong></font> </font><blockquote><ol><li><font face="Comic sans MS">Python使用<font color="#FF7F00"><strong>两个乘号表示乘方运算：</strong></font><code>3 ** 2==9</code></font></li><li><font face="Comic sans MS">Python<font color="#FF7F00"><strong>整数的除法得到的结果是精确的</strong></font>。在Python中，有两种除法：</font><br> 1. <font face="Comic sans MS">一种除法是<code>/</code>(结果是浮点数)</font><br> 2. <font face="Comic sans MS">另一种是除法是<code>//</code>，称为地板除(两个整数的除法仍然是整数) </font>  </li><li><font face="Comic sans MS">因为<strong><code>//</code></strong>除法只取结果的整数部分，所以Python还提供一个余数运算(<code>%</code>)，可以得到两个整数相除的余数。</font></li></ol></blockquote><p>&emsp;<br>示例代码：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">//</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运算结果：<span class="token number">3.3333333333333335</span> <span class="token number">3</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>三、Number 类型转换</strong></font> <div class="article-bounded"><div class="article-table"><table><tbody><tr><td style="text-align:left">int(x [,base ])</td><td style="text-align:left">将x转换为一个整数  </td></tr><tr><td style="text-align:left">long(x [,base ])</td><td style="text-align:left">将x转换为一个长整数  </td></tr><tr><td style="text-align:left">float(x )</td><td style="text-align:left">将x转换到一个浮点数  </td></tr><tr><td style="text-align:left">complex(real [,imag ])</td><td style="text-align:left">创建一个复数  </td></tr><tr><td style="text-align:left">str(x )</td><td style="text-align:left">将对象 x 转换为字符串  </td></tr><tr><td style="text-align:left">repr(x )</td><td style="text-align:left">将对象 x 转换为表达式字符串  </td></tr><tr><td style="text-align:left">eval(str )</td><td style="text-align:left">用来计算在字符串中的有效Python表达式,并返回一个对象  </td></tr><tr><td style="text-align:left">tuple(s )</td><td style="text-align:left">将序列 s 转换为一个元组  </td></tr><tr><td style="text-align:left">list(s )</td><td style="text-align:left">将序列 s 转换为一个列表  </td></tr><tr><td style="text-align:left">chr(x )</td><td style="text-align:left">将一个整数转换为一个字符  </td></tr><tr><td style="text-align:left">unichr(x )</td><td style="text-align:left">将一个整数转换为Unicode字符  </td></tr><tr><td style="text-align:left">ord(x )</td><td style="text-align:left">将一个字符转换为它的整数值  </td></tr><tr><td style="text-align:left">hex(x )</td><td style="text-align:left">将一个整数转换为一个十六进制字符串  </td></tr><tr><td style="text-align:left">oct(x )</td><td style="text-align:left">将一个整数转换为一个八进制字符串  </td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>四、数学函数</strong></font> <div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td style="text-align:left">abs(x)</td><td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td style="text-align:left">ceil(x)</td><td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td style="text-align:left">cmp(x, y)</td><td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td></tr><tr><td style="text-align:left">exp(x)</td><td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td style="text-align:left">fabs(x)</td><td style="text-align:left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td style="text-align:left">floor(x)</td><td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td style="text-align:left">log(x)</td><td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td style="text-align:left">log10(x)</td><td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td style="text-align:left">max(x1, x2,…)</td><td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td style="text-align:left">min(x1, x2,…)</td><td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td style="text-align:left">modf(x)</td><td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td style="text-align:left">pow(x, y)</td><td style="text-align:left">x**y 运算后的值。</td></tr><tr><td style="text-align:left">round(x [,n])</td><td style="text-align:left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td style="text-align:left">sqrt(x)</td><td style="text-align:left">返回数字x的平方根</td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>五、随机数函数</strong></font> <font face="Comic sans MS">随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</font><p>Python包含以下常用随机数函数：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">choice(seq)</td><td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，<br>从0到9中随机挑选一个整数。</td></tr><tr><td style="text-align:left">randrange</td><td style="text-align:left">([start,] stop [,step])    从指定范围内，按指定基数递增的集合中获取一个随机数，<br>基数缺省值为1</td></tr><tr><td style="text-align:left">random()</td><td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td style="text-align:left">seed([x])</td><td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，<br>Python会帮你选择seed。</td></tr><tr><td style="text-align:left">shuffle(lst)</td><td style="text-align:left">将序列的所有元素随机排序</td></tr><tr><td style="text-align:left">uniform(x, y)</td><td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>六、三角函数</strong></font> <div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">acos(x)</td><td style="text-align:left">返回x的反余弦弧度值。</td></tr><tr><td style="text-align:left">asin(x)</td><td style="text-align:left">返回x的反正弦弧度值。</td></tr><tr><td style="text-align:left">atan(x)</td><td style="text-align:left">返回x的反正切弧度值。</td></tr><tr><td style="text-align:left">atan2(y, x)</td><td style="text-align:left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td style="text-align:left">cos(x)</td><td style="text-align:left">返回x的弧度的余弦值。</td></tr><tr><td style="text-align:left">hypot(x, y)</td><td style="text-align:left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td style="text-align:left">sin(x)</td><td style="text-align:left">返回的x弧度的正弦值。</td></tr><tr><td style="text-align:left">tan(x)</td><td style="text-align:left">返回x弧度的正切值。</td></tr><tr><td style="text-align:left">degrees(x)</td><td style="text-align:left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td style="text-align:left">radians(x)</td><td style="text-align:left">将角度转换为弧度</td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>七、数学常量</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">pi</td><td style="text-align:left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td style="text-align:left">e</td><td style="text-align:left">数学常量 e，e即自然常数（自然常数）。 </td></tr></tbody></table></div></div><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>八、 range()函数</strong><br></font><font face="Comic sans MS">Python3 range() 函数返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。<br></font><font face="Comic sans MS">Python3 list() 函数是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。<br></font><font face="Comic sans MS">Python2 range() 函数返回的是列表。<br></font><font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-built-in-functions.html" target="_blank" rel="noopener">Python3 内置函数</a>]</font></font>&emsp;<font face="Comic sans MS"><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-func-range.html" target="_blank" rel="noopener">Python3 range() 函数用法</a>]</font><br></font><p><br></p><p><strong>函数语法：</strong></p><font color="#FF7F00"><strong>range(stop)</strong></font><br><font color="#FF7F00"><strong>range(start, stop[, step])</strong></font><p><br></p><blockquote><p><strong>参数说明：</strong></p><font face="Microsoft YaHei"><font color="#FF7F00"><strong>start:</strong></font> 计数从 start开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>stop:</strong></font> 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</font><br><font face="Microsoft YaHei"><font color="#FF7F00"><strong>step：</strong></font>步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</font></blockquote><p><br></p><p><br></p><h4 id="3-2-浮点数"><font color="#3CB371" face="Comic sans MS">3.2 浮点数</font><a href="post/Python-Variables-DataTypes#3-2-浮点数"></a></h4><ol><li><font face="Comic sans MS">浮点数也就是小数，之所以称为浮点数，<strong>是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的</strong>，比如，1.23x10^9和12.3x10^8是完全相等的。浮点数可以用数学写法，如<strong><code>1.23</code></strong>，<strong><code>3.14</code></strong>，<strong><code>-9.01</code></strong>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，<strong>把10用e替代</strong>，1.23x109就是<strong><code>1.23e9</code></strong>，或者<strong><code>12.3e8</code></strong>，0.000012可以写成<strong><code>1.2e-5</code></strong>，等等。</font></li><li><font face="Comic sans MS">整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</font></li></ol><p><br></p><h4 id="3-3-字符串"><font color="#3CB371" face="Comic sans MS">3.3 字符串</font><a href="post/Python-Variables-DataTypes#3-3-字符串"></a></h4><h5 id="1-定义字符串并输出"><font color="#00B2EE" face="Comic sans MS">1.定义字符串并输出</font><a href="post/Python-Variables-DataTypes#1-定义字符串并输出"></a></h5><ol><li><font face="Comic sans MS"><font color="red" face="Comic sans MS"><strong>区分单引号和双引号：</strong></font>字符串是以单引号<strong><code>&#39;</code></strong>或双引号<strong><code>&quot;</code></strong>括起来的任意文本，比如<strong><code>&#39;abc&#39;</code></strong>，<strong><code>&quot;xyz&quot;</code></strong>等等。</font><br><font face="Comic sans MS"><strong>请注意</strong>：<strong><code>&#39;&#39;</code></strong>或<strong><code>&quot;&quot;</code></strong>本身只是一种表示方式，不是字符串的一部分，因此，字符串<strong><code>&#39;abc&#39;</code></strong>只有<strong><code>a</code></strong>，<strong><code>b</code></strong>，<strong><code>c</code></strong>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<strong><code>I</code></strong>，<strong><code>&#39;</code></strong>，<strong><code>m</code></strong>，<strong><code>空格</code></strong>，<strong><code>O</code></strong>，<strong><code>K</code></strong>这6个字符。<br>即<font color="#FF7F00"><strong>单引号要放到双引号里面，双引号要放到单引号里面</strong></font>。</font></li></ol><p><br></p><ol start="2"><li><font color="red" face="Comic sans MS"><strong>使用转义字符“<code>\</code>”</strong></font> ： <font face="Microsoft YaHei">如果字符串内部既包含<strong><code>&#39;</code></strong>又包含<strong><code>&quot;</code></strong>怎么办？可以用转义字符<strong><code>\</code></strong>来标识，比如：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'I\'m \"OK\"!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：I'm <span class="token string">"OK"</span>! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font face="Microsoft YaHei">把双引号括在单引号里面，但是下面的单引号必须转义，如下也是正确的：</font><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'I\'m "OK"!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br></p><ol start="3"><li><font color="red" face="Comic sans MS"><strong>使用不转义字符“<code>r&#39;&#39;</code>”</strong></font>： <font face="Microsoft YaHei">如果字符串里面有很多字符都需要转义，就需要加很多<strong><code>\</code></strong>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示，<font color="#FF7F00"><strong><code>&#39;&#39;</code>内部的字符串默认不转义</strong></font>，可以自己试试：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'\\\t\\'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span>r<span class="token string">'\\\t\\'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>输出结果：\    \ \\\t\\ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="4"><li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出。使用</strong><code>&#39;&#39;&#39;  内容  &#39;&#39;&#39;</code><strong>：</strong></font><font face="Microsoft YaHei">如果字符串内部有很多换行，用<strong><code>\n</code></strong>写在一行里不好阅读，为了简化，Python允许用<strong><code>&#39;&#39;&#39; 这里写内容&#39;&#39;&#39;</code></strong>的格式表示多行内容，可以自己试试：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token triple-quoted-string string">'''helloworldline1line2'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：hello world line1 line2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="5"><li><font color="red" face="Comic sans MS"><strong>在字符串里面有换行，将字符串按照换行输出，并且不转义输出字符。使用<code>r&#39;&#39;&#39;  &#39;&#39;&#39;</code>：</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span>r<span class="token triple-quoted-string string">'''hello \nworldline1line2'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：hello \n world line1 line2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h5 id="2-使用字符串-取下标"><font color="#00B2EE" face="Comic sans MS">2.使用字符串(取下标)</font><a href="post/Python-Variables-DataTypes#2-使用字符串-取下标"></a></h5><blockquote><font face="Microsoft YaHei"><font color="#FF7F00"><strong>python的字串列表有2种取值顺序:</strong></font></font><br>1. <font face="Microsoft YaHei">从左到右索引默认<font color="#FF7F00"><strong>0</strong></font>开始的，最大范围是字符串<strong>长度少1</strong>；</font><br>2. <font face="Microsoft YaHei">从右到左索引默认-1开始的，最大范围是字符串开头。</font></blockquote><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c7665042686e.png" alt="python-string-slice.png" data-zoomable></p></div><blockquote><ol start="3"><li><font face="Microsoft YaHei">如果你要实现从字符串中获取一段<strong>子字符串</strong>的话，可以使用 <font color="#FF7F00"><strong>[头下标:尾下标]</strong></font> 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。</font></li><li><font face="Microsoft YaHei"><strong><code>[头下标:尾下标]</code></strong> 获取的子字符串包含头下标的字符，但<strong>不包含尾下标的字符</strong>。</font></li></ol></blockquote><p><br></p><p>比如:</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：c bcde <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><font face="Microsoft YaHei">当使用以冒号<strong><code>:</code></strong>分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。<br>上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。</font></blockquote><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c76663ee5909.png" alt="9aU.png" data-zoomable></p></div><p><br></p><h5 id="3-加号-星号-冒号"><font color="#00B2EE" face="Comic sans MS">3.加号(+)星号(*)冒号(:)</font><a href="post/Python-Variables-DataTypes#3-加号-星号-冒号"></a></h5><blockquote><ol><li><font color="#FF7F00"><strong>加号(+)：</strong></font><strong>拼接字符串；</strong></li><li><font color="#FF7F00"><strong>星号(*)：</strong></font><strong>重复操作；</strong></li><li><font color="#FF7F00"><strong>冒号(:)：</strong></font><strong>截取字符。</strong></li></ol></blockquote><p><br></p><ol><li><font color="red"><strong>Python使用加号（ + ）来合并字符串</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">first_name <span class="token operator">=</span> <span class="token string">"ada"</span>last_name <span class="token operator">=</span> <span class="token string">"lovelace"</span>full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> last_name<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> full_name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>运行结果：Hello<span class="token punctuation">,</span> ada lovelace! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="2"><li><font color="red"><strong>Python使用星号（ * ）来重复字符串</strong></font></li></ol><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">'Hello World!'</span>a<span class="token operator">=</span>str<span class="token operator">*</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>运行输出：Hello World!Hello World! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="3"><li><font color="red"><strong>Python使用冒号（ ： ）来截取字符</strong></font></li></ol><pre class="line-numbers language-java"><code class="language-java">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python# <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span> UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>str <span class="token operator">=</span> <span class="token string">'Hello World!'</span>print str           # 输出完整字符串print str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        # 输出字符串中的第一个字符print str<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">]</span>      # 输出字符串中第三个至第五个之间的字符串print str<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span>       # 输出从第三个字符开始的字符串print str <span class="token operator">*</span> <span class="token number">2</span>       # 输出字符串两次print str <span class="token operator">+</span> <span class="token string">"TEST"</span>  # 输出连接的字符串以上实例输出结果：Hello World<span class="token operator">!</span>Hllollo World<span class="token operator">!</span>Hello World<span class="token operator">!</span>Hello World<span class="token operator">!</span>Hello World<span class="token operator">!</span>TEST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><font face="Microsoft YaHei">Python 列表截取可以接收第三个参数，<font color="#FF7F00"><strong>参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</strong></font></font></blockquote><div class="article-img"><p><img src="https://i.loli.net/2019/02/27/5c766ace2223e.png" alt="python_list_slice_2.png" data-zoomable></p></div><p><br></p><h5 id="4-常用的字符串方法"><font color="#00B2EE" face="Comic sans MS">4.常用的字符串方法</font><a href="post/Python-Variables-DataTypes#4-常用的字符串方法"></a></h5><h6 id="1-修改字符串的大小写"><font color="#20B2AA" face="Comic sans MS">1. 修改字符串的大小写</font><a href="post/Python-Variables-DataTypes#1-修改字符串的大小写"></a></h6><blockquote><p><font color="#FF7F00"><strong>使用方法：</strong></font></p><ol><li><strong>upper()</strong>：将字符串<font color="#FF7F00"><strong>所有字母大写</strong></font>；</li><li><strong>lower()</strong>：将字符串<font color="#FF7F00"><strong>所有字母小写</strong></font>；</li><li><strong>title()</strong>：将字符串<font color="#FF7F00"><strong>所有单词首字母大写，并将单词中除了首字母的变为小写</strong></font>。</li></ol></blockquote><p><br></p><p>示例代码：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Hexo lovelace giTHub toMMrow n"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行输出：HEXO LOVELACE GITHUB TOMMROW N hexo lovelace github tommrow n Hexo Lovelace Github Tommrow N <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><font face="Microsoft YaHei">在<strong><code>name.title()</code></strong> 中，name 后面的句点（ <strong><code>.</code></strong> ）让Python对变量name 执行方法title() 指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要<font color="#FF7F00"><strong>额外的信息来完成其工作</strong></font>。这种信息是在括号内提供的。函数title() 不需要额外的信息，因此它后面的括号是空的。</font><p><br></p><h6 id="2-暂时-永久删除字符串两端空白"><font color="#20B2AA" face="Comic sans MS">2. 暂时/永久删除字符串两端空白</font><a href="post/Python-Variables-DataTypes#2-暂时-永久删除字符串两端空白"></a></h6><blockquote><font color="#FF7F00"><strong>使用方法：</strong></font><br>1. <font face="Microsoft YaHei"><strong>strip()：</strong>删除字符串<font color="#FF7F00"><strong>两端</strong></font>空白或换行符；</font><br>2. <font face="Microsoft YaHei"><strong>lstrip()：</strong>删除字符串<font color="#FF7F00"><strong>左</strong></font>端空白或换行符；</font><br>3. <font face="Microsoft YaHei"><strong>rstrip()：</strong>删除字符串<font color="#FF7F00"><strong>右</strong></font>端空白或换行符；</font></blockquote><p><br></p><blockquote><font face="Microsoft YaHei"><font color="#FF7F00"><strong>暂时</strong></font>或者是<font color="#FF7F00"><strong>永久</strong></font>删除的区别是在于调用方法后是否重新赋值给一个变量：</font><br>1. <font face="Microsoft YaHei"><strong>不赋值：</strong><font color="#FF7F00">暂时删除，下次调用时还是原字符串</font>；</font><br>2. <font face="Microsoft YaHei"><strong>重新赋值：</strong><font color="#FF7F00">永久删除</font>。</font></blockquote><p><br></p><p>示例代码：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"    HexoAndGithub  "</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>运行结果：    HexoAndGithub   HexoAndGithub     HexoAndGithub HexoAndGithub       HexoAndGithub   HexoAndGithub HexoAndGithub HexoAndGithub HexoAndGithub HexoAndGithub <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h6 id="3-内置函数-len-返回字符串长度"><font color="#20B2AA" face="Comic sans MS">3. 内置函数 len()返回字符串长度</font><a href="post/Python-Variables-DataTypes#3-内置函数-len-返回字符串长度"></a></h6><font face="Microsoft YaHei">内置函数 len() 返回字符串长度，注意，它<strong>并不是字符串的方法！！！</strong></font><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'supercalifragilisticexpialidocious'</span>b <span class="token operator">=</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>运行结果：supercalifragilisticexpialidocious <span class="token number">34</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="3-4-布尔值"><font color="#3CB371" face="Comic sans MS">3.4 布尔值</font><a href="post/Python-Variables-DataTypes#3-4-布尔值"></a></h4><ol><li><font face="Microsoft YaHei">布尔值和布尔代数的表示完全一致，一个布尔值只有<strong><code>True</code></strong>、<strong><code>False</code></strong>两种值，要么是True，要么是False；</font></li><li><font face="Microsoft YaHei">在Python中，True、False<font color="#FF7F00"><strong>首字母必须大写</strong></font>。可以直接用True、False表示布尔值，请注意大小写，也可以通过布尔运算计算出来：</font></li></ol><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token boolean">True</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token operator">></span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>运行结果：<span class="token boolean">True</span> <span class="token boolean">True</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="3"><li><font face="Microsoft YaHei"><strong>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</strong></font><ol><li><font face="Microsoft YaHei"><strong><code>and</code></strong>运算是<strong>与运算</strong>，只有<font color="#FF7F00"><strong>所有都为True，and运算结果才是True</strong></font> </font></li><li><font face="Microsoft YaHei"><strong><code>or</code></strong>运算是<strong>或运算</strong>，只要<font color="#FF7F00"><strong>其中有一个为True，or运算结果就是True</strong></font> </font></li><li><font face="Microsoft YaHei"><strong><code>not</code></strong>运算是<strong>非运算</strong>，它是一个单目运算符，<font color="#FF7F00"><strong>把True变成False，False变成True</strong></font> </font>s</li></ol></li></ol><p><br></p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span>b<span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">or</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">3</span>c<span class="token operator">=</span> <span class="token operator">not</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>运行结果：<span class="token boolean">False</span> <span class="token boolean">True</span> <span class="token boolean">True</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义一个变量就是定义了一个指针！  ٩(ˊᗜˋ*)و&lt;br&gt;字符串内容很多，就很烦(っ ̯ -｡)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-基础语法</title>
    <link href="Treecatee.gitgub.io/post/python-grammar/"/>
    <id>Treecatee.gitgub.io/post/python-grammar/</id>
    <published>2019-02-27T08:06:40.000Z</published>
    <updated>2019-03-06T10:25:51.455Z</updated>
    
    <content type="html"><![CDATA[<p>请务必注意，Python程序是<font color="#FF7F00"><strong>大小写敏感</strong></font>的，如果写错了大小写，程序会报错。<br><a id="more"></a></p><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>Python 基础语法</strong></font> </center><p>&emsp;<br>&emsp;</p><h3 id="一-标识符"><font color="#FF6347" face="Comic sans MS">一. 标识符</font><a href="post/Python-Grammar#一-标识符"></a></h3><font color="#00B2EE" face="Comic sans MS"><strong>一、标识符定义规则</strong></font><ol><li><p>在 Python 里，标识符由<font color="#FF7F00"><strong>字母</strong></font>、<font color="#FF7F00"><strong>数字</strong></font>、<font color="#FF7F00"><strong>下划线</strong></font>组成。</p></li><li><p>在 Python 中，所有标识符<font color="#FF7F00"><strong>不能以数字开头</strong></font>。</p></li><li><p>Python 中的标识符<font color="#FF7F00"><strong>是区分大小写的</strong></font>。</p></li><li><p>以<font color="#FF7F00"><strong>下划线开头</strong></font>的标识符是<font color="#FF7F00"><strong>有特殊意义</strong></font>的。</p><ol><li>以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li><li>以双下划线开头的 <code>__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__</code>代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li></ol></li></ol><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、Python 保留字符</strong></font><p>下面的列表显示了在Python中的保留字。这些保留字<font color="#FF7F00"><strong>不能用作常数或变数，或任何其他标识符名称</strong></font>。</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td style="text-align:center">and</td><td style="text-align:center">exec</td><td style="text-align:center">not</td></tr><tr><td style="text-align:center">assert</td><td style="text-align:center">finally</td><td style="text-align:center">or</td></tr><tr><td style="text-align:center">break</td><td style="text-align:center">for</td><td style="text-align:center">pass</td></tr><tr><td style="text-align:center">class</td><td style="text-align:center">from</td><td style="text-align:center">print</td></tr><tr><td style="text-align:center">continue</td><td style="text-align:center">global</td><td style="text-align:center">raise</td></tr><tr><td style="text-align:center">def</td><td style="text-align:center">if</td><td style="text-align:center">return</td></tr><tr><td style="text-align:center">del</td><td style="text-align:center">import</td><td style="text-align:center">try</td></tr><tr><td style="text-align:center">elif</td><td style="text-align:center">in</td><td style="text-align:center">while</td></tr><tr><td style="text-align:center">else</td><td style="text-align:center">is</td><td style="text-align:center">with</td></tr><tr><td style="text-align:center">except</td><td style="text-align:center">lambda</td><td style="text-align:center">yield</td></tr></tbody></table></div></div><p><br></p><h3 id="二-缩进-代码块"><font color="#FF6347" face="Comic sans MS">二. 缩进(代码块)</font><a href="post/Python-Grammar#二-缩进-代码块"></a></h3><font color="#00B2EE" face="Comic sans MS"><strong>一、注意事项：</strong></font><ol><li><p>学习 Python 与其他语言最大的区别就是，Python 的<font color="#FF7F00"><strong>代码块不使用大括号 <code>{}</code> 来控制类，函数以及其他逻辑判断</strong></font>。python 最具特色的就是<font color="#FF7F00"><strong>用缩进来写模块</strong></font>。</p></li><li><p>缩进的空白数量是可变的，但是<font color="#FF7F00"><strong>所有代码块语句必须包含相同的缩进空白数量</strong></font>，<strong>这个必须严格执行</strong>！！！</p><ol><li>按照约定俗成的管理，应该始终坚持使用<font color="red"><strong>4个空格</strong></font>的缩进；</li><li>很多Python程序员都建议每行不超过80字符（最多79个见多）；</li><li>要将程序的不同部分分开，可使用空行，但不要在程序文件中过多地使用空行</li></ol></li></ol><p><br></p><p>以下代码将会执行错误：<strong>缩进空白数量不一样会报错！</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 文件名：test.py</span><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Answer"</span>    <span class="token keyword">print</span> <span class="token string">"True"</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Answer"</span>    <span class="token comment" spellcheck="true"># 没有严格缩进，在执行时会报错</span>  <span class="token keyword">print</span> <span class="token string">"False"</span>执行以上代码，会出现如下错误提醒：$ python test<span class="token punctuation">.</span>py    File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span>    <span class="token keyword">print</span> <span class="token string">"False"</span>                <span class="token operator">^</span>IndentationError<span class="token punctuation">:</span> unindent does <span class="token operator">not</span> match any outer indentation level<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>二、多个语句构成代码块</strong></font><ol><li><p>Python不像C/C++/Java一样一条语句是以<code>;</code>结束，而是<font color="#FF7F00"><strong>换行即表示一个语句结束</strong></font>。</p></li><li><p>缩进相同的一组语句构成一个<strong>代码块</strong>，我们称之代码组。</p></li><li><p>像if、while、def和class这样的复合语句，<strong>首行以关键字开始</strong>，<strong>以冒号( <code>:</code> )结束</strong>，该行之后的一行或多行缩进代码构成代码组。注意这里冒号( <code>:</code> )不能省略。</p></li></ol><p><br></p><p>如下实例的冒号不能省略：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>    suite <span class="token keyword">elif</span> expression <span class="token punctuation">:</span>     suite  <span class="token keyword">else</span> <span class="token punctuation">:</span>     suite <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h3 id="三-一行和多行语句"><font color="#FF6347" face="Comic sans MS">三. 一行和多行语句</font><a href="post/Python-Grammar#三-一行和多行语句"></a></h3><blockquote><p><font color="red"><strong>一行</strong></font>分为：</p><ol><li><font color="#FF7F00"><strong>同一行显示多条语句</strong></font>;</li><li>将一行的语句分为多行显示(<font color="#FF7F00"><strong>一条语句以多行来书写</strong></font>)也包括在多行语句里面来讲。</li></ol></blockquote><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>1. 同一行显示多条语句</strong></font><p>Python可以在同一行中使用多条语句，语句之间<strong>使用分号( <code>;</code> )分割</strong>，以下是一个简单的实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'runoob'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>运行输出：runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>3. 一条语句以多行来书写</strong></font><p>看下面的多行语句即可，是同一个意思。</p><p><br></p><font color="#00B2EE" face="Comic sans MS"><strong>3. 多行语句</strong></font><blockquote><p><font color="red"><strong>多行</strong></font>：</p><ol><li>Python语句中一般<font color="#FF7F00"><strong>以新行作为语句的结束符</strong></font>，但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，斜杠（  <code>\</code> ）称为<code>多行连接符</code>。</li><li>语句中包含 [], {} 或 () 括号就<strong>不需要</strong>使用多行连接符。</li></ol></blockquote><ol><li><font color="#FF7F00"><strong>Python语句中一般以新行作为语句的结束符</strong></font>。但是我们可以使用斜杠（  <code>\</code> ）将一行的语句分为多行显示，如下所示：</li></ol><pre class="line-numbers language-python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \        item_two <span class="token operator">+</span> \        item_three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="2"><li>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：</li></ol><pre class="line-numbers language-python"><code class="language-python">days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>        <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><br></p><h3 id="四-引号"><font color="#FF6347" face="Comic sans MS">四. 引号</font><a href="post/Python-Grammar#四-引号"></a></h3><ol><li><p>Python 可以使用单引号( <code>&#39;</code> )、双引号( <code>&quot;</code> )、三引号( <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> ) <strong>来表示字符串</strong>，引号的开始与结束必须的相同类型的。</p></li><li><p><strong>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，</strong><font color="#FF7F00"><strong>被当做注释</strong></font>。</p></li></ol><p>如下示例：</p><pre class="line-numbers language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'word'</span>sentence <span class="token operator">=</span> <span class="token string">"这是一个句子。"</span>paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个段落。包含了多个语句"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h3 id="五-注释"><font color="#FF6347" face="Comic sans MS">五. 注释</font><a href="post/Python-Grammar#五-注释"></a></h3><ol><li><font color="#FF7F00"><strong>python中单行注释采用 <code>#</code> 开头。</strong></font></li><li>python 中多行注释使用三个单引号( <code>&#39;&#39;&#39;</code> )或三个双引号( <code>&quot;&quot;&quot;</code> )。</li></ol><p>单行注释,如下示例1：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 文件名：test.py</span><span class="token comment" spellcheck="true"># 第一个注释</span><span class="token keyword">print</span> <span class="token string">"Hello, Python!"</span>  <span class="token comment" spellcheck="true"># 第二个注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br>多行注释,如下示例2：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 文件名：test.py</span><span class="token triple-quoted-string string">'''这是多行注释，使用单引号。这是多行注释，使用单引号。这是多行注释，使用单引号。'''</span><span class="token triple-quoted-string string">"""这是多行注释，使用双引号。这是多行注释，使用双引号。这是多行注释，使用双引号。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h3 id="六-空行"><font color="#FF6347" face="Comic sans MS">六. 空行</font><a href="post/Python-Grammar#六-空行"></a></h3><blockquote><ol><li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</li><li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于<font color="#FF7F00"><strong>分隔两段不同功能或含义的代码，便于日后代码的维护或重构</strong></font>。</li><li>记住：<font color="#FF7F00"><strong>空行也是程序代码的一部分</strong></font>。</li></ol></blockquote><p>什么是空行？</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#这里就是空行</span>b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h3 id="七-输出-print"><font color="#FF6347" face="Comic sans MS">七. 输出(print)</font><a href="post/Python-Grammar#七-输出-print"></a></h3><p>Python3.0以后的输出使用<code>print()</code>函数。分为<strong>换行输出</strong>和<strong>不换行输出</strong>。<br>在print()括号中加上字符串，就可以向屏幕上输出指定的文字。括号里还可以放表达式等……</p><blockquote><ol><li><strong>换行输出：</strong><font color="#FF7F00"><strong>print 默认输出是换行的</strong></font></li><li><strong>不换行输出：</strong>将括号里的所有参数输出在一行，只需要<font color="#FF7F00"><strong>在每一个参数后面加一个<code>,</code></strong></font>即可。<strong>注意：</strong><ol><li>最后一个参数后面没有<code>,</code>，也就是和普通函数使用一样；</li><li>参数中间的<code>,</code>输出来是一个空格。如下：</li></ol></li><li>循环输出变量b的时候如果不换行，可在后面加个<code>end=&#39; &#39;</code>，即<code>print(b, end=&#39; &#39;)</code></li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thequickbrownfox'</span><span class="token punctuation">,</span> <span class="token string">'jumpsover'</span><span class="token punctuation">,</span> <span class="token string">'thelazydog'</span><span class="token punctuation">)</span>运行结果：Thequickbrownfox jumpsover thelazydog <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h4 id="7-1-输出的补充"><font color="#3CB371" face="Comic sans MS">7.1 输出的补充</font><a href="post/Python-Grammar#7-1-输出的补充"></a></h4><blockquote><p><font face="Microsoft YaHei" color="#FF7F00">Python的三种输出：</font></p><ol><li><font face="Microsoft YaHei">Python两种输出值的方式: 表达式语句和<code>print()</code>函数；</font><ol><li><font face="Microsoft YaHei">如果你希望输出的形式更加多样，可以使用 <code>str.format()</code> 函数来格式化输出值。</font></li><li><font face="Microsoft YaHei">如果你希望将输出的值转成字符串，可以使用 <code>repr()</code> 或 <code>str()</code> 函数来实现</font>.</li></ol></li><li><font face="Microsoft YaHei">第三种方式是使用文件对象的<code>write()</code> 方法，标准输出文件可以用<code>sys.stdout</code>引用</font>！</li></ol></blockquote><p><br></p><h4 id="7-2-输出时常用的函数"><font color="#3CB371" face="Comic sans MS">7.2 输出时常用的函数</font><a href="post/Python-Grammar#7-2-输出时常用的函数"></a></h4><ul><li><font color="#FF7F00"><strong>str()：</strong></font> 将对象转化为适于人阅读的形式，函数返回一个对象的string格式。</li><li><font color="#FF7F00"><strong>repr()：</strong></font> 将对象转化为供解释器读取的形式，返回一个对象的 string 格式。可以输出包括转义字符在内的所有字符！</li><li><font color="#FF7F00"><strong><code>end=&#39; &#39;</code>：</strong></font> 循坏输出时常用于不换行输出。</li><li><font color="#FF7F00"><strong>str.format() ：</strong></font>格式化输出。</li></ul><p><br></p><p>举例：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"'abcd\ne\nfg'"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>output：'abcdefg'<span class="token string">"'abcd\ne\nfg'"</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token triple-quoted-string string">'''repr() 的参数可以是 Python 的任何对象'''</span>x <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">3.25</span>y <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output： <span class="token punctuation">(</span><span class="token number">32.5</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token triple-quoted-string string">'''  我们都知道正常情况下将多个字符串输出在一行直接使用半角逗号,分隔即可。但是循坏输出要想不换行就得使用 end=' '了  '''</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> a<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------分隔符-----------'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> a<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------分隔符-----------'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> a<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----------分隔符-----------'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> a<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>OUTPUT：<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>分隔符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">123456</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>分隔符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>1w2w3w4w5w6w<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>分隔符<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h4 id="7-3-str-format-格式化字符串"><font color="#3CB371" face="Comic sans MS">7.3 str.format()格式化字符串</font><a href="post/Python-Grammar#7-3-str-format-格式化字符串"></a></h4><p>旧式的格式化输出在<font color="#00B2EE">[<a href="https://directoree.top/post/Python-Grammar" target="_blank" rel="noopener">Python-基础语法</a>]</font>里面讲过，这里的<code>str.format()</code>就是新版的格式化的一种形式。</p><p><strong>语法：</strong>字符串类型格式化采用format()方法，基本使用格式是：</p><font color="#FF7F00"><strong>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</strong></font><p>所谓的<strong>str.format()</strong>：即<code>.format()</code>前是一个字符串，字符串里面有<code>{}</code>相当于旧书式的<code>%</code>。<code>{}</code>及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。分为以下几种使用方法：</p><p><br></p><ol><li>在括号中的<font color="#FF7F00"><strong>数字</strong></font>用于指向传入对象在 format() 中的<font color="#FF7F00"><strong>索引位置</strong></font>，如下所示：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} 和 {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1} 和 {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT：Google 和 RunoobRunoob 和 Google<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="2"><li>在 format() 中使用了<font color="#FF7F00"><strong>关键字参数, 那么它们的值会指向使用该名字的参数</strong></font>。也可以位置及关键字参数可以任意的结合:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} 和 {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1} 和 {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'站点列表 {0}, {1}, 和 {other}。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span>                                                       other<span class="token operator">=</span><span class="token string">'Taobao'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT：Google 和 RunoobRunoob 和 Google站点列表 Google<span class="token punctuation">,</span> Runoob<span class="token punctuation">,</span> 和 Taobao。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="3"><li>在 <code>{}</code> 里使用 <code>!a</code> (使用 ascii()), <code>!s</code>(使用 str()) 和 <code>!r</code> (使用 repr()) 可以用于<font color="#FF7F00"><strong>在格式化某个值之前对其进行转化</strong></font>:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'常量 PI 的值近似为： {}。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'常量 PI 的值近似为： {!s}。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>OUTPUT<span class="token punctuation">:</span>常量 PI 的值近似为： <span class="token number">3.141592653589793</span>。常量 PI 的值近似为： <span class="token number">3.141592653589793</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><ol start="4"><li>可选项 <code>:</code> 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。</li></ol><p>format()方法中&lt;模板字符串&gt;的<code>{}</code>除了包括参数序号，还可以包括格式控制信息。此时，<code>{}</code>的内部样式如下：</p><font color="#FF7F00">     <strong>{&lt;参数序号&gt;: &lt;格式控制标记&gt;}</strong>  </font><p>其中，&lt;格式控制标记&gt;用来控制参数显示时的格式，包括：<strong>&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;,&lt;.精度&gt;&lt;类型&gt;</strong> 6 个字段，这些字段都是可选的，可以组合使用，逐一介绍如下。参考：<font color="#00B2EE">[<a href="https://blog.csdn.net/i_chaoren/article/details/77922939" target="_blank" rel="noopener">Python字符串格式化–format()方法</a>]</font></p><div class="article-img"><p><img src="https://i.loli.net/2019/03/06/5c7f917b8902b.jpg" alt="1.jpg" data-zoomable></p></div><p><br></p><p><strong>&lt;宽度&gt;</strong><br>指当前槽的设定输出字符宽度，如果该槽对应的format()参数长度比&lt;宽度&gt;设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则位数将被默认以空格字符补充。</p><p><strong>&lt;对齐&gt;</strong><br>指参数在&lt;宽度&gt;内输出时的对齐方式，分别使用&lt;、&gt;和^三个符号表示左对齐、右对齐和居中对齐。</p><p><strong>&lt;填充&gt;</strong><br>指&lt;宽度&gt;内除了参数外的字符采用什么方式表示，默认采用空格，可以通过&lt;填充&gt;更换。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"PYTHON"</span><span class="token string">"{0:30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'PYTHON                        '</span><span class="token string">"{0:>30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'                        PYTHON'</span><span class="token string">"{0:*^30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'************PYTHON************'</span><span class="token string">"{0:-^30}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'------------PYTHON------------'</span><span class="token string">"{0:3}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'PYTHON'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><strong>逗号（，）</strong><br>&lt;格式控制标记&gt;中逗号（，）用于显示数字的千位分隔符，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">"{0:-^20,}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'---1,234,567,890----'</span><span class="token string">"{0:-^20}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对比输出</span>Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'-----1234567890-----'</span><span class="token string">"{0:-^20,}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">12345.67890</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'----12,345.6789-----'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><strong>&lt;.精度&gt;</strong><br>表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。</p><p><strong>&lt;类型&gt;</strong><br>表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6 种：</p><ul><li>b: 输出整数的二进制方式；</li><li>c: 输出整数对应的 Unicode 字符；</li><li>d: 输出整数的十进制方式；</li><li>o: 输出整数的八进制方式；</li><li>x: 输出整数的小写十六进制方式；</li><li>X: 输出整数的大写十六进制方式；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> number <span class="token keyword">in</span> table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10} ==> {1:10d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Runoob     <span class="token operator">==</span><span class="token operator">></span>          <span class="token number">2</span>Taobao     <span class="token operator">==</span><span class="token operator">></span>          <span class="token number">3</span>Google     <span class="token operator">==</span><span class="token operator">></span>          <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<strong>浮点数类型</strong>，输出格式包括4 种：</p><ul><li>e: 输出浮点数对应的小写字母 e 的指数形式；</li><li>E: 输出浮点数对应的大写字母 E 的指数形式；</li><li>f: 输出浮点数的标准浮点形式；</li><li>%: 输出浮点数的百分形式。</li></ul><p><br></p><ol start="5"><li>如果你有一个很长的格式化字符串, 而你不想将它们分开, 那么在格式化时通过变量名而非位置会是很好的事情。</li></ol><p>最简单的就是传入一个字典, 然后使用方括号 <code>[]</code> 来访问键值 :</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob: {0[Runoob]:d}; Google: {0[Google]:d}; Taobao: {0[Taobao]:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span>Runoob<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Google<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> Taobao<span class="token punctuation">:</span> <span class="token number">3</span>也可以通过在 table 变量前使用 <span class="token string">'**'</span> 来实现相同的功能：<span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob: {Runoob:d}; Google: {Google:d}; Taobao: {Taobao:d}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">**</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span>Runoob<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Google<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> Taobao<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><h3 id="八-输入-input"><font color="#FF6347" face="Comic sans MS">八. 输入(input)</font><a href="post/Python-Grammar#八-输入-input"></a></h3><blockquote><ol><li>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量（指针）中，以方便你使用。</li><li>input()函数有个返回值，<font color="#FF7F00"><strong>返回类型为String</strong></font>。</li></ol></blockquote><p><br></p><font color="red"><strong>一、参数</strong></font><p>输入分为两种：<strong>空参数</strong>、<strong>带有参数</strong>。</p><font color="#00B2EE"><strong>空参数：</strong></font><code>input()</code>；效果是屏幕上没有任何提示，等待用户输入。<br><font color="#00B2EE"><strong>带有参数：</strong></font><code>input(&#39;请输入一个字符串：&#39;)</code>；效果是屏幕上显示“请输入一个字符串：”，然后等待用户输入。<br><br><br><br><font color="red"><strong>二、返回值</strong></font><p>关于input()的返回值，是<font color="#FF7F00"><strong>字符串String类型</strong></font><br>如下会报错，假如输入1998，返回给s的值是字符串”1998”，如果直接和数字型进行比较会报错：</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'birth: '</span><span class="token punctuation">)</span>birth <span class="token operator">=</span> s<span class="token keyword">if</span> birth <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00前'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p>解决方法是使用函数<code>int(str)</code>，功能是<font color="#FF7F00"><strong>将字符串类型转换成数字型</strong></font>。</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'birth: '</span><span class="token punctuation">)</span>birth <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> birth <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00前'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请务必注意，Python程序是&lt;font color=&quot;#FF7F00&quot;&gt;&lt;strong&gt;大小写敏感&lt;/strong&gt;&lt;/font&gt;的，如果写错了大小写，程序会报错。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Python-基础</title>
    <link href="Treecatee.gitgub.io/post/python-basics/"/>
    <id>Treecatee.gitgub.io/post/python-basics/</id>
    <published>2019-02-27T02:18:37.000Z</published>
    <updated>2019-03-21T17:40:52.983Z</updated>
    
    <content type="html"><![CDATA[<p>从今天开始Python的学习吧……ヾ(๑╹◡╹)ﾉ”<br><a id="more"></a><br>本文参考：</p><font color="#00B2EE">[<a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">Python3 教程</a>]</font><br><font color="#00B2EE">[<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000" target="_blank" rel="noopener">廖雪峰的官方网站Python教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.ituring.com.cn/book/tupubarticle/10626" target="_blank" rel="noopener">Python编程：从入门到实践</a>]</font><br><font color="#00B2EE">[<a href="http://www.pythondoc.com/" target="_blank" rel="noopener">Python 中文学习大本营-Python 3.6.X 官方教程</a>]</font><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>Python 基础</strong></font> </center><p>&emsp;<br>&emsp;</p><h3 id="一-基础语法"><font color="#FF6347" face="Comic sans MS">一. 基础语法</font><a href="post/Python-Basics#一-基础语法"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-grammar" target="_blank" rel="noopener">Python-基础语法</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="二-变量和数据类型"><font color="#FF6347" face="Comic sans MS">二. 变量和数据类型</font><a href="post/Python-Basics#二-变量和数据类型"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/Python-variables-datatypes" target="_blank" rel="noopener">Python-变量和数据类型</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="三-运算符"><font color="#FF6347" face="Comic sans MS">三. 运算符</font><a href="post/Python-Basics#三-运算符"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-operators" target="_blank" rel="noopener">Python-运算符</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="四-条件语句与循环"><font color="#FF6347" face="Comic sans MS">四. 条件语句与循环</font><a href="post/Python-Basics#四-条件语句与循环"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/Python-conditionalstatements-loops" target="_blank" rel="noopener">Python-条件语句与循环</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="五-字符编码、字符串、格式化"><font color="#FF6347" face="Comic sans MS">五. 字符编码、字符串、格式化</font><a href="post/Python-Basics#五-字符编码、字符串、格式化"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-coding" target="_blank" rel="noopener">Python-字符编码&amp;字符串&amp;格式化</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="六-列表、元组、字典、集合"><font color="#FF6347" face="Comic sans MS">六. 列表、元组、字典、集合</font><a href="post/Python-Basics#六-列表、元组、字典、集合"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-list-tuple-dict-set" target="_blank" rel="noopener">Python-列表、元组、字典、集合</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="七-函数"><font color="#FF6347" face="Comic sans MS">七. 函数</font><a href="post/Python-Basics#七-函数"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-function" target="_blank" rel="noopener">Python-函数</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="八-生成器与迭代器"><font color="#FF6347" face="Comic sans MS">八. 生成器与迭代器</font><a href="post/Python-Basics#八-生成器与迭代器"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-generator-iterator" target="_blank" rel="noopener">Python-生成器与迭代器</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="九-模块和包"><font color="#FF6347" face="Comic sans MS">九. 模块和包</font><a href="post/Python-Basics#九-模块和包"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-modules-packages" target="_blank" rel="noopener">Python-模块和包</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="十-函数式编程"><font color="#FF6347" face="Comic sans MS">十. 函数式编程</font><a href="post/Python-Basics#十-函数式编程"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/Python-functionalprogramming" target="_blank" rel="noopener">Python-函数式编程</a>]</strong></font><br></font><p><br></p><p><br></p><h3 id="十一-文件系统"><font color="#FF6347" face="Comic sans MS">十一. 文件系统</font><a href="post/Python-Basics#十一-文件系统"></a></h3><font face="Comic sans MS"><font color="#00B2EE"><strong>参见本站博客：[<a href="https://treecatee.github.io/post/python-filecontents" target="_blank" rel="noopener">Python-文件系统</a>]</strong></font><br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今天开始Python的学习吧……ヾ(๑╹◡╹)ﾉ”&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="Treecatee.gitgub.io/categories/Python/"/>
    
    
      <category term="Python语言" scheme="Treecatee.gitgub.io/tags/Python%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>PHP-会话管理和控制</title>
    <link href="Treecatee.gitgub.io/post/php-sessionmanagement/"/>
    <id>Treecatee.gitgub.io/post/php-sessionmanagement/</id>
    <published>2019-02-26T09:22:53.000Z</published>
    <updated>2019-03-02T09:53:38.327Z</updated>
    
    <content type="html"><![CDATA[<p>(。・∀・)ノ<br><a id="more"></a></p><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>PHP 会话管理和控制</strong></font></center><p>&emsp;<br>&emsp;</p><h3 id="一-前言"><font color="#FF6347" face="Comic sans MS">一. 前言</font><a href="post/PHP-SessionManagement#一-前言"></a></h3><p>标准的http协议是无状态的，无连接的。<br>？？？什么意思？⊙﹏⊙∥</p><blockquote><p><strong>【无状态】</strong></p><ol><li>协议对于事务处理没有记忆能力【事物处理】【记忆能力】</li><li>对同一个url请求没有上下文关系【上下文关系】</li><li>每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况【无直接联系】【受直接影响】</li><li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器【状态】</li></ol></blockquote><blockquote><p><strong>【无连接】</strong></p><ol><li>每一个访问都是无连接，服务器挨个处理访问队列里的访问，处理完一个就关闭连接，这事儿就完了，然后处理下一个新的</li><li>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接</li></ol></blockquote><p>&emsp;<br>具体内容以及为什么使用Session和Cookie参考下面博文：</p><font color="#00B2EE">[<a href="https://www.cnblogs.com/bellkosmos/p/5237146.html" target="_blank" rel="noopener">http协议无状态中的 “状态” 到底指的是什么？！</a>]</font><p>&emsp;<br>&emsp;</p><h3 id="二-Cookie概述"><font color="#FF6347" face="Comic sans MS">二. Cookie概述</font><a href="post/PHP-SessionManagement#二-Cookie概述"></a></h3><p>什么是Cookie？<br>请参考本站博客<font color="#00B2EE">[<a href="https://directoree.github.io/post/HTTP-User-Agen-Cookie" target="_blank" rel="noopener">HTTP协议请求头部的User-Agen和Cookie</a>]</font></p><p>&emsp;<br>&emsp;</p><h3 id="三-PHP中的Cookie"><font color="#FF6347" face="Comic sans MS">三. PHP中的Cookie</font><a href="post/PHP-SessionManagement#三-PHP中的Cookie"></a></h3><p><strong>这节我们通过一个用户首次登陆网站后，再次访问不需要重复输入用户名和密码的例子来学习Cookie。</strong></p><font face="Comic sans MS">php中提供了一个函数来让我们设置cookie，这个函数是：<font color="#FF7F00">bool setcookie()</font>;<br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp" target="_blank" rel="noopener">PHP setcookie() 函数</a>]</font><br>需要注意的是，这个函数每次只能设置Cookie中的一个参数，比如一次只能设置用户名、密码等字段。</font><pre class="line-numbers language-php"><code class="language-php">bool <span class="token function">setcookie</span>  <span class="token punctuation">(</span>        string $名字        <span class="token punctuation">[</span><span class="token punctuation">,</span> string $值<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> int $过期时间  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> string $路径<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> string $域名<span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> bool $安全  <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">]</span>        <span class="token punctuation">[</span><span class="token punctuation">,</span> bool <span class="token variable">$http</span>只读  <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">$名字</td><td style="text-align:left">必需。规定 cookie 的名称。</td></tr><tr><td style="text-align:center">$值</td><td style="text-align:left">可选。规定 cookie 的值。</td></tr><tr><td style="text-align:center">$有效期</td><td style="text-align:left">可选。规定 cookie 的有效期。</td></tr><tr><td style="text-align:center">$路径</td><td style="text-align:left">可选。规定 cookie 的服务器路径。</td></tr><tr><td style="text-align:center">$域名</td><td style="text-align:left">可选。规定 cookie 的域名。</td></tr><tr><td style="text-align:center">$安全</td><td style="text-align:left">可选。规定是否通过安全的 HTTPS 连接来传输 cookie。</td></tr><tr><td style="text-align:center">$http只读</td><td style="text-align:left">可选。如果true，那么js就无法读取改cookie，增加安全性。</td></tr></tbody></table></div></div><blockquote><p>1.一般来说，我们其实用不到上面那么多参数，对于这个函数，我们一般这么用：<font color="#FF7F00"><strong>setcookie(cookie名,cookie值,cookie有效期)</strong></font>;<br>2.没错，就那么3个。如此一来，我们就可以在服务端通过$_COOKIE[‘name’] 来读取cookie了。</p></blockquote><p>&emsp;<br>&emsp;<br><strong>以下是示例：</strong></p><ol><li>我们将文件名命名为：cookie.php。</li><li>我们来模拟我们在互联网上见到最常见的例子：输入用户名和密码，登陆成功的过程。</li><li>我们来建一个数据库login,其中有表user,有username和password这两个字段。</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//第一次登陆的时候，通过用户输入的信息来确认用户</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从db获取用户信息</span>    <span class="token comment" spellcheck="true">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from user where `username` = '$userName' "</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//密码验证通过，设置cookies，把用户名和密码保存在客户端</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token variable">$userName</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置时效一个月,一个月后这个cookie失效</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后跳转到登录后的欢迎页面</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: welcome.php'</span> <span class="token punctuation">.</span> <span class="token string">"?username=$userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//再次访问的时候通过cookie来识别用户</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从db获取用户信息</span>    <span class="token comment" spellcheck="true">//PS：数据库连接信息改成自己的 分别为主机 数据库用户名 密码</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from user where `username` =  '$userName' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//验证通过后跳转到登录后的欢迎页面</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: welcome.php'</span> <span class="token punctuation">.</span> <span class="token string">"?username=$userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>        用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        密  码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>跳转到的welcome.php代码</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   welcome<span class="token punctuation">,</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$user</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><blockquote><ol><li>这样，当我第一次访问cookie.php的时候，我需要输入用户名和密码，输入完毕后跳转到了welcome.php。然后我关闭浏览器，再次打开cookie.php，这次没有要求我输入用户信息，而是直接跳转到了welcome.php,因为之前我们存的cookie信息被浏览器自动发送到了服务端,服务端做完处理直接跳转到了welcome.php,服务器认识我们了！知道我是之前那个登陆过的用户，这样我们就通过cookie技术让无状态的HTTP协议保持了状态。<br>照着这个做一遍，我相信你会用cookie了。</li><li>只不过！！！只不过！！！只不过！！！重要的事要说3遍，<font color="#FF7F00"><strong>我们一般是不会把用户名和密码放到cookie中的，因为这并不安全，容易泄露自己的信息，请不要把重要的信息放到cookie中</strong></font>。我们这个只是一个学习cookie的例子。</li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="四-PHP中使用session"><font color="#FF6347" face="Comic sans MS">四. PHP中使用session</font><a href="post/PHP-SessionManagement#四-PHP中使用session"></a></h3><p>什么是session以及一些使用方法?可参考博文：</p><font color="#00B2EE">[<a href="http://www.cnblogs.com/lxwphp/p/9237312.html" target="_blank" rel="noopener">php中Session使用方法详解</a>]</font><br><font color="#00B2EE">[<a href="https://www.cnblogs.com/mike1314/p/6985457.html" target="_blank" rel="noopener">PHP会话机制—session的基本使用</a>]</font><br><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/php_sessions.asp" target="_blank" rel="noopener">W3school PHP Sessions</a>]</font><p>&emsp;</p><ol><li>注意：session_start()函数之前不能有任何输出,session_start() 函数必须位于 <code>&lt;html&gt;</code> 标签之前：<br><code>&lt;?php session_start(); ?&gt;</code><br><code>&lt;\html&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></li><li>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。 Session以数组的形式使用，如：$_SESSION[‘session名’]</li><li><strong>注册一个会话变量和读取Session</strong></li><li><font color="#FF7F00"><strong>在PHP中使用Session变量，除了要启动之外，还要经过注册的过程</strong></font>。注册和读取Session变量，都要通过访问$_SESSION数组完成。在$_SESSION<font color="#FF7F00"><strong>关联数组</strong></font>中的键名具有和PHP中普通变量相同的命名规则。</li></ol><p>&emsp;</p><h4 id="4-1-开启session"><font color="#3CB371" face="Comic sans MS">4.1 开启session</font><a href="post/PHP-SessionManagement#4-1-开启session"></a></h4><p><strong>使用函数：</strong><font color="#00B2EE"><strong>bool session_start()</strong></font></p><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_http_setcookie.asp" target="_blank" rel="noopener">PHP setcookie(void) 函数</a>]</font><p>首先我们要开启session，那么第一个要学习的函数就是<br>bool session_start()了，这个函数没有参数。在php文件的开始使用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p><h4 id="4-2-注册-添加session数据"><font color="#3CB371" face="Comic sans MS">4.2 (注册)添加session数据</font><a href="post/PHP-SessionManagement#4-2-注册-添加session数据"></a></h4><p>开启会话之后，那么在接下来的处理中，我们就可以使用$_SESSION变量来存取信息了。我们要知道的是$_SESSION变量是个数组。当我们要把信息存入session的时候应该这么写：</p><pre class="line-numbers language-php"><code class="language-php"> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'wang'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p><h4 id="4-3-读取session数据"><font color="#3CB371" face="Comic sans MS">4.3 读取session数据</font><a href="post/PHP-SessionManagement#4-3-读取session数据"></a></h4><p>读取很简单，就像我们使用数组一样，如下：</p><pre class="line-numbers language-php"><code class="language-php">   <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然也可以 $_SESSION[‘userName’] 来用。和<font color="red"><strong>数组一样的使用</strong></font>。</p><p>&emsp;</p><h4 id="4-4-销毁session数据"><font color="#3CB371" face="Comic sans MS">4.4 销毁session数据</font><a href="post/PHP-SessionManagement#4-4-销毁session数据"></a></h4><p>我们可以使用很多种方式来销毁session数据。</p><font color="#00B2EE"><strong>a) unset函数</strong></font><br>我们通过使用类似<br><font color="#00B2EE"></font><pre class="line-numbers language-php"><code class="language-php">   <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'XXX'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来销毁session中的 XXX 变量。</p><blockquote><font color="#FF7F00"><strong>请不要！请不要！请不要unset($_SESSION),会导致后续无法使用$_SESSION这个变量！！！</strong></font></blockquote><p>&emsp;</p><font color="#00B2EE"><strong>b) 空数组赋值给session变量</strong></font><pre class="line-numbers language-php"><code class="language-php">   $\<span class="token package">_SESSION</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>之前我们说过$_SESSOIN变量是个数组，那么空数组赋值的话也是相当于将当前会话的$_SESSION变量中的值销毁。</p></blockquote><p>&emsp;</p><font color="#00B2EE"><strong>c) session_destory() 函数</strong></font><br><strong>这个函数会销毁当前会话中的全部数据，并结束当前会话。但是不会重置当前会话所关联的全局变量， 也不会重置会话 cookie。</strong><br><br><font color="#00B2EE"></font><p>&emsp;</p><h4 id="4-5-session的扩展"><font color="#3CB371" face="Comic sans MS">4.5 session的扩展</font><a href="post/PHP-SessionManagement#4-5-session的扩展"></a></h4><p>我们可以使用很多种方式来销毁session数据。<br>默认session存储在哪里?<br>&emsp;<br>1.在<code>php.ini</code>配置文件中有这么一行 <code>session.save_handler = files</code>,<br>files说明了php默认的是用文件读写的方式来保存session的。那么在哪个目录呢？继续看。session.save_path = “/tmp”,这一行前面有个 ; ，说明是被注释的，不过即便这样，php默认的session 也是保存在这里的，<code>/tmp</code>目录。</p><p>&emsp;<br>&emsp;</p><h3 id="五-SESSION应用实例"><font color="#FF6347" face="Comic sans MS">五. SESSION应用实例</font><a href="post/PHP-SessionManagement#五-SESSION应用实例"></a></h3><h4 id="5-1-登陆例子"><font color="#3CB371" face="Comic sans MS">5.1 登陆例子</font><a href="post/PHP-SessionManagement#5-1-登陆例子"></a></h4><blockquote><p><strong>2个文件：</strong></p><ol><li><font color="#FF7F00">login.php</font>，用于登陆界面；</li><li><font color="#FF7F00">welcome.php</font>，用于接收从login.php的跳转并设置session。</li></ol></blockquote><p><strong>首先建立数据库信息：</strong><br>新建一个名为 login 的数据库，再建一个 user 表，表的结构有2个字段:<br>username  varchar(20)<br>password  varchar(20)</p><p>&emsp;<br>login.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$userName</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从db获取用户信息   数据库信息改成自己的</span>   <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">"select * from user where `username` =  '$username' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//密码验证通过，设置session，把用户名和密码保存在服务端</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//最后跳转到登录后的欢迎页面 //注意：这里我们没有像cookie一样带参数过去</span>       <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: welcome.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- 这里指明页面编码 --></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>           用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>           密  码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>           <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>               <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;<br>welcome.php 这里我们用的是session中的信息,而不是像cookie一样在url中带参数过来</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   welcome<span class="token punctuation">,</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$username</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="5-2-购物车例子"><font color="#3CB371" face="Comic sans MS">5.2 购物车例子</font><a href="post/PHP-SessionManagement#5-2-购物车例子"></a></h4><blockquote><p><strong>3个文件：</strong></p><ol><li><font color="#FF7F00">goodsList.php</font> 这个是商品展示页，还有功能：如果是第一次购买某物品，则在购物车中加入该商品信息和计算总价，如果再次点击购买，则已购商品数量加1，总价重新计算，查看购物车链接可以到购物车页面。</li><li><font color="#FF7F00">buy.php</font> 此页完成购买功能，然后再次跳转到商品列表。主要是做了在session中处理购买商品操作。</li><li><font color="#FF7F00">shoppingCart.php</font> 此页展示购物车中的商品、价格、总价等信息。</li></ol></blockquote><p>&emsp;<br><strong>首先建立数据库信息：</strong><br>建立名为test的数据库，库中有个shop表，表结构有3个字段：<br>id  int(10)<br>name  varchar(20)<br>price  varchar(20)</p><p>&emsp;<br>goodsList.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$goods</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从数据库获取商品信息存入$goods二维数组</span>   <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里请换上自己的数据库相关信息</span>   <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'select * from shop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里把商品信息放到$goods二维数组，每一维存的是单个</span>   <span class="token comment" spellcheck="true">//商品的信息，比如商品名、价格。</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>   <span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//取出商品信息显示在页面上，并添加购买功能</span>       <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$goods</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">echo</span> <span class="token string">' 商品名 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">' 价格 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">echo</span> <span class="token string">"&lt;a href=buy.php?name="</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&amp;price='</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token string">">购买&lt;/a>"</span><span class="token punctuation">;</span>           <span class="token keyword">echo</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token delimiter">?></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shoppingCart.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>查看购物车<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>buy.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//开启session</span>   <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取传过来的商品名和价格</span>   <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$price</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把session中的商品信息和传过来的(刚买的)商品信息对比</span>   <span class="token variable">$goods</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'goods'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//买过的话，则总价格增加，相应商品数量增加</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'totalPrice'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//第一次买的话，将相应的商品信息添加到session中</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>       <span class="token variable">$goods</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'totalPrice'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'goods'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$goods</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//购买处理完毕后跳转到商品列表</span>   <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'location: goodsList.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>shoppingCart.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将session中的商品信息(即购物车中的商品)和总价显示到页面</span><span class="token variable">$goods</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'goods'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'您买了:&lt;br />'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$goods</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">' 价格 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">' 数量 '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'总价：'</span> <span class="token punctuation">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'totalPrice'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goodsList.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>返回商品列表<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>效果图如下：</p><div class="article-img"><p><img src="https://i.loli.net/2019/02/26/5c7522ea3d61f.png" alt="1" data-zoomable></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(。・∀・)ノ&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="Treecatee.gitgub.io/categories/PHP/"/>
    
    
      <category term="PHP语言" scheme="Treecatee.gitgub.io/tags/PHP%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>PHP操作MySQL数据库</title>
    <link href="Treecatee.gitgub.io/post/php-mysql/"/>
    <id>Treecatee.gitgub.io/post/php-mysql/</id>
    <published>2019-02-24T02:32:17.000Z</published>
    <updated>2019-02-27T17:13:19.685Z</updated>
    
    <content type="html"><![CDATA[<p>😁<br><a id="more"></a><br>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>PHP操作MySQL数据库</strong></font></center><p>&emsp;<br>&emsp;</p><h3 id="一-数据库连接步骤"><font color="#FF6347" face="Comic sans MS">一. 数据库连接步骤</font><a href="post/PHP-MySQL#一-数据库连接步骤"></a></h3><p>将数据库连接整理成了最重要的<font color="#FF7F00"><strong>8个步骤</strong></font>，我戏称它为：“数据库连接天龙八步”。😊  (。・∀・)ノ</p><p>&emsp;</p><h4 id="第一步-连接数据库服务器"><font color="#3CB371" face="Comic sans MS">第一步:  连接数据库服务器</font><a href="post/PHP-MySQL#第一步-连接数据库服务器"></a></h4><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_connect.asp" target="_blank" rel="noopener">PHP mysql_connect() 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_connect()</td></tr><tr><td style="text-align:center">函数原型</td><td style="text-align:left">mysql_connect(server,user,pwd,newlink,clientflag)</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">连接到mysql数据库服务器</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">如果成功，则返回一个 MySQL 连接标识，失败则返回 FALSE。</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">主机</td></tr><tr><td style="text-align:center">参数2</td><td style="text-align:left">数据库服务器登陆名</td></tr><tr><td style="text-align:center">参数3</td><td style="text-align:left">密码</td></tr><tr><td style="text-align:center">参数4</td><td style="text-align:left">数据库的名称</td></tr><tr><td style="text-align:center">参数5</td><td style="text-align:left">数据库服务器端口不填默认3306</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>对于参数4，数据库名称在此步已填并择，不需要执行第三步。</strong></font></blockquote><p>&emsp;</p><h4 id="第二步-判断错误"><font color="#3CB371" face="Comic sans MS">第二步:  判断错误</font><a href="post/PHP-MySQL#第二步-判断错误"></a></h4><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_errno.asp" target="_blank" rel="noopener">PHP mysqli_errno() 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_errno(connection)</td></tr><tr><td style="text-align:center">功能/返回值</td><td style="text-align:left">返回连接错误号，无错误返回0</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect()返回的资源可选。规定 SQL 连接标识符。如果未规定，则使用上一个<br>打开的连接。</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#FF7F00"><strong>如果mysqli_errno()函数返回错误号，则用mysqli_error()显示文本错误信息。</strong></font>&emsp;<font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_error.asp" target="_blank" rel="noopener">PHP mysql_error() 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_error(connection)</td></tr><tr><td style="text-align:center">功能/返回值</td><td style="text-align:left">返回连接错误字符串，如果没有出错则返回 ‘’（空字符串）</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="第三步-选择数据库"><font color="#3CB371" face="Comic sans MS">第三步:  选择数据库</font><a href="post/PHP-MySQL#第三步-选择数据库"></a></h4><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_select_db.asp" target="_blank" rel="noopener">PHP mysqli_select_db() 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysql_selecti_db(connection,database)</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">如果成功，则该函数返回 true。如果失败，则返回 false。</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">选择本连接中的<strong>数据库</strong></td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr><tr><td style="text-align:center">参数2</td><td style="text-align:left">需要连接的数据库名</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>若在第一步已填数据库，不需要更换成其他数据库，则不需要执行第三步。</strong></font></blockquote><p>&emsp;</p><h4 id="第四步-设置字符集"><font color="#3CB371" face="Comic sans MS">第四步:  设置字符集</font><a href="post/PHP-MySQL#第四步-设置字符集"></a></h4><font color="#00B2EE">[<a href="http://www.runoob.com/php/func-mysqli-set-charset.html" target="_blank" rel="noopener">PHP mysqli_set_charset 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_set_charset(connection,charset)</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">设置与mysql服力器连接，结果，校验字符集</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">无返回值</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr><tr><td style="text-align:center">参数2</td><td style="text-align:left">字符集类型</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="第五步-准备SQL语句"><font color="#3CB371" face="Comic sans MS">第五步:  准备SQL语句</font><a href="post/PHP-MySQL#第五步-准备SQL语句"></a></h4><font color="#FF7F00"><strong>其实就是一个SQL语句的字符串，用于对MySQL数据库的操作。这一步很重要！</strong></font> <p>&emsp;<br>例如：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user(username,password) values('$username','$password')"</span><span class="token punctuation">;</span><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"peter"</span><span class="token punctuation">,</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Could not connect: '</span> <span class="token punctuation">.</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// some code</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>我们通常要把变量赋值在SQL语句中使用。可是变量或者SQL语句出错了，非常不好排查。</li><li>我们根据实际工作经验增加了这一步。</li><li>如果在执行此步的时候报错了，我们可以把SQL语句打印出来，粘贴到phpMyAdmin或者相关工具中。</li><li>排错时，如果执行成功就说明不是SQL语句的问题。如果执行失败，请仔细检查SQL语句。</li></ol></blockquote><p>&emsp;</p><h4 id="第六步-发送SQL语句"><font color="#3CB371" face="Comic sans MS">第六步:  发送SQL语句</font><a href="post/PHP-MySQL#第六步-发送SQL语句"></a></h4><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_query.asp" target="_blank" rel="noopener">PHP mysqli_query() 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:left">发送SQL语句,执行一条 MySQL 查询。</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">mysqli_query() 仅对 SELECT，SHOW，EXPLAIN 或 DESCRIBE 语句<strong>返回一个资源标识符</strong>，<br>如果查询执行不正确则返回 FALSE。</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr><tr><td style="text-align:center">参数2</td><td style="text-align:left">传入发送的SQL语句。注意：查询字符串不应以分号结束。</td></tr></tbody></table></div></div><blockquote><ol><li>SQL语句准备完成，需要通过mysqli_query将SQL语句发送给MySQL服务器。</li><li>MySQL服务器会执行发送过来的SQL语句进行执行。</li></ol></blockquote><p>&emsp;</p><h4 id="第七步-判断是否执行正常或者遍历数据"><font color="#3CB371" face="Comic sans MS">第七步:  判断是否执行正常或者遍历数据</font><a href="post/PHP-MySQL#第七步-判断是否执行正常或者遍历数据"></a></h4><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_fetch_array.asp" target="_blank" rel="noopener">PHP mysqli_fetch_array() 函数</a>]</font><br>读取第6步中，发送的是select类别的语句，<font color="#FF7F00"><strong>通常需要将结果以数组形式输出显示出来</strong></font>。就需要用到遍历显示数据的函数。<br><br><font color="red"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_fetch_array(data,array_type)</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">得到result结果集中的数据，返回数组进行遍历</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">可选。规定要使用的数据指针。该数据指针是 mysqli_query() 函数产生的结果。</td></tr><tr><td style="text-align:center">参数2</td><td style="text-align:left">可选。规定返回哪种结果。可能的值：<br>MYSQL_ASSOC - 关联数组<br>MYSQL_NUM - 数字数组<br>MYSQL_BOTH - 默认。同时产生关联和数字数组</td></tr></tbody></table></div></div><p>&emsp;<br>下面举例几个常用的<strong>将mysqli_query()查询得到的字符串处理成数组的函数</strong>…….</p><font color="red"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">mysqli_fetch_assoc(data)</td><td style="text-align:left">返回根据从结果集取得的行生成的<strong>关联数组</strong>，如果没有更多行，则返回 false</td></tr><tr><td style="text-align:center">mysqli_fetch_row(data)</td><td style="text-align:left">返回根据从结果集取得的行生成的<strong>索引数组</strong>，如果没有更多行，则返回 false</td></tr><tr><td style="text-align:center">mysqli_fetch_object(data)</td><td style="text-align:left">从结果集（记录集）中取得一行作为对象。<br>若成功的话，本函数从 mysql_query() 获得一行，并返回一个对象。如果失败<br>或没有更多的行，则返回 false。</td></tr><tr><td style="text-align:center">mysqli_num_rows(data)</td><td style="text-align:left">返回结果集中行的数目。此命令仅对 SELECT 语句有效。<br>要取得被 INSERT，UPDATE 或者 DELETE 查询所影响到的行的数目，<br>用 mysqli_affected_rows()。</td></tr><tr><td style="text-align:center">mysqli_fetch_field</td><td style="text-align:left">从结果集中取得列信息并作为对象返回。</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="第八步-关闭数据库"><font color="#3CB371" face="Comic sans MS">第八步:  关闭数据库</font><a href="post/PHP-MySQL#第八步-关闭数据库"></a></h4><font color="#00B2EE">[<a href="http://www.w3school.com.cn/php/func_mysql_close.asp" target="_blank" rel="noopener">PHP mysql_close() 函数</a>]</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_close(link_identifier)</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">关闭数据库连接</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">如果成功则返回 true，失败则返回 false。</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><p>&emsp;</p><font color="red" face="Comic sans MS"><strong>其他：显示服务器信息函数</strong></font> <div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_get_server_info</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">返回服务器信息</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">函数</td><td style="text-align:left">mysqli_get_server_version</td></tr><tr><td style="text-align:center">功能</td><td style="text-align:left">返回服务器版本</td></tr><tr><td style="text-align:center">参数1</td><td style="text-align:left">传入mysqli_connect返回的资源</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br>mysqli只学过程化的方法即可。在面向对象阶段实际工作中完全抛弃了mysqli的对象用法，而是使用的是PDO对象连接数据库的方式。</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="二-通过步骤做一个用户注册实例"><font color="#FF6347" face="Comic sans MS">二. 通过步骤做一个用户注册实例</font><a href="post/PHP-MySQL#二-通过步骤做一个用户注册实例"></a></h3><blockquote><p><font color="#FF7F00"><strong>我们做一个最简单的注册页面。注册页面中有三个参数：</strong></font></p><ol><li>用户名</li><li>密码</li><li>重复密码</li></ol><ul><li>用户写好三个参数后，点击提交的时候向<code>connect.php</code>页面中传入POST记录。</li><li>我们可以把<code>POST记录</code>处理后写入到MySQL数据库中，即完成了用户注。</li></ul></blockquote><blockquote><p><font color="#FF7F00"><strong>本例用到的两个文件：</strong></font></p><ol><li><code>index.php</code>：表单页面；</li><li><code>connect.php</code>：处理表单的页面。</li></ol></blockquote><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>一、 判断重复密码：</strong></font><blockquote><p>1.<strong>由于有重复密码，</strong><font color="#FF7F00"><strong>如果用户两次输入的密码不一致也就是有没有进行下一步的任何意义。</strong></font><br>2.<font color="#FF7F00"><strong>在网页中很多地方还是使用到了重复密码。</strong></font><strong>因为，害怕的是用户产生手误。将密码填写出错。</strong><br>3.<font color="#FF7F00"><strong>用户在输入密码的时候可能在左右两边多打两个空格。因此，我们会使用trim将密码和重复密码的两边去掉空格。</strong></font></p></blockquote><p>&emsp;<br>代码如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'repassword'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'两次密码不一致,请返回上一页'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>二、 准备好写入的数据：</strong></font><br>我们需要把用户的<strong>输入数据</strong>和<strong>隐藏的数据</strong>都写入到数据库。<br><br><font color="red"><strong>可见数据有：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">$_POST[‘username’]</td><td style="text-align:left">用户名</td></tr><tr><td style="text-align:center">$_POST[‘password’]</td><td style="text-align:left">密码</td></tr></tbody></table></div></div><blockquote><ol><li>我们需要把用户名去掉两边的空格，这样避免输入不必要的这些信息。</li><li>在mysql这一章节我们讲过，用户的密码不要让包括公司内部人员可见。保证密码是不可逆向的。在初级阶段大家学习一下MD5即可。以后我们再教大家其他的加密方式。</li></ol></blockquote><font color="red"><strong>不可见数据有：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">$time</td><td style="text-align:left">用户的注册时间</td></tr><tr><td style="text-align:center">$_SERVER[‘REMOTE_ADDR’]</td><td style="text-align:left">用户的注册IP</td></tr></tbody></table></div></div><blockquote><ol><li>time返回的unix时间戳</li><li>REMOTE_ADDR返回的是IP地址，我们可以用ip2long将其转为整型存储。</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">ip2long</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>三、连接数据库、判断错误、选择库和字符集：</strong></font><blockquote><ol><li>我们使用mysqli_connect连接到数据库服务器。</li><li>如果有错误，使用mysqli_errno得到错误号</li><li>如何时存在错误mysqli_error打印出所有的错误，并且退出程序执行</li><li>选择数据库并且设置字符集为utf8.</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//连接数据库</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'liwenkaihaha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果有错误，存在错误号</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_errno</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//选择数据库</span><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择字符集</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>四、组合SQL语句：</strong></font><br>我们需要把得到的信息写入到数据库里面去，用户名、密码、创建时间、IP我们都得到了。<br><br>将对应的变量插入到SQL语句中即可。组合出来的SQL语句如下：<br><font color="#00B2EE"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user(username,password,createtime,createip) values('"</span> <span class="token punctuation">.</span> <span class="token variable">$username</span> <span class="token punctuation">.</span> "'<span class="token punctuation">,</span><span class="token string">'" . $password . "'</span><span class="token punctuation">,</span><span class="token string">'" . $time . "'</span><span class="token punctuation">,</span><span class="token string">'" . $ip . "'</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br>而我们的创建表的语句如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createtime <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createip <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>表的格式（字段对应说明）：</p><font color="#00B2EE"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">username</th><th style="text-align:center">password</th><th style="text-align:center">createtime</th><th style="text-align:center">createip</th></tr></thead><tbody><tr><td style="text-align:center">用户编号</td><td style="text-align:center">用户名</td><td style="text-align:center">密码</td><td style="text-align:center">创建时间</td><td style="text-align:center">创建IP</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>五、发送语句，判断状态：</strong></font><blockquote><p>mysqli_query我们在上面说过，需要传入两个参数：</p><ol><li>连接的资源，在这里对应的变量是$conn。</li><li>发送的SQL语句。在上面已经准备好了$sql。</li></ol></blockquote><blockquote><p>SQL语句可以通过mysqli_query发送给MySQL服务器。发送成功$result则为true。否则为false。<br>成功的话，我们就可以提示用户注册成功啦。<br>有些情况下，可能还需要使用到<strong>mysqli_insert_id()</strong>。功能是获取上面通过insert插入数据的id并返回这个id。<br>mysqli_insert_id应用场景：新加的一个行的数据。我们需要得到自动增长的ID值，将这个ID值插入到另外一个表里面去时。就需要用到这个函数。</p></blockquote><p>&emsp;</p><p><code>mysqli_insert_id()</code>使用举例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'注册成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'注册失败'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'当前用户插入的ID为'</span><span class="token punctuation">.</span><span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>六、关闭数据库连接：</strong></font><p>将资源变量传到到mysqli_close这个函数里面即可。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>&emsp;<br>&emsp;<br>先建立test数据库、user数据表。数据表建立语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span>username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createtime <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>createip <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>1. <code>index.php</code>表单页面：</strong></font><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connect.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    用户名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    重复密码：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><font color="red"><strong>2. <code>connect.php</code>页面完整代码：</strong></font><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'repassword'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'两次密码不一致,请返回上一页'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo $username."/".$password."/".$time."/".$ip;</span><span class="token comment" spellcheck="true">//如果有错误，存在错误号</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_errno</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into user(username,password,createtime,createip) values ('$username','$password','$time','$ip')"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'失败'</span><span class="token punctuation">;</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"错误为："</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"返回值："</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'当前用户插入的ID为'</span> <span class="token punctuation">.</span> <span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="三-通过步骤做一个列表显示实例"><font color="#FF6347" face="Comic sans MS">三. 通过步骤做一个列表显示实例</font><a href="post/PHP-MySQL#三-通过步骤做一个列表显示实例"></a></h3><font color="#00B2EE">[<a href="http://www.php.cn/code/1262.html" target="_blank" rel="noopener">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4977.html" target="_blank" rel="noopener">视频</a>]</font><p>&emsp;<br>&emsp;</p><h3 id="四-通过步骤操作之把用户做个分页"><font color="#FF6347" face="Comic sans MS">四. 通过步骤操作之把用户做个分页</font><a href="post/PHP-MySQL#四-通过步骤操作之把用户做个分页"></a></h3><font color="#00B2EE">[<a href="http://www.php.cn/code/1273.html" target="_blank" rel="noopener">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4978.html" target="_blank" rel="noopener">视频</a>]</font><p>&emsp;<br>&emsp;</p><h3 id="五-批量和指定删除用户"><font color="#FF6347" face="Comic sans MS">五.  批量和指定删除用户</font><a href="post/PHP-MySQL#五-批量和指定删除用户"></a></h3><p>上面已经学过了通过步骤做一个列表显示，在删除前，<font color="#FF7F00"><strong>有单行删除数据和删除多行数据</strong></font>。</p><p>&emsp;</p><h4 id="5-1-判断是单选还是多选删除"><font color="#3CB371" face="Comic sans MS">5.1 判断是单选还是多选删除</font><a href="post/PHP-MySQL#5-1-判断是单选还是多选删除"></a></h4><blockquote><ol><li><font color="#FF7F00"><strong>单行是通过get传参的方式</strong></font>向delete.php文件中写上对应的ID。</li><li>而<font color="#FF7F00"><strong>多个删除是通过POST的方式</strong></font>向delete.php页面中传递对应的ID。</li><li>如果这两个都不符合的话，那我们可以视为数据不合法。</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'数据不合法'</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="5-2-组合SQL语句"><font color="#3CB371" face="Comic sans MS">5.2 组合SQL语句</font><a href="post/PHP-MySQL#5-2-组合SQL语句"></a></h4><blockquote><ol><li>MySQL这一章讲解过<font color="#FF7F00"><strong>删除时可以使用到in的子语句</strong></font>。</li><li>同样在这里，我们就可以用in的子语句来达到效果。</li><li><font color="#FF7F00"><strong>join函数将多选删除传过来的id变为了3,4,5的格式</strong></font>，最终多选删除的SQL语句执行出来的效果就是：</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php">delete from user where id <span class="token function">in</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>而单选删除的语句效果就是：</p><pre class="line-numbers language-php"><code class="language-php">delete from user where id <span class="token function">in</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>这样我们就实现了单选和多选自适应效果：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"delete from user where id in($id)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>最终配套而成的整体代码演示如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'connection.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'数据不合法'</span><span class="token punctuation">;</span>   exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"delete from user where id in($id)"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'删除成功'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string">'删除失败'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="六-通过步骤修改用户信息"><font color="#FF6347" face="Comic sans MS">六. 通过步骤修改用户信息</font><a href="post/PHP-MySQL#六-通过步骤修改用户信息"></a></h3><p>内容有点多，等哪天想起来了或者心情好了再写吧…..(✿◡‿◡)</p><font color="#00B2EE">[<a href="http://www.php.cn/code/1277.html" target="_blank" rel="noopener">教程</a>]</font><br><font color="#00B2EE">[<a href="http://www.php.cn/code/4980.html" target="_blank" rel="noopener">视频</a>]</font><p>&emsp;<br>&emsp;</p><h3 id="七-数据显示乱码终极解决办法"><font color="#FF6347" face="Comic sans MS">七. 数据显示乱码终极解决办法</font><a href="post/PHP-MySQL#七-数据显示乱码终极解决办法"></a></h3><p>解决乱码问题的核心思想，就是：<font color="#FF7F00"><strong>一定要多个不同的文件系统中一定要统一编码</strong></font>。</p><p>&emsp;<br>总结成了9个要点来彻底解决连接后乱码的问题。</p><blockquote><ol><li><font color="#00B2EE"><strong>html编码与MySQL编码一致</strong></font></li><li><font color="#00B2EE"><strong>PHP编码与MySQL编码一致</strong></font></li><li><font color="#00B2EE"><strong>若有header头发送字符集，请与数据库一样</strong></font></li><li><font color="#00B2EE"><strong>&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf-8” /&gt;要和页面的文字编码一致</strong></font></li><li><font color="#00B2EE"><strong>数据库建库的字符集要统一</strong></font></li><li><font color="#00B2EE"><strong>表的字符集要统一</strong></font></li><li><font color="#00B2EE"><strong>列的字符集要统一(表设了,列就默认写表的)</strong></font></li><li><font color="#00B2EE"><strong>连接,校验的字符集要统一</strong></font></li><li><font color="#00B2EE"><strong>结果集的字符集要统一</strong></font></li></ol></blockquote><p>&emsp;<br>&emsp;<br>&emsp;</p><font color="#FF7F00"><strong>一、 文件编码</strong></font><br>html和PHP文件的编码，示例中：拿notepad++来演示。将PHP和html都要设为这种字符集。<br>一定要设置为utf-8无BOM格式。<br><br><img src="https://i.loli.net/2019/02/24/5c72764c43d27.png" alt="1"><br><br>&emsp;<br><font color="#FF7F00"><strong>二、 header头编码</strong></font><br>如果php中有header头，一定要是<strong>utf-8</strong>的<br><font color="red"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p><font color="#FF7F00"><strong>三、网页头文件编码</strong></font><br>如果html文件编码是utf-8的也要设置为一置<br><font color="red"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token markup">&lt;meta http-equiv=“Content-Type”content=“text/html; charset=utf-8” /></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p><font color="#FF7F00"><strong>四、创建数据库的编码</strong></font><div class="article-img"><p><img src="https://i.loli.net/2019/02/24/5c72789c325a2.png" alt="2" data-zoomable></p></div><p>&emsp;</p><font color="#FF7F00"><strong>五、表和列创建的时候表为utf-8</strong></font><div class="article-img"><p><img src="https://i.loli.net/2019/02/24/5c7278e24b5ad.png" alt="3.png" data-zoomable></p></div><p>&emsp;</p><font color="#FF7F00"><strong>六、连接，结果、校验字符集设置</strong></font><blockquote><font color="#00B2EE"><strong>1.通过mysqli_set_charset(‘utf8’)来MySQL连接、结果和校验的字符集设置。<br>2.注：数据库的字符集声明和文件中的略有不同。</strong></font><font color="red"><strong>utf8为mysql数据库的，utf-8为文件中使用的。</strong></font></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;😁&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="Treecatee.gitgub.io/categories/PHP/"/>
    
    
      <category term="PHP语言" scheme="Treecatee.gitgub.io/tags/PHP%E8%AF%AD%E8%A8%80/"/>
    
      <category term="MySQL" scheme="Treecatee.gitgub.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL入门</title>
    <link href="Treecatee.gitgub.io/post/mysql-primer/"/>
    <id>Treecatee.gitgub.io/post/mysql-primer/</id>
    <published>2019-02-23T06:23:42.000Z</published>
    <updated>2019-02-25T10:57:56.282Z</updated>
    
    <content type="html"><![CDATA[<p>内容好多啊◑﹏◐<font color="#00B2EE">[<a href="http://www.php.cn/code/4954.html" target="_blank" rel="noopener">那看视频吧…..</a>]</font> ٩(๑❛ᴗ❛๑)۶  (๑&gt;◡&lt;๑)</p><a id="more"></a><p>&ensp;<br>&ensp;</p><center><font color="#00B2EE" face="Comic sans MS" size="5"><strong>MySQL入门</strong></font></center><p>&emsp;<br>&emsp;</p><h3 id="一-MySQL介绍"><font color="#FF6347" face="Comic sans MS">一. MySQL介绍</font><a href="post/MySQL-Primer#一-MySQL介绍"></a></h3><font color="#FF7F00"><strong>1.</strong></font>  MySQL数据库简称MySQL，是一款由瑞典MySQL AB公司开发并且应用广泛的数据管理系统，MySQL数据库因其<font color="#FF7F00">体积小、速度快、总体拥有成本低</font> 受到很多的热捧。现在,MySQL的所有者世界上最著名的数据库企业——Oracle所有。<br><br><font color="#FF7F00"><strong>2.</strong></font>  MySQL的应用，在国内的企业包括：百度、阿里、腾讯、新浪、搜狐、网易等等企业，全部都在使用MySQL数据库。<br><br><font color="#FF7F00"><strong>3.</strong></font>  MySQL是一种<font color="#FF7F00"><strong>开放源代码的关系型数据库管理系统（RDBMS）</strong></font> ，MySQL数据库系统使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。<br>由于MySQL是开放源代码的，因此任何人都可以在GPL的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。大多数人都认为在不需要事务化处理的情况下，MySQL是管理内容最好的选择。<br><br><font color="#FF7F00"><strong>4.</strong></font>  PHP与很多数据库结合都很紧密。由于，PHP和MySQL都是开源免费的。所以PHP一直对于MySQL等数据库都有很好的支持。<br><br><br>&emsp;<br>&emsp;<br><font color="#FF7F00"></font><blockquote><p><font color="#FF7F00"><strong>数据库的五个基本单位</strong></font></p><ol><li>数据库服务器</li><li>数据库</li><li>数据表</li><li>数据字段(列)</li><li>数据行</li></ol></blockquote><p>&emsp;</p><font color="#00B2EE"><strong>1. 数据库服务器。</strong></font>是指用来运行数据库服务的一台电脑。在中小型企业通常为一台。在数据存储量计算量很大的时候可以存在多台。多台数据库服务器共同来存储或计算。由于数据安全非常重要，我们经常会对数据库服务器里面的数据进经备份。<br><br><font color="#00B2EE"><strong>2. 数据库。</strong></font>一个数据库服务器里面有可以有多个数据库。主要用来分类使用。我们可以建立交通信息数据库、游戏数据库、酒店开房数据库… … 主要用来将各个不同用途的数据，按照业务进行大块的划分。<br><br><font color="#00B2EE"><strong>3. 数据表。</strong></font>例如在游戏数据库中。根据这一款游戏又分为了不同的数据表。专门用来区分游戏不同的数据。例如：用户数据（用户、密码）；人物数据；所有装备和装备信息；用户的充值信息；药品、魔力药水信息… …等<br><br><font color="#00B2EE"><strong>4. 数据字段，也叫数据列。</strong></font>就是我们日常所见表格里面的列。在表格中，我们会将一张用户表分成多个列。如下（表一）所示：用户编号、用户名、性别、年龄是字段。在真正的数据库中数据字段需要换成英文需要写成：id、username、sex、年龄。<br><br><font color="#00B2EE"><strong>5. 数据行。</strong></font>真正的数据存在每一个表的行里面。字段（列）划分出来了一个表应该按照什么样的格式存数据。而行，是真正的数据。每一行需要遵循数据字段（列）的规范和要求进行存入数据。<br><br>(表一)<br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">用户编号</th><th style="text-align:center">用户名</th><th style="text-align:center">性别</th><th style="text-align:center">年龄</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">李文凯</td><td style="text-align:center">男</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">景田</td><td style="text-align:center">女</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">宁泽涛</td><td style="text-align:center">男</td><td style="text-align:center">22</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h3 id="二-数据库语句操作类型"><font color="#FF6347" face="Comic sans MS">二. 数据库语句操作类型</font><a href="post/MySQL-Primer#二-数据库语句操作类型"></a></h3><font color="#FF7F00"><strong>1.</strong></font> 学习数据库安装后，最重要的就是学习SQL语句。<br><br><font color="#FF7F00"><strong>2.</strong></font> SQL是操作数据库的核心，也是本章开始的一句话：MySQL对于PHP程序员来说就是将业务转化成表结构。做好业务中的<font color="#FF7F00"><strong>增、删、改、查</strong></font>。<br><br><font color="#FF7F00"><strong>3.</strong></font> 结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；<font color="#FF7F00"><strong>同时也是数据库脚本文件的扩展名</strong></font>。<br><br>&emsp;<br><font color="#00B2EE"><strong>一. 数据库操作语句类型（DQL、DML、DDL、DCL）简介</strong></font><br><font color="#00B2EE"><strong>1. 数据查询语言DQL</strong></font><br><strong>数据查询语言DQL基本结构是由</strong><font color="#FF7F00"><strong>SELECT子句，FROM子句，WHERE子句</strong></font><strong>组成的查询块：</strong><br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">语句</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">SELECT</td><td style="text-align:left">&lt;字段名表&gt;</td></tr><tr><td style="text-align:center">FROM</td><td style="text-align:left">&lt;表或视图名&gt;</td></tr><tr><td style="text-align:center">WHERE</td><td style="text-align:left">&lt;查询条件&gt;</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#00B2EE"><strong>2 .数据操纵语言DML</strong></font><br><font color="#FF7F00"><strong>用于添加、删除、更新和查询数据库记录，并检查数据的完整性。</strong></font>数据操纵语言DML主要有三种形式：<br>1) 插入：INSERT<br>2) 更新：UPDATE<br>3) 删除：DELETE<br><br>&emsp;<br><font color="#00B2EE"><strong>3. 数据定义语言DDL</strong></font><br>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等。注意：<strong>DDL操作是隐性提交的！不能rollback</strong><br>常用的语句关键字包括<br>1) CREATE：创建<br>2) DROP：删除<br>3) ALTER：修改<br><br><br><font color="#00B2EE"><strong>4. 数据控制语言DCL</strong></font><br>用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。<br>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制。数据库操纵事务发生的时间及效果，对数据库实行监视等。如：<br>1) GRANT：授权<br>2）REVOLK：撤销<br><br><br>&emsp;<br>&emsp;<br><font color="#FF7F00"></font><h3 id="三-连接数据库"><font color="#FF6347" face="Comic sans MS">三. 连接数据库</font><a href="post/MySQL-Primer#三-连接数据库"></a></h3><font color="#00B2EE"><strong>方法一</strong></font><br>安装后，可以在开始菜单的列表中找到MySQL Command Line 点击操作的命令行终端操作。<br><br><font color="#00B2EE"><strong>方法二</strong></font><br>如果加入到了windows的环境变量中，可以在命令行下直接操作。<br>在命令行下，通过以下命可以连接到数据库服务器：mysql -h localhost -u root -p<br><br>参数说明：<br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">-h</td><td style="text-align:left">表示数据库连接地址，连接本机可不填</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:left">表示要登录的用户</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:left">表示使用密码登录</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注：</strong></font>通常我们不直接输入密码。而是在回车之后，输入密码。因为，密码输入时的字符是不可见的，输完密码直接回车登录。防止旁边有人把重要的密码看走。</p></blockquote><p>&emsp;<br>如果没有什么别的问题，登陆成功之后会出现下面内容：</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql -u root -p Enter password:  Welcome to the MySQL monitor.  Commands end with ; or \g. Your MySQL connection id is 7 Server version: 5.6.25 MySQL Community Server (GPL)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql>上面的中文意思翻译过来是说，欢迎使用MySQL的命令行操作工具。每一个命令结束可以输入\g 或者 ;mysql当前是第 7次连接。当前数据库的版本是5.6.25社区支持版。遵循GPL协议。版权所有：2000至 2015。归Oracle及其子机构拥有所有权。如果需要帮助的话，通过 ‘help;’ 或者 ‘\h’ 命令来显示帮助内容，通过 ‘\c’ 命令来清除命令行历史。mysql>mysql > 表示等待输入指令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注：</strong></font><br>在登陆成功后有这么一句提示，可能大家不太理解：<br>Your MySQL connection id is 7<br>表示第7次连接登陆，每登陆一次这个id为加1。下一次显示的会是第8次。</p></blockquote><p>&emsp;<br>&emsp;</p><h3 id="四-数据库操作"><font color="#FF6347" face="Comic sans MS">四. 数据库操作</font><a href="post/MySQL-Primer#四-数据库操作"></a></h3><h4 id="4-1-创建数据库"><font color="#3CB371" face="Comic sans MS">4.1 创建数据库</font><a href="post/MySQL-Primer#4-1-创建数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>CREATE DATABASE 数据库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">CREATE DATABASE 数据库名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">CREATE DATABASE PHP;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">创建一个数库，数据库的名字为PHP</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>注意：<br>一个MySQL语句结尾是以英语分号(;)结束的，千万不要忘记了，不然语句是错误的！</strong></font></blockquote><p>&emsp;<br>示例：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">CREATE</span> <span class="token constant">DATABASE</span> <span class="token constant">PHP</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ol><li>“Query OK” 表示上面的命令执行成功，所有的 DDL 和 DML(不包 括 SELECT)操作执行成功后都显示“Query OK”，这里理解为执行成功就可以了；“1 row affected” 表示操作只影响了数据库中一行的记录，“0.00 sec”则记录了操作执行的时间。</li><li>如果已经存在这个数据库，系统会怎么提    示:</li></ol></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">CREATE</span> <span class="token constant">DATABASE</span> <span class="token constant">PHP</span><span class="token punctuation">;</span> <span class="token constant">ERROR</span> <span class="token function">1007</span> <span class="token punctuation">(</span><span class="token constant">HY000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Can<span class="token string">'t create database '</span><span class="token constant">PHP</span>'<span class="token punctuation">;</span> database exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="4-2-查看数据库"><font color="#3CB371" face="Comic sans MS">4.2 查看数据库</font><a href="post/MySQL-Primer#4-2-查看数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>show databases;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">show databases;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">显示当前服务器的所有数据库</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br>show 是指显示<br>database 是指数据库<br>databases 是数据库的复数形式，指全部数据库。</p></blockquote><p>&emsp;</p><h4 id="4-3-选中数据库"><font color="#3CB371" face="Comic sans MS">4.3 选中数据库</font><a href="post/MySQL-Primer#4-3-选中数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>use 库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">use 库名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">use PHP</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">使用数据库PHP</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li><font color="#FF7F00"><strong>在一个数据库里面处理数据的时候，必须先进入这个数据库，即先use 库名;</strong></font></li><li>use 是指使用；</li><li>库名 是存在当前数据库系统中的具体的数据库的名称；</li><li>出现 ” Database changed“ 表示切换成功。然后，看看mysql数据库里面有什么内容（和查看当前数据库服务器数据库一样使用 show 语句）</li></ol></blockquote><p>&emsp;</p><h4 id="4-4-查看数据库中的表"><font color="#3CB371" face="Comic sans MS">4.4 查看数据库中的表</font><a href="post/MySQL-Primer#4-4-查看数据库中的表"></a></h4><p>基本语法：<font color="#00B2EE"><strong>show tables;</strong></font><br>前提是先：<font color="#00B2EE"><strong>use 库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">show tables;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">显示当前数据库下所有的表</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="4-5-删除数据库"><font color="#3CB371" face="Comic sans MS">4.5 删除数据库</font><a href="post/MySQL-Primer#4-5-删除数据库"></a></h4><p>基本语法：<font color="#00B2EE"><strong>DROP DATABASE 库名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">DROP DATABASE 库名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">DROP DATABASE  PHP;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">删除一个数库，数据库的名字为liwenkai</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>drop 是汉语可以翻译为指掉下来，不要了的意思</li><li>database 是指库</li><li>库名 是指要删掉的库的名称</li></ol></blockquote><p>示例：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">DROP</span> <span class="token constant">DATABASE</span>  <span class="token constant">PHP</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ol><li><font color="#FF7F00"><strong>【切记】注：数据库删除后，下面的所有数据都会全部删除，所以删除前一定要慎重并做好相应的备份。（若重要数据未备份，而实际中产生的数据风险很高。）</strong></font></li><li>一定要指定好要删除的数据库的名字。</li></ol></blockquote><p>&emsp;<br>&emsp;</p><h3 id="五-数据表操作"><font color="#FF6347" face="Comic sans MS">五. 数据表操作</font><a href="post/MySQL-Primer#五-数据表操作"></a></h3><h4 id="5-1-创建数据表"><font color="#3CB371" face="Comic sans MS">5.1 创建数据表</font><a href="post/MySQL-Primer#5-1-创建数据表"></a></h4><p>基本语法：<font color="#00B2EE"><strong>CREATE TABLE 表名(字段名1 字段类型,….字段名n 字段类型n);</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">CREATE TABLE 表名(字段名1 字段类型,….字段名n 字段类型n);</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">CREATE TABLE user(username varchar(20),password varchar(32));</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">创建一个表名叫user的表，第一个字段(列)为username、表的字段类型为varchar、长度为32个<br>长度。第二个字段为password，类型也为varchar，长度也为32个长度。</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="5-2-查看表字段-列-结构信息"><font color="#3CB371" face="Comic sans MS">5.2 查看表字段(列)结构信息</font><a href="post/MySQL-Primer#5-2-查看表字段-列-结构信息"></a></h4><p>基本语法：<font color="#00B2EE"><strong>desc 表名;</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">desc 表名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">desc test</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查看test表的表结构(显示出test表的每一行详细数据)</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="5-3-查看表的创建SQL语句"><font color="#3CB371" face="Comic sans MS">5.3 查看表的创建SQL语句</font><a href="post/MySQL-Primer#5-3-查看表的创建SQL语句"></a></h4><font color="#FF7F00"><strong>当我们不会创建数据表，或者需要参考其他已经创建好的数据表的语法，我们可以查看那些数据表的语法。</strong></font><br>基本语法：<font color="#00B2EE"><strong>SHOW CREATE TABLE 表名 [\G];</strong></font><br>如果一行很长，需要这行显示的话，看起结果来就非常的难受。在SQL语句或者命令后使用\G，可以将每一行的值垂直输出。<br><br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">SHOW CREATE TABLE表名 \G;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">SHOW CREATE TABLE emp \G;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查看表emp的创建语句</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>注：</strong></font>上面表的创建 SQL 语句中，除了可以看到表定义以外，还可以看到表的 engine（存储引擎) 和 charset(字符集)等信息。<font color="#FF7F00">“\G”选项的含义是使得记录能够按照字段竖着排列，对于内 容比较长的记录更易于显示。</font></blockquote><p>&emsp;</p><h4 id="5-4-指定表引擎和字符集"><font color="#3CB371" face="Comic sans MS">5.4 指定表引擎和字符集</font><a href="post/MySQL-Primer#5-4-指定表引擎和字符集"></a></h4><p>数据库引擎推荐资料：<font color="#00B2EE">[<a href="https://blog.csdn.net/gentelyang/article/details/80372045" target="_blank" rel="noopener">数据库引擎学习总结</a>]</font>、<font color="#00B2EE">[<a href="https://www.cnblogs.com/zhangjinghe/p/7599988.html" target="_blank" rel="noopener">MYSQL数据库引擎区别详解</a>]</font><br>字符集推荐资料：<font color="#00B2EE">[<a href="https://www.cnblogs.com/happyday56/p/4135845.html" target="_blank" rel="noopener">各种字符集和编码详解</a>]</font>、<font color="#00B2EE">[<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86/946585?fr=aladdin" target="_blank" rel="noopener">字符集百度百科</a>]</font></p><p>在创建表最后，我们常用MyISAM或者InnoDB引擎。在指定引擎时，我们可以使用：ENGINE=InnoDB<br>指定表默认字符集：DEFAULT CHARSET=utf8</p><p>&emsp;</p><font color="red" face="Comic sans MS"><strong>(1) Mysql表引擎</strong></font><br>MySQL的强大之处在于它的插件式存储引擎，我们可以基于表的特点使用不同的存储引擎，从而达到最好的性能。<br>基本语法：<font color="#00B2EE"><strong>show engines;</strong></font><br>可以查看到当前服务器支持的所有引擎。<br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">引擎名称</th><th style="text-align:left">特别</th></tr></thead><tbody><tr><td style="text-align:center">MyISAM</td><td style="text-align:left">常用。读取效率很高的引擎</td></tr><tr><td style="text-align:center">InnoDB</td><td style="text-align:left">常用。写入，支持事处等都支持</td></tr><tr><td style="text-align:center">Archive</td><td style="text-align:left">不常用。归档引擎，压缩比高达1:10，用于数据归档</td></tr><tr><td style="text-align:center">NDB</td><td style="text-align:left">不常用。主要在MySQL 集群服务器中使用，不做介绍</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>MyISAM</strong></font></p><ol><li>不支持事务，表锁(表级锁，加锁会锁住整个表)，支持全文索引,操作速度快。常用于读取多的业务。</li><li>myisam存储引擎表由myd和myi组成。.myd用来存放数据文件，.myi用来存放索引文件。</li><li>对于myisam存储引擎表，mysql数据库只缓存其索引文件，数据文件的缓存由操作系统本身来完成。</li></ol></blockquote><blockquote><p><font color="#FF7F00"><strong>InnoDB</strong></font></p><ol><li>支持事务，主要面向在线事务处理(OLTP)方面的应用。</li><li><font color="#FF7F00"><strong>行锁设计，支持外键，即默认情况下读取操作不加锁。</strong></font></li><li>InnoDB是为处理巨大数据量时的最大性能设计。</li></ol></blockquote><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>行锁：写入、更新操作的时候将这一行锁起来，不让其他人再操作了。</li><li>表锁：写入、更新操作时，将表给锁起来不让其他人再操作了。</li><li>事务：同时操作多个数据，若其中的一个数据操作失败。可回滚到操作之前。常用于银行、电商、金融等系统中。</li></ol></blockquote><p>&emsp;</p><font color="red" face="Comic sans MS"><strong>(2) Mysql字符集</strong></font><br>1. 为了更好的识别中文、日文、英文、希腊语。对于常用的符号进行了编码，这个编码就是字符集。<br>2. 字符集确定了文字的存储方式。<br>3. 字符集相当于是计算机中人类的语言。<br><br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">字符集</th><th style="text-align:left">说明</th><th style="text-align:left">字节长度</th></tr></thead><tbody><tr><td style="text-align:center">ASCII</td><td style="text-align:left">美国标准信息交换代码</td><td style="text-align:left">单字节</td></tr><tr><td style="text-align:center">GBK</td><td style="text-align:left">汉字内码扩展规范</td><td style="text-align:left">双字节</td></tr><tr><td style="text-align:center">unicode</td><td style="text-align:left">万国码</td><td style="text-align:left">4字节</td></tr><tr><td style="text-align:center">UTF-8</td><td style="text-align:left">Unicode的可变长度字符编码</td><td style="text-align:left">1到6个字节</td></tr></tbody></table></div></div><font color="#00B2EE"><strong>ASCII</strong></font><br>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数来表示所有的大写和小写字母，数字0 到9、标点符号， 以及在美式英语中使用的特殊控制字符。<br>其中：<br>0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格)、BEL（响铃）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；ASCII值为8、9、10 和13 分别转换为退格、制表、换行和回车字符。它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响。<br>32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。<br>65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。<br><br><font color="#00B2EE"><strong>GBK</strong></font><br>GBK 向下与 GB 2312 编码兼容。是中华人民共和国定义的汉字计算机编码规范。早期版本为GB2312。<br><br><font color="#00B2EE"><strong>Unicode</strong></font><br>Unicode（统一码、万国码、单一码）Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。以满足跨语言、跨平台进行文本转换、处理的要求。<br><br><font color="#00B2EE"><strong>UTF-8</strong></font><br>是一种针对Unicode的可变长度字符编码，也是万国码。因为UNICODE比ASCII占用大一倍的空间，而对ASCII来说高字节的0对他毫无用处。为了解决这个问题，就出现了一些中间格式的字符集，他们被称为通用转换格式，即UTF（Universal Transformation Format）<br><br>&emsp;<br><font color="red" face="Comic sans MS"><strong>(3) 实际工作中要使用的编码</strong></font><br><font color="#FF7F00"><strong>在中文中常用的字符集分为utf-8和GBK。</strong></font><br>实际使用的如下：<br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">字符集</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">gbk_chinese_ci</td><td style="text-align:left">简体中文, 不区分大小写</td></tr><tr><td style="text-align:center">utf8_general_ci</td><td style="text-align:left">Unicode (多语言), 不区分大小写</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>MySQL字符集由三个部份组成：</strong></font><br>1. 字符集<br>2. 语言<br>3. 类型<br><font color="#FF7F00"><strong>注意：</strong></font><br>1. 最后的bin是指二进制字符集，后面的ci是指存储排序时不区分字符的大小写。<br>2. <font color="#FF7F00"><strong>mysql在写utf-8的时候写的是utf8。不加中间的中横线。</strong></font></blockquote><p>&emsp;<br>&emsp;</p><h3 id="六-数据字段-列-操作"><font color="#FF6347" face="Comic sans MS">六. 数据字段(列)操作</font><a href="post/MySQL-Primer#六-数据字段-列-操作"></a></h3><h4 id="6-1-修改表字段类型-modify"><font color="#3CB371" face="Comic sans MS">6.1 修改表字段类型 modify</font><a href="post/MySQL-Primer#6-1-修改表字段类型-modify"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 modify 字段名 varchar(20);</strong></font><br>关键字：<strong>alter、modify</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表名 modify 字段名 varchar(20);</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">alter table user modify username varchar(20);</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">将user表的username的类型改为varchar(20)</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-2-增加表字段"><font color="#3CB371" face="Comic sans MS">6.2 增加表字段</font><a href="post/MySQL-Primer#6-2-增加表字段"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 add column 字段名 类型;</strong></font><br>关键字：<strong>alter、add column</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表名 add column 字段名 类型;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">alter table user add column age int(3);</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">添加一个字段为age，类型为整型长度为3</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-3-增加字段时控制字段顺序"><font color="#3CB371" face="Comic sans MS">6.3 增加字段时控制字段顺序</font><a href="post/MySQL-Primer#6-3-增加字段时控制字段顺序"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 add 字段名 字段类型 after 字段名;</strong></font><br>关键字：<strong>alter、add、after</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">ALTER TABLE 表名 ADD 字段名 字段类型 AFTER 字段名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">ALTER TABLE user ADD email VARCHAR(60) AFTER createip;<br>ALTER TABLE user ADD id INT(10) FIRST;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">user表中，在createip后增加一个字段为email，类型为varchar，长度为60<br>ser表中在最开始的位置增加一个字段为id,类型为int，长度为10</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-4-删除表字段"><font color="#3CB371" face="Comic sans MS">6.4 删除表字段</font><a href="post/MySQL-Primer#6-4-删除表字段"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 drop column 字段名;</strong></font><br>关键字：<strong>alter、drop column</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表名 drop column 字段名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">alter table user drop column age;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">在user表中删除字段age</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-5-表字段改名"><font color="#3CB371" face="Comic sans MS">6.5 表字段改名</font><a href="post/MySQL-Primer#6-5-表字段改名"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 表名 change 字段原名 字段新名 字段类型;</strong></font><br>关键字：<strong>alter、change</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表名 change 字段原名 字段新名 字段类型;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">alter table user change email em varchar(60);</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">在user表中将字段中的email字段名字为em</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="6-6-修改表字段排列顺序"><font color="#3CB371" face="Comic sans MS">6.6 修改表字段排列顺序</font><a href="post/MySQL-Primer#6-6-修改表字段排列顺序"></a></h4><p>在前的字段增加和修改语句<font color="#00B2EE"><strong>（add/change/modify）</strong></font>中，最后都可以加一个可选项 <font color="#00B2EE"><strong>first|after</strong></font>。<br>增加表字段时我们已经学过了如何调整顺序。我们现在在来看看另外的change或modify如何来调整顺序。</p><p>我们用first做个小实验。<br>使用modify调整顺序</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> alter table user modify em <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> first<span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.41</span> sec<span class="token punctuation">)</span> Records<span class="token punctuation">:</span> <span class="token number">0</span>  Duplicates<span class="token punctuation">:</span> <span class="token number">0</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>输出结果<span class="token punctuation">:</span>mysql<span class="token operator">></span> desc user<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> Field    <span class="token operator">|</span> Type          <span class="token operator">|</span> <span class="token keyword">Null</span> <span class="token operator">|</span> Key <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> em         <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> username   <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> password   <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> createtime <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> createip   <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token operator">|</span> <span class="token constant">YES</span>  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span>    <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="6-7-修改表名"><font color="#3CB371" face="Comic sans MS">6.7 修改表名</font><a href="post/MySQL-Primer#6-7-修改表名"></a></h4><p>基本语法：<font color="#00B2EE"><strong>alter table 旧表名 rename 新的表名;</strong></font><br>关键字：<strong>alter、rename</strong></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 旧表名 rename 新的表名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">alter table user rename new_user;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">将user表名改为new_user</td></tr></tbody></table></div></div><p>&emsp;<br>&emsp;</p><h3 id="七-数据类型"><font color="#FF6347" face="Comic sans MS">七. 数据类型</font><a href="post/MySQL-Primer#七-数据类型"></a></h3><p>MySQL中存的是数据。<font color="#FF7F00"><strong>只要是数据，我们就会规定数据的类型。</strong></font>在表的字段中规定了使用的是某个数据类型。那么，在插入的数据中就要使用对应的数据类型。并且，遵守数据类型的长度要求。</p><p>&emsp;</p><blockquote><p><font color="#00B2EE"><strong>在MySQL里面我们将数据类型分为了以下一些类型：</strong></font></p><ol><li><strong>数值类型（整型、浮点）</strong></li><li><strong>字符串类型</strong></li><li><strong>日期时间类型</strong></li><li><strong>复合类型</strong></li><li><strong>空间类型（非科学性工作基本不用，不做讲解）</strong></li></ol></blockquote><p>&emsp;</p><font color="red"><strong>1. 整型</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:left">所占字节</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:center">tinyint</td><td style="text-align:left">1字节</td><td style="text-align:left">-128~127</td></tr><tr><td style="text-align:center">smallint</td><td style="text-align:left">2字节</td><td style="text-align:left">-32768~32767</td></tr><tr><td style="text-align:center">mediumin</td><td style="text-align:left">3字节</td><td style="text-align:left">-8388608~8388607</td></tr><tr><td style="text-align:center">int</td><td style="text-align:left">4字节</td><td style="text-align:left">-2147483648~2147483647</td></tr><tr><td style="text-align:center">bigint</td><td style="text-align:left">8字节</td><td style="text-align:left">+-9.22*10的18次方</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>MySQL 以一个可选的显示宽度指示器的形式对 SQL 标准进行扩展，这样当从数据库检索一个值时，可以把这个值加长到指定的长度。例如，指定一个字段的类型为 INT(6)，就可以保证所包含数字<font color="#FF7F00"><strong>少于 6 个的值从数据库中检索出来时能够自动地用空格填充</strong></font>。需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。</li><li>在创建表字段时，性别我们可以使用无符号的微小整型（tinyint）来表示。<font color="#FF7F00"><strong>用0表示女、用1表示男。用2表示未知</strong></font>。</li><li>同样人类年龄也是，在创建表字段时可用用无符号的整型。因为人类的年龄还没有负数</li><li>在实际使用过程中。我们业务中最大需要存储多大的数值。我们创建表时，就选择什么样的类型来存储这样的值。</li></ol></blockquote><p>&emsp;</p><font color="red"><strong>2. 浮点类型</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:left">所占字节</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:center">float(m, d)</td><td style="text-align:left">4字节</td><td style="text-align:left">单精度浮点型，m总个数，d小数位</td></tr><tr><td style="text-align:center">double(m, d)</td><td style="text-align:left">8字节</td><td style="text-align:left">双精度浮点型，m总个数，d小数位</td></tr><tr><td style="text-align:center">decimal(m, d)</td><td style="text-align:left"></td><td style="text-align:left">decimal是存储为字符串的浮点数</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>浮点是非精确值，会存在不太准确的情况</li><li>而decimal叫做定点数。在MySQL内部，本质上是用字符串存储的。实际使用过程中如果存在金额、钱精度要求比较高的浮点数存储，建议使用decimal（定点数）这个类型。</li></ol></blockquote><p>&emsp;</p><font color="red"><strong>3. 字符类型</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:left">所占字节</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:left">0-255字节</td><td style="text-align:left">定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:left">0-255字节</td><td style="text-align:left">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:left">0-255字节</td><td style="text-align:left">不超过255个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:left">0-255字节</td><td style="text-align:left">短文本字符串</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:left">0-65535字节</td><td style="text-align:left">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:left">0-65535字节</td><td style="text-align:left">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:left">0-16 777 215字节</td><td style="text-align:left">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:left">0-16 777 215字节</td><td style="text-align:left">中等长度文本数据</td></tr><tr><td style="text-align:center">LOGNGBLOB</td><td style="text-align:left">0-4 294 967 295字节</td><td style="text-align:left">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:left">0-4 294 967 295字节</td><td style="text-align:left">极大文本数据</td></tr><tr><td style="text-align:center">VARBINARY(M)</td><td style="text-align:left">允许长度0-M个字节的定长字节符串</td><td style="text-align:left">值的长度+1个字节</td></tr><tr><td style="text-align:center">BINARY(M)</td><td style="text-align:left">M</td><td style="text-align:left">允许长度0-M个字节的定长字节符串</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>CHAR 类型用于定长字符串，并且必须在圆括号内用一个大小修饰符来定义。这个大小修饰符的范围从0-255。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补。</li><li>VARCHAR  把这个大小视为值的大小，不长度不足的情况下就用空格补足。而 VARCHAR 类型把它视为最大值并且只使用存储字符串实际需要的长度<br>类型不会被空格填补，但长于指示器的值仍然会被截短。<br>因为VARCHAR类型可以根据实际内容动态改变存储值的长度，所以在不能确定字段需要多少字符时使用 VARCHAR 类型可以大大地节约磁盘空间、提高存储效率。</li><li>text类型与blob类型对于字段长度要求超过 255 个的情况下，MySQL 提供了 TEXT 和 BLOB 两种类型。根据存储数据的大小，它们都有不同的子类型。这些大型的数据用于存储文本块或图像、声音文件等二进制数据类型。</li><li>TEXT 和 BLOB 类型在分类和比较上存在区别。BLOB 类型区分大小写，而 TEXT 不区分大小写。大小修饰符不用于各种 BLOB 和 TEXT 子类型。</li></ol></blockquote><p>&emsp;</p><font color="red"><strong>4. 时间类型</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:left">所占字节</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:center">date</td><td style="text-align:left">3字节</td><td style="text-align:left">日期，格式：2014-09-18</td></tr><tr><td style="text-align:center">time</td><td style="text-align:left">3字节</td><td style="text-align:left">时间，格式：08:42:30</td></tr><tr><td style="text-align:center">datetime</td><td style="text-align:left">8字节</td><td style="text-align:left">日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td style="text-align:center">timestamp</td><td style="text-align:left">4字节</td><td style="text-align:left">自动存储记录修改的时间</td></tr><tr><td style="text-align:center">year</td><td style="text-align:left">1字节</td><td style="text-align:left">年份</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>时间类型在web系统中用的比较少，很多时候很多人喜欢使用int来存储时间。插入时插入的是unix时间戳，因为这种方式更方便计算。在前端业务中用date类型的函数，再将unix时间戳转成人们可识别的时间。</li><li>有些人为了在数据库管理中方便查看，也有人使用datetime类型来存储时间。</li></ol></blockquote><p>&emsp;</p><font color="red"><strong>5. 复合类型</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:center">set</td><td style="text-align:left">集合类型</td><td style="text-align:left">set(“member”, “member2″, … “member64″)</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:left">枚举类型</td><td style="text-align:left">enum(“member1″, “member2″, … “member65535″)</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font><br><strong>一个 ENUM 类型只允许从一个集合中取得一个值；而 SET 类型允许从一个集合中取得任意多个值。</strong></p></blockquote><p>&emsp;</p><font color="#00B2EE"><strong>ENUM 类型</strong></font><br>1. ENUM 类型因为只允许在集合中取得一个值，有点类似于单选项。在处理相互排拆的数据时容易让人理解，比如人类的性别。ENUM 类型字段可以从集合中取得一个值或使用null值，除此之外的输入将会使 MySQL 在这个字段中插入一个空字符串。另外如果插入值的大小写与集合中值的大小写不匹配，MySQL会自动使用插入值的大小写转换成与集合中大小写一致的值。<br>2. ENUM 类型在系统内部可以存储为数字，并且从1开始用数字做索引。一个 ENUM 类型最多可以包含 65536 个元素，其中一个元素被 MySQL 保留，用来存储错误信息，这个错误值用索引 0 或者一个空字符串表示。<br>3. MySQL 认为 ENUM 类型集合中出现的值是合法输入，除此之外其它任何输入都将失败。这说明通过搜索包含空字符串或对应数字索引为 0 的行就可以很容易地找到错误记录的位置。<br><br><br><font color="#00B2EE"><strong>SET 类型</strong></font><br>1. SET 类型SET 类型与 ENUM 类型相似但不相同。SET类型可以从预定义的集合中取得任意数量的值。并且与 ENUM 类型相同的是任何试图在 SET 类型字段中插入非预定义的值都会使MySQL插入一个空字符串。如果插入一个即有合法的元素又有非法的元素的记录，MySQL 将会保留合法的元素，除去非法的元素。<br>2. 一个 SET 类型最多可以包含 64 项元素。在 SET 元素中值被存储为一个分离的“位”序列，这些“位”表示与它相对应的元素。“位”是创建有序元素集合的一种简单而有效的方式。<br>并且它还去除了重复的元素，所以SET类型中不可能包含两个相同的元素。<br>希望从 SET 类型字段中找出非法的记录只需查找包含空字符串或二进制值为 0 的行。<br><br><br>&emsp;<br><font color="red"><strong>6. 类型使用</strong></font><br>我们学习了这么多类型，在创建表的语句的时候使用对应的类型即可。<br><br>举例如下：<br><font color="red"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">demo</span> <span class="token punctuation">(</span>   id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   content longtext <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   createtime datetime <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   sex <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>7. 字段(列)其他属性设置</strong></font><br><font color="#00B2EE"><strong>(1) UNSIGNED（无符号）</strong></font><br>主要用于整型和浮点类型，使用无符号。即，没有前面面的-（负号）。<br>存储位数更长。tinyint整型的取值区间为，-128-127。而使用无符号后可存储0-255个长度。<br>创建时在整型或浮点字段语句后接上：<br>unsigned<br><br><font color="#00B2EE"><strong>(2) ZEROFILL（0填充）</strong></font><br>0（不是空格）可以用来真补输出的值。使用这个修饰符可以阻止 MySQL 数据库存储负值。<br>创建时在整型或浮点字段语句后接上：zerofill<br><br><font color="#00B2EE"><strong>(3) default</strong></font><br>default属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为MySQL不允许插入函数或表达式值。此外，此属性无法用于BLOB或TEXT列。如果已经为此列指定了NULL属性，没有指定默认值时默认值将为NULL，否则默认值将依赖于字段的数据类型。<br>创建时在整型或浮点字段语句后接上：default ‘值’<br><br><font color="#00B2EE"><strong>(4) not null</strong></font><br>如果将一个列定义为not null，将不允许向该列插入null值。建议在重要情况下始终使用not null属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。<br><font color="#FF7F00"><strong>创建时在整型或浮点字段语句后接上：not null</strong></font><font color="#00B2EE"><strong>(5) null</strong></font><br>为列指定null属性时，该列可以保持为空，而不论行中其它列是否已经被填充。记住，null精确的说法是“无”，而不是空字符串或0。<br>创建时在整型或浮点字段语句后不要声明not null即可。<br><br><br>&emsp;<br>&emsp;<br><font color="red"></font><h3 id="八-索引"><font color="#FF6347" face="Comic sans MS">八. 索引</font><a href="post/MySQL-Primer#八-索引"></a></h3><p>索引看着挺高大上的一个名字，说白了就是我们书最新面的目录。 (ง •_•)ง<br>索引用于快速找出在某个列中有一特定值的行。<br>不使用索引，MySQL必须从第1条记录开始然后读完整个表直到找出相关的行。表越大，花费的时间越多。如果表中查询的列有一个索引，MySQL能快速到达一个位置去搜寻到数据文件的中间，没有必要看所有数据。<br>当然索引也不易过多，索引越多写入，修改的速度越慢。因为，写入修改数据时，也要修改索引。</p><font color="red"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">索引类型</th><th style="text-align:left">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">普通索引</td><td style="text-align:left">最基本的索引，它没有任何限制</td></tr><tr><td style="text-align:center">唯一索引</td><td style="text-align:left">某一行企用了唯一索引则不准许这一列的行数据中有重复的值。针对这一列的每一行数据都要求<br>是唯一的</td></tr><tr><td style="text-align:center">主键索引</td><td style="text-align:left">它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引，常用于用户<br>ID。类似于书中的页码</td></tr><tr><td style="text-align:center">全文索引</td><td style="text-align:left">对于需要全局搜索的数据，进行全文索引</td></tr></tbody></table></div></div><p>&emsp;</p><font color="red"><strong>1. 普通索引</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">详细说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表  add index(字段)</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">ALTER TABLE money ADD INDEX(username);</td></tr><tr><td style="text-align:center">示例解释</td><td style="text-align:left">为money表的username字段增加索引</td></tr></tbody></table></div></div><p>&emsp;</p><font color="red"><strong>2. 唯一索引</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">详细说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表  add UNIQUE(字段)</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">ALTER TABLE money ADD UNIQUE(email);</td></tr><tr><td style="text-align:center">示例解释</td><td style="text-align:left">为money表的email字段增加唯一索引</td></tr></tbody></table></div></div><p>&emsp;</p><font color="red"><strong>3. 全文索引</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">详细说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表  add FULLTEXT(字段)</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">ALTER TABLE money ADD FULLTEXT(content);</td></tr><tr><td style="text-align:center">示例解释</td><td style="text-align:left">为money表的content字段增加唯一索引</td></tr></tbody></table></div></div><p>&emsp;</p><font color="red"><strong>4. 主键索引</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">详细说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">alter table 表  add PRIMARY KEY(字段)</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">ALTER TABLE money ADD PRIMARY KEY(id);</td></tr><tr><td style="text-align:center">示例解释</td><td style="text-align:left">为money表的id字段增加主键索引</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#00B2EE"><strong>5. 创建表时也可以声明索引</strong></font><br>创建表时可在创建表语句后加上对应的类型即可声明索引：<br><br><font color="red"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">PRIMARY</span> <span class="token function">KEY</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span>  <span class="token constant">INDEX</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span> <span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token constant">FULLTEXT</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span> <span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token constant">UNIQUE</span><span class="token punctuation">[</span>索引名<span class="token punctuation">]</span> <span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：中括号中的索引名，代表可选。</strong></p><p>&emsp;<br>整体示例如下：</p><font color="red"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token function">test</span> <span class="token punctuation">(</span>     id <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      username <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      password <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      content <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      <span class="token constant">PRIMARY</span> <span class="token function">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token constant">INDEX</span> <span class="token function">pw</span> <span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">UNIQUE</span> <span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">FULLTEXT</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span> <span class="token operator">=</span> InnoDB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="九-多表联合查询"><font color="#FF6347" face="Comic sans MS">九. 多表联合查询</font><a href="post/MySQL-Primer#九-多表联合查询"></a></h3><font face="Comic sans MS">很多时候在实际的业务中我们不只是查询一张表、在电子商务系统中，查询哪些用户没有购买过产品、银行中可能查询违规记录，同时查询出用户的查询中奖信息和中奖人员的基本信息、以上只是列的情况我们就需要把两张表在一起进行查询。<br>而上述业务中需要多表联合在一起查询才能有结果，而多表联合查询的本质是：<font color="#FF7F00"><strong>表连接</strong></font>。<br></font><p>&emsp;</p><h4 id="9-1-表连接"><font color="#3CB371" face="Comic sans MS">9.1 表连接</font><a href="post/MySQL-Primer#9-1-表连接"></a></h4><p>当需要查询多个表中的字段时，就可以使用表连接来实现。表联接分为<font color="#FF7F00"><strong>内连接</strong></font>和<font color="#FF7F00"><strong>外连接</strong></font>。</p><font color="#00B2EE"><strong>内联结：</strong></font>将两个表中存在联结关系的字段符合联结关系的那些记录形成记录集的联结。<br><font color="#00B2EE"><strong>外连接：</strong></font>会选出其他不匹配的记录，分为外左联结和外右联结。<br><br>&emsp;<br>在学习实验前，我为大家准备了两个模拟的数据表：<br>用户表，存放用户信息<br>订单表，存放哪个用户购买过哪个商品<br>user表创建语句:<br><font color="#00B2EE"></font><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>   uid <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">order_goods</span> <span class="token punctuation">(</span>   oid <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   uid <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>   buytime <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>user表数据如下：</p><pre class="line-numbers language-php"><code class="language-php">uid    username    password<span class="token number">1</span>    景甜    <span class="token number">123456</span><span class="token number">2</span>    王小二    <span class="token number">245667</span><span class="token number">3</span>    王宝强    <span class="token number">1235531</span><span class="token number">4</span>    井柏然    <span class="token number">123455</span><span class="token number">5</span>    范冰冰    5abcwa<span class="token number">6</span>    黄晓明    abcdeef<span class="token number">7</span>    anglebaby    caption<span class="token number">8</span>    <span class="token constant">TFBOYS</span>    abcdwww<span class="token number">9</span>    安小超    12tfddwd<span class="token number">10</span>    高小峰    3124qwqw<span class="token number">11</span>    李小强    323fxfvdvd<span class="token number">12</span>    李小超    311aqqee<span class="token number">13</span>    韩小平    121rcfwrfq<span class="token number">14</span>    宋小康    123123tcsd<span class="token number">15</span>    佟小刚    3cxvdfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>order_goods数据如下：</p><pre class="line-numbers language-php"><code class="language-php">oid    uid    name    buytime<span class="token number">1</span>    <span class="token number">10</span>    苹果鼠标    <span class="token number">1212313</span><span class="token number">2</span>    <span class="token number">3</span>    iphone 12s    <span class="token number">123121241</span><span class="token number">3</span>    <span class="token number">12</span>    雪碧       <span class="token number">13232333</span><span class="token number">4</span>    <span class="token number">15</span>    <span class="token number">34242123</span><span class="token number">5</span>    <span class="token number">3</span>    iphone 键盘    <span class="token number">12123413</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>在上表order_goods表中uid是指user表中的uid字段。上表中oid为1的数据行，uid为10的用户。为user表中uid为10的用户：高小峰。该用户购买了商品为苹果鼠标。购买时间buytime为一个unix时间戳。</p></blockquote><p>&emsp;</p><h4 id="9-2-内连接"><font color="#3CB371" face="Comic sans MS">9.2 内连接</font><a href="post/MySQL-Primer#9-2-内连接"></a></h4><p>基本语法一：</p><font color="#00B2EE"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">详细说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 表1.字段 [as 别名],表n.字段  from 表1 [别名],表n where 条件;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select user.uid ,user.username as username,order_goods.oid,order_goods.uid,<br>order_goods.name as shopname from user,order_goods  where user.uid = order_goods.uid;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询商品表中哪些用户购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>注：下例中from 表使用到了表别名。</strong><br><strong>由于表名太长，每次写的时候容易写错。我们可以在表后直接跟上一个简写英文字符串。在前面拼接字段时，直接使用简写字符串.字段即可。</strong></font></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select u<span class="token punctuation">.</span>uid <span class="token punctuation">,</span>u<span class="token punctuation">.</span>username <span class="token keyword">as</span> username<span class="token punctuation">,</span>o<span class="token punctuation">.</span>oid<span class="token punctuation">,</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>o<span class="token punctuation">.</span>name <span class="token keyword">as</span> shopname from user u<span class="token punctuation">,</span>order_goods o  where u<span class="token punctuation">.</span>uid <span class="token operator">=</span> o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> oid <span class="token operator">|</span> uid <span class="token operator">|</span> shopname      <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 李文凯    <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>基本语法二：</p><font color="#00B2EE"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">详细说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 表1.字段 [as 别名],表n.字段  from 表1 INNER JOIN 表n on  条件;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select user.uid ,user.username as username,order_goods.oid,order_goods.uid,<br>order_goods.name as shopname from user inner join order_goods  on  user.uid = <br>order_goods.uid;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询商品表中哪些用户购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><p>&emsp;<br>结果与基本语法1中一致。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select user<span class="token punctuation">.</span>uid <span class="token punctuation">,</span>user<span class="token punctuation">.</span>username <span class="token keyword">as</span> username<span class="token punctuation">,</span>order_goods<span class="token punctuation">.</span>oid<span class="token punctuation">,</span>order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>order_goods<span class="token punctuation">.</span>name <span class="token keyword">as</span> shopname from user inner join order_goods  on  user<span class="token punctuation">.</span>uid <span class="token operator">=</span> order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> oid <span class="token operator">|</span> uid <span class="token operator">|</span> shopname      <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="9-3-外连接"><font color="#3CB371" face="Comic sans MS">9.3 外连接</font><a href="post/MySQL-Primer#9-3-外连接"></a></h4><font color="#00B2EE" face="Comic sans MS"><strong>外连接：左连接、右连接</strong>。</font><br>关键字：<font color="#FF7F00"><strong>left join、on、right join</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">详解</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 表1.字段 [as 别名],表n.字段  from 表1 LEFT JOIN 表n on  条件;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select *  from user left join order_goods  on  user.uid = order_goods.uid;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">以左边为主，查询哪些用户未购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>左连接：</strong>包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录。</font><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user left join order_goods  on  user<span class="token punctuation">.</span>uid <span class="token operator">=</span> order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> password   <span class="token operator">|</span> oid  <span class="token operator">|</span> uid  <span class="token operator">|</span> name          <span class="token operator">|</span> buytime   <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span> 3124qwqw   <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span>   <span class="token number">1212313</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>    <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token number">123121241</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span> 311aqqee   <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span>  <span class="token number">13232333</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span> 3cxvdfs    <span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span>  <span class="token number">34242123</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>    <span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span>  <span class="token number">12123413</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 景甜      <span class="token operator">|</span> <span class="token number">123456</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 王小二    <span class="token operator">|</span> <span class="token number">245667</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span> <span class="token number">123455</span>     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span> 5abcwa     <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span> abcdeef    <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">7</span> <span class="token operator">|</span> anglebaby <span class="token operator">|</span> caption    <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> <span class="token constant">TFBOYS</span>    <span class="token operator">|</span> abcdwww    <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">9</span> <span class="token operator">|</span> 安小超    <span class="token operator">|</span> 12tfddwd   <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">11</span> <span class="token operator">|</span> 李小强    <span class="token operator">|</span> 323fxfvdvd <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">13</span> <span class="token operator">|</span> 韩小平    <span class="token operator">|</span> 121rcfwrfq <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">14</span> <span class="token operator">|</span> 宋小康    <span class="token operator">|</span> 123123tcsd <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>          <span class="token operator">|</span>      <span class="token keyword">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">16</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="#00B2EE" face="Comic sans MS"><strong>右连接：</strong>包含所有的右边表中的记录甚至是右边表中没有和它匹配的记录。</font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">详解</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 表1.字段 [as 别名],表n.字段  from 表1 right JOIN 表n on  条件;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select *  from user right join order_goods  on  user.uid = order_goods.uid;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询商品表中哪些用户购买过商品，并将用户信息显示出来</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user right join order_goods  on  user<span class="token punctuation">.</span>uid <span class="token operator">=</span> order_goods<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> uid  <span class="token operator">|</span> username  <span class="token operator">|</span> password <span class="token operator">|</span> oid <span class="token operator">|</span> uid <span class="token operator">|</span> name          <span class="token operator">|</span> buytime   <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span> 3124qwqw <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 苹果鼠标      <span class="token operator">|</span>   <span class="token number">1212313</span> <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 12s    <span class="token operator">|</span> <span class="token number">123121241</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span> 311aqqee <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 雪碧          <span class="token operator">|</span>  <span class="token number">13232333</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span> 3cxvdfs  <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span>               <span class="token operator">|</span>  <span class="token number">34242123</span> <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> iphone 键盘   <span class="token operator">|</span>  <span class="token number">12123413</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="9-4-子查询"><font color="#3CB371" face="Comic sans MS">9.4 子查询</font><a href="post/MySQL-Primer#9-4-子查询"></a></h4><p>有时候，当我们查询的时候，需要的条件是另外一个select语句的结果，这时就需要使用子查询。<br>用于子查询的关键字包括<font color="#FF7F00"><strong>in、not in、=、!=、exists、not exists</strong></font>等。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段  from 表 where 字段 in(条件)</td></tr><tr><td style="text-align:center">示例1</td><td style="text-align:left">select *  from user where uid in (1,3,4);</td></tr><tr><td style="text-align:center">示例1说明</td><td style="text-align:left">按照id 查询指定用户</td></tr><tr><td style="text-align:center">示例2</td><td style="text-align:left">select *  from user where uid in (select uid from order_goods);</td></tr><tr><td style="text-align:center">示例2说明</td><td style="text-align:left">将购买过商品的用户信息显示出来</td></tr></tbody></table></div></div><p>&emsp;<br>示例1：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user where uid <span class="token function">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> password <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 景甜      <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span> <span class="token number">123455</span>   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>示例2：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span>  from user where uid <span class="token function">in</span> <span class="token punctuation">(</span>select uid from order_goods<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> username  <span class="token operator">|</span> password <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> 高小峰    <span class="token operator">|</span> 3124qwqw <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span> <span class="token number">1235531</span>  <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 李小超    <span class="token operator">|</span> 311aqqee <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> 佟小刚    <span class="token operator">|</span> 3cxvdfs  <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">4</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno <span class="token function">in</span> <span class="token punctuation">(</span>select deptno from dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="9-5-记录联合"><font color="#3CB371" face="Comic sans MS">9.5 记录联合</font><a href="post/MySQL-Primer#9-5-记录联合"></a></h4><p>使用 union 和 union all 关键字，将两个表的数据按照一定的查询条件查询出来后，将结果合并到一起显示。两者主要的区别是把结果直接合并在一起，而 union 是将 union all 后的结果进行一次distinct，去除重复记录后的结果。<br>关键字包括<font color="#FF7F00"><strong>union、union all、distinct</strong></font>等。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select语句1 union[all] select语句2</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select *  from user where uid in (1,3,4);</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">将商品表中的用户信息和用户表中的用户信息的结果组合在一起</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select uid from user union select uid from order_goods<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> uid <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">7</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token number">9</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">10</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">11</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">13</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">14</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">15</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">15</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十-增删改查之插入记录"><font color="#FF6347" face="Comic sans MS">十. 增删改查之插入记录</font><a href="post/MySQL-Primer#十-增删改查之插入记录"></a></h3><p>插入记录有两种个基本语法。</p><p>&emsp;<br>插入基本语法一</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">insert into 表 values(值1,值2,值n);</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">INSERT INTO user values(2,’php中文网’,’男’)</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">向user表中插入值id为2，姓名为李文凯，性别为男</td></tr></tbody></table></div></div><p>&emsp;<br>插入基本语法二</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">insert into 表(字段1,字段2,字段n) values(值1,值2,值n);</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">INSERT INTO user(id,username,sex) values(213,’小沈阳’,1);</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">向user表中插入id为213，username为小沈阳，性别为1</td></tr></tbody></table></div></div><blockquote><p><font color="#FF7F00"><strong>基本语法1和基本语法2的区别是：</strong></font></p><ol><li>基本语法1的插入语句，表中有多少个字段就必须要插入多少个值。一个不能多，一个也不能少。若有默认值，不想传，可以写上null。</li><li>基本语法2中，除非有必填字段必须要写入值外。如果有默认值的不想写可以忽略不写。mysql会自动补主默认值。</li><li>基本语法2中，以user(id,username,sex)字段顺序为值的顺序。</li></ol></blockquote><p>&emsp;<br>&emsp;<br>&emsp;<br>假设有一张表为user表，我们对字段、字段说明、类型和字段选填和必须状态进行说明，表结构如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:left">id</th><th style="text-align:left">username</th><th style="text-align:left">email</th><th style="text-align:left">password</th><th style="text-align:left">sex</th></tr></thead><tbody><tr><td style="text-align:center"><strong>中文说明</strong></td><td style="text-align:left">编号</td><td style="text-align:left">用户名</td><td style="text-align:left">邮箱</td><td style="text-align:left">密码</td><td style="text-align:left">性别</td></tr><tr><td style="text-align:center"><strong>类型说明</strong></td><td style="text-align:left">int</td><td style="text-align:left">varchar(50)</td><td style="text-align:left">varchar(60)</td><td style="text-align:left">varchar(32)</td><td style="text-align:left">tinyint</td></tr><tr><td style="text-align:center"><strong>默认值说明</strong></td><td style="text-align:left">自增</td><td style="text-align:left">必填</td><td style="text-align:left">选填字段，默认值为<a href="mailto:123@php.cn" target="_blank" rel="noopener">123@php.cn</a></td><td style="text-align:left">选填字段</td><td style="text-align:left">必填字段</td></tr></tbody></table></div></div><p>&emsp;<br>按照基本语法一写上表中的插入语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> user <span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">'php中文网'</span><span class="token punctuation">,</span><span class="token string">'pig@php.cn'</span><span class="token punctuation">,</span><span class="token keyword">null</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注意：</strong></font></p><ol><li>可以不指定字段名称，但是 values 后面的顺序应该和表字段的排序一致。</li><li>有默认值的字段可以不写，则为默认值。</li><li>如果有默认值或者可空字段不想传入具体值，可写入null。<br>数据格式必须要与表规定的数据格式一致。</li></ol></blockquote><p>&emsp;<br>按照基本语法二写上表中的插入语句：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">user</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token string">'php中文网'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><font color="#FF7F00"><strong>注意：</strong></font><br>1. ID为自增的自段可以不用传入值，每插入一次这个字段的值会自动向上加1。<br>2. 有默认值和可为空的字段可不传<br>3. 以表user(username,sex)的插入顺序为准<br>4. <font color="#FF7F00"><strong>基本语法二为更常用的用法</strong></font></blockquote><p>&emsp;</p><font color="red"><strong>基本语法变形：一次插入多条记录</strong></font><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">user</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token string">'胡歌'</span><span class="token punctuation">,</span> <span class="token string">'abcdef'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'霍建华'</span><span class="token punctuation">,</span> <span class="token string">'bcdeef'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'张靓颖'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'刘诗诗'</span><span class="token punctuation">,</span> <span class="token string">'987654'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十一-增删改查之查询记录"><font color="#FF6347" face="Comic sans MS">十一. 增删改查之查询记录</font><a href="post/MySQL-Primer#十一-增删改查之查询记录"></a></h3><p>下面定义了一个表结构，表名为money，表中存放着银行的余额和用户的基本信息。</p><font color="#00B2EE">[<a href="http://www.php.cn/code/4968.html" target="_blank" rel="noopener">视频教程</a>]</font><p>&emsp;<br>创建表的语句如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token function">money</span> <span class="token punctuation">(</span>     id <span class="token constant">INT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token punctuation">,</span>     username <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>     balance <span class="token constant">FLOAT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      province <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      age <span class="token constant">TINYINT</span> <span class="token constant">UNSIGNED</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      sex <span class="token constant">TINYINT</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span> <span class="token punctuation">,</span>      <span class="token constant">PRIMARY</span> <span class="token function">KEY</span> <span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token constant">ENGINE</span> <span class="token operator">=</span> InnoDB <span class="token constant">CHARACTER</span> <span class="token constant">SET</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>表结构和数据展示如下：(注：balance是指余额、province是指省份)</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">id</th><th style="text-align:left">username</th><th style="text-align:left">balance</th><th style="text-align:left">province</th><th style="text-align:left">age</th><th style="text-align:left">sex</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">王宝强</td><td style="text-align:left">120.02</td><td style="text-align:left">上海</td><td style="text-align:left">29</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">范冰冰</td><td style="text-align:left">260.23</td><td style="text-align:left">山东</td><td style="text-align:left">40</td><td style="text-align:left">0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">黄晓明</td><td style="text-align:left">150.86</td><td style="text-align:left">山东</td><td style="text-align:left">40</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">井柏然</td><td style="text-align:left">810</td><td style="text-align:left">辽宁</td><td style="text-align:left">27</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">李冰冰</td><td style="text-align:left">20.15</td><td style="text-align:left">黑龙江</td><td style="text-align:left">43</td><td style="text-align:left">0</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">成龙</td><td style="text-align:left">313</td><td style="text-align:left">山东</td><td style="text-align:left">63</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">7</td><td style="text-align:left">杨幂</td><td style="text-align:left">123</td><td style="text-align:left">北京</td><td style="text-align:left">30</td><td style="text-align:left">0</td></tr><tr><td style="text-align:center">8</td><td style="text-align:left">刘诗诗</td><td style="text-align:left">456</td><td style="text-align:left">北京</td><td style="text-align:left">29</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">9</td><td style="text-align:left">柳岩</td><td style="text-align:left">23.4</td><td style="text-align:left">湖南</td><td style="text-align:left">36</td><td style="text-align:left">0</td></tr><tr><td style="text-align:center">10</td><td style="text-align:left">赵本山</td><td style="text-align:left">3456</td><td style="text-align:left">辽宁</td><td style="text-align:left">63</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">11</td><td style="text-align:left">汪峰</td><td style="text-align:left">34.32</td><td style="text-align:left">北京</td><td style="text-align:left">44</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">12</td><td style="text-align:left">郭德纲</td><td style="text-align:left">212</td><td style="text-align:left">天津</td><td style="text-align:left">43</td><td style="text-align:left">1</td></tr></tbody></table></div></div><p>&emsp;</p><h4 id="11-1-基础查询"><font color="#3CB371" face="Comic sans MS">11.1 基础查询</font><a href="post/MySQL-Primer#11-1-基础查询"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select * from 表;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select * from money;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表中所有字段中的所有结果</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>注：” * ” 是一种正则表达式的写法，表示匹配所有，上面的查询语句和下面的是等价：</strong></font></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from money<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province  <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span>  <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span>  <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">63</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span>  <span class="token number">30</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span> 湖南      <span class="token operator">|</span>  <span class="token number">36</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span>  <span class="token number">63</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span>  <span class="token number">44</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span> 天津      <span class="token operator">|</span>  <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-2-指定字段查询"><font color="#3CB371" face="Comic sans MS">11.2 指定字段查询</font><a href="post/MySQL-Primer#11-2-指定字段查询"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段 from 表;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select id,username, balance from money;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表中id,username, balance字段中的所有结果</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-3-查询单个字段不重复记录-distinct"><font color="#3CB371" face="Comic sans MS">11.3 查询单个字段不重复记录 distinct</font><a href="post/MySQL-Primer#11-3-查询单个字段不重复记录-distinct"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select distinct 字段 from 表;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select distinct age deptno from money;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表中年龄唯一的所有结果</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select distinct age deptno from money<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> deptno <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>     <span class="token number">29</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">40</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">27</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">43</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">63</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">36</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">44</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">8</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-4-条件查询-where"><font color="#3CB371" face="Comic sans MS">11.4 条件查询 where</font><a href="post/MySQL-Primer#11-4-条件查询-where"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select  字段 from 表 where where条件;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select * from money where age = 29;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表中年龄为29的所有结果</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from money where age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 李文凯    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北     <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">2</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>where后可接的条件</strong></font><br><font color="#00B2EE"><strong>比较运算符</strong></font><br>比较运算符结果集中将符合条件的记录列出来。上面的例子中，where 后面的田间是一个字段的 ‘=’。<br>除此之外，还可以使用<strong>&gt;、&lt;、&gt;=、&lt;=、!=</strong>等比较运算符；<br><br>&emsp;<br><font color="#00B2EE"><strong>逻辑运算符</strong></font><br>多个条件还可以使用 or 、 and 等逻辑运算符进行多条件联合查询<br><strong>or   或者<br>and       并且</strong><br><br>&emsp;<br>我们来看一下多个条件的例子：<br><font color="#00B2EE"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细内容</th></tr></thead><tbody><tr><td style="text-align:center">示例</td><td style="text-align:left">select * from money where id &lt;10 and</td></tr><tr><td style="text-align:center">说明</td><td style="text-align:left">查询所有字段 要求id小于10 并且province=’湖北’</td></tr></tbody></table></div></div><font color="#00B2EE"></font><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from money where id <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">and</span> province<span class="token operator">=</span><span class="token string">'湖北'</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北     <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-5-结果集排序"><font color="#3CB371" face="Comic sans MS">11.5 结果集排序</font><a href="post/MySQL-Primer#11-5-结果集排序"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段 from 表 order  by 字段 排序关键词</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select id,username, balance from money order by balance desc;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表中的id,username,balance字段，按照余额进行降序排序</td></tr></tbody></table></div></div><p>&emsp;<br>排序用到的关键词：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">关键词</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">asc</td><td style="text-align:left">升序排列，从小到大（默认）</td></tr><tr><td style="text-align:center">desc</td><td style="text-align:left">降序排列，从大到小</td></tr></tbody></table></div></div><blockquote><p>在 select 出来之后的结果集中排序使用 order by ，其中 desc 和 asc 是排序顺序中的关键字。<font color="#FF7F00"><strong>desc 表示按照字段进行降序排列，asc 表示升序排列，如果不写关键字默认升序排列。</strong></font></p></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money order by balance desc<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-6-多字段排序"><font color="#3CB371" face="Comic sans MS">11.6 多字段排序</font><a href="post/MySQL-Primer#11-6-多字段排序"></a></h4><p>order by 后面可以跟多个不同的字段排序，并且排序字段的不同结果集的顺序也不同，如果排序字段的值一样，则值相同的字段按照第二个排序字段进行排序。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段 from 表 order  by 字段1 排序关键词,… …字段n desc</td><td>asc;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select id,username, balance from money order by balance desc,age asc;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表中的id,username,balance字段，按照余额进行降序排序,若余额全都一样，则再使用age进行升序排序</td></tr></tbody></table></div></div><blockquote><p>注：如果第一个字段已经将结果给排好。第二个字段排序字段不生效。本例中，第二个字段无效</p></blockquote><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money order by balance desc<span class="token punctuation">,</span>age asc<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span> 汪峰      <span class="token operator">|</span>   <span class="token number">34.32</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span> 柳岩      <span class="token operator">|</span>    <span class="token number">23.4</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">12</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-7-结果集限制"><font color="#3CB371" face="Comic sans MS">11.7 结果集限制</font><a href="post/MySQL-Primer#11-7-结果集限制"></a></h4><p>对于查询或者排序后的结果集，如果希望只显示一部分而不是全部，使用 limit 关键字结果集数量限制。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段 from 表  limit 数量;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select id,username, balance from money limit 5;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">显示前五个用户</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span>  select <span class="token operator">*</span> from money limit <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province  <span class="token operator">|</span> age <span class="token operator">|</span> sex <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span>  <span class="token number">29</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span>  <span class="token number">40</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span>  <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span>  <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-8-限制结果集并排序"><font color="#3CB371" face="Comic sans MS">11.8 限制结果集并排序</font><a href="post/MySQL-Primer#11-8-限制结果集并排序"></a></h4><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段 from 表 order by 字段 关键词 limit 数量</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select id,username, balance from money order by balance desc limit 5;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">按照钱来排序，显示前五个最有钱的用户</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from money order by balance desc limit <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> 赵本山    <span class="token operator">|</span>    <span class="token number">3456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span> 刘诗诗    <span class="token operator">|</span>     <span class="token number">456</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">5</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-9-结果集区间选择"><font color="#3CB371" face="Comic sans MS">11.9 结果集区间选择</font><a href="post/MySQL-Primer#11-9-结果集区间选择"></a></h4><p>假设我从第0条开始取了3条记录。又想再从第3条开始取3条记录。再想从第6条开始取4条记录怎么办？<br>这时候就需要使用到结果集区间选择。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 字段 from 表  limit 偏移量,数量</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select id,username, balance from  money limit 0,3;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">从第一条开始取三条记录</td></tr></tbody></table></div></div><p>注：第一条记录为0。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from  money limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 王宝强    <span class="token operator">|</span>  <span class="token number">120.02</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 范冰冰    <span class="token operator">|</span>  <span class="token number">260.23</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 黄晓明    <span class="token operator">|</span>  <span class="token number">150.86</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>从第三条开始再取三条呢？</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span> balance from  money limit <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> 李冰冰    <span class="token operator">|</span>   <span class="token number">20.15</span> <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span> 成龙      <span class="token operator">|</span>     <span class="token number">313</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过上面的这个思路，显示就完成了分页。<br>每页显示10条记录，那么：<br>第1页为  limit 0,10<br>第2页为  limit 10,10<br>第3页为  limit 20,10<br>依此类推… …</p></blockquote><p>&emsp;</p><h4 id="11-10-统计类函数使用"><font color="#3CB371" face="Comic sans MS">11.10 统计类函数使用</font><a href="post/MySQL-Primer#11-10-统计类函数使用"></a></h4><p>如果我们想知道总用户数怎么办？<br>查询谁是数据表里的首富怎么办？<br>如果我们想知道用户的平均金额怎么办？<br>如果我们想知道所有用户的总金额怎么办？<br>统计类函数最常用的我们有四个：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">sum</td><td style="text-align:left">求和</td></tr><tr><td style="text-align:center">count</td><td style="text-align:left">统计总数</td></tr><tr><td style="text-align:center">max</td><td style="text-align:left">最大值</td></tr><tr><td style="text-align:center">min</td><td style="text-align:left">最小值</td></tr><tr><td style="text-align:center">avg</td><td style="text-align:left">平均值</td></tr></tbody></table></div></div><blockquote><p>注：当然你知道其他的mysql函数也可以使用。不过，在实际工作中，大公司的很多大中型项上很少使用，他们都有专门的计数服务器。因为，mysql的计算量本身很大，为了减少压力通常我们将实际的计算任务交给业务服务器或其他服务器来完成。</p></blockquote><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select 函数(字段) from 表</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select count(id) from money</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">查询money表的id总数</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> from money<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>        <span class="token number">12</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>你还可以给字段取别名哟！使用as关键字。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> zongshu from money<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> zongshu <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>      <span class="token number">12</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-11-分组-group-by"><font color="#3CB371" face="Comic sans MS">11.11 分组 group by</font><a href="post/MySQL-Primer#11-11-分组-group-by"></a></h4><p>我们拿金额表里面的省份进行分组数据，分组数据后你会发现。有相同的省份会去掉。即，一个省份为一个组。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select * from 表 group by 字段</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select * from money group by province;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">按照地区进行分组</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">统计分组（分类）各总数：mysql<span class="token operator">></span> select deptno<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> from emp group by deptno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> deptno <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>        <span class="token number">5</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>        <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">4</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>统计省份数量后再进行分组显示mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token punctuation">,</span>province  from money group by province<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token operator">|</span> province  <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 天津      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖南      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">2</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">7</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-12-在分组基础上进行统计"><font color="#3CB371" face="Comic sans MS">11.12 在分组基础上进行统计</font><a href="post/MySQL-Primer#11-12-在分组基础上进行统计"></a></h4><p>with rollup用的很少。这个知识点设置为了解级别。<br>它的主要功能是对于分组的数据进行统计后，再进行一次总数统计。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select * from 表 group by 字段 with rollup</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select count(province),province  from money group by province with rollup;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">对分组的数再次进行统计</td></tr></tbody></table></div></div><p>&emsp;<br>在上面的基础上统计总数，下例结果中，最后多了一个12 NULL。</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token punctuation">,</span>province  from money group by province with rollup<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token operator">|</span> province  <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 北京      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 天津      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">3</span> <span class="token operator">|</span> 山东      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖北      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 湖南      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">2</span> <span class="token operator">|</span> 辽宁      <span class="token operator">|</span> <span class="token operator">|</span>               <span class="token number">1</span> <span class="token operator">|</span> 黑龙江    <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token number">12</span> <span class="token operator">|</span> <span class="token keyword">NULL</span>      <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">8</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-13-结果再过滤having"><font color="#3CB371" face="Comic sans MS">11.13 结果再过滤having</font><a href="post/MySQL-Primer#11-13-结果再过滤having"></a></h4><p>having子句与where有相似之处但也有区别,都是设定条件的语句。<br>having 是筛选组 而where是筛选记录。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">select * from 表 group by 字段 having 条件</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">select count(province) as result ,province  from money group by province having result &gt;2;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">对地区分组并统计总数，将分组结果中大于2的分组地区显示出来</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token function">count</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span> <span class="token keyword">as</span> result <span class="token punctuation">,</span>province  from money group by province having result <span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> result <span class="token operator">|</span> province <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span> 山东     <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">2</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h4 id="11-14-整体使用SQL"><font color="#3CB371" face="Comic sans MS">11.14 整体使用SQL</font><a href="post/MySQL-Primer#11-14-整体使用SQL"></a></h4><p>我们在上面的语句中都是单一使用的某些语句，没有整体使用过。<br>我们现在将语句进行整合后，配合使用一次。整体的SQL语句配合使用的语法结构如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">SELECT</span>      <span class="token punctuation">[</span>字段<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">as</span> 别名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>函数<span class="token punctuation">(</span>字段<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>字段n<span class="token punctuation">]</span>  <span class="token constant">FROM</span> 表名 <span class="token punctuation">[</span><span class="token constant">WHERE</span> where条件<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">GROUP</span> <span class="token constant">BY</span> 字段<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">HAVING</span> where_contition<span class="token punctuation">]</span> <span class="token punctuation">[</span>order 条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>limit 条件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：上面的语句中可以[] 代表可选。</p></blockquote><p>最终的语法总结如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">关键词</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">select</td><td style="text-align:left">选择的列</td></tr><tr><td style="text-align:center">from</td><td style="text-align:left">表</td></tr><tr><td style="text-align:center">where</td><td style="text-align:left">查询的条件</td></tr><tr><td style="text-align:center">group by</td><td style="text-align:left">分组属性  having 分组过滤的条件</td></tr><tr><td style="text-align:center">order by</td><td style="text-align:left">排序属性</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:left">起始记录位置，取记录的条数</td></tr></tbody></table></div></div><p>&emsp;<br>我们进行一次整体的给合使用，查询money表字段：id,username,balance,province 要求id&gt;1 余额大于50，使用地区进行分组。我们使用用户id进行降序，要求只准显示3条。<br>最后将SQL语句写成，查询出来的结果如下：</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>balance<span class="token punctuation">,</span>province from money where id <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">and</span> balance <span class="token operator">></span> <span class="token number">50</span> group by province order by id desc limit <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> id <span class="token operator">|</span> username  <span class="token operator">|</span> balance <span class="token operator">|</span> province <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span> 郭德纲    <span class="token operator">|</span>     <span class="token number">212</span> <span class="token operator">|</span> 天津     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span> 杨幂      <span class="token operator">|</span>     <span class="token number">123</span> <span class="token operator">|</span> 北京     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 井柏然    <span class="token operator">|</span>     <span class="token number">810</span> <span class="token operator">|</span> 辽宁     <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token number">3</span> rows in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十二-增删改查之更新记录"><font color="#FF6347" face="Comic sans MS">十二. 增删改查之更新记录</font><a href="post/MySQL-Primer#十二-增删改查之更新记录"></a></h3><p>更新数据我们已经说过。需要修改内容，修改银行卡余额，修改装备信息的时候都需要使用到update，修改语句。<br>关键词：<font color="#00B2EE"><strong>update</strong></font><br>修改(也叫更新)语句的基本语语法如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">update 表名 set 字段1=值1,字段2=值2,字段n=值n where 条件</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">update money set  balance=balance-500 where userid = 15;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">修改money表，将balance余额减500。要求userid为15</td></tr></tbody></table></div></div><p>&emsp;<br>假设我们有下面这一个表，表结构如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">userid</th><th style="text-align:left">username</th><th style="text-align:left">balance</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">王宝强</td><td style="text-align:left">50000.00</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">胡歌</td><td style="text-align:left">150000000.00</td></tr><tr><td style="text-align:center">15</td><td style="text-align:left">马云</td><td style="text-align:left">15000.00</td></tr><tr><td style="text-align:center">16</td><td style="text-align:left">陈赫</td><td style="text-align:left">1234131.00</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> userid <span class="token operator">|</span>username<span class="token operator">|</span>  balance <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> <span class="token number">15</span>   <span class="token operator">|</span>  马云    <span class="token operator">|</span> <span class="token number">15000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>使用 update 语句进行记录更新</strong></font><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span>  update money set  balance<span class="token operator">=</span>balance<span class="token number">-500</span> where userid <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.35</span> sec<span class="token punctuation">)</span> Rows matched<span class="token punctuation">:</span> <span class="token number">1</span>  Changed<span class="token punctuation">:</span> <span class="token number">1</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> userid <span class="token operator">|</span>username<span class="token operator">|</span>  balance <span class="token operator">|</span>  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">15</span>   <span class="token operator">|</span>  马云    <span class="token operator">|</span> <span class="token number">14500.00</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>修改多个字段</strong></font><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> update money set  balance<span class="token operator">=</span>balance<span class="token number">-500</span><span class="token punctuation">,</span>username<span class="token operator">=</span><span class="token string">'李文凯'</span> where userid <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> Rows matched<span class="token punctuation">:</span> <span class="token number">1</span>  Changed<span class="token punctuation">:</span> <span class="token number">1</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> from emp where deptno<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> userid <span class="token operator">|</span>username<span class="token operator">|</span>  balance <span class="token operator">|</span>  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span> <span class="token operator">|</span> <span class="token number">15</span>   <span class="token operator">|</span>王宝强    <span class="token operator">|</span> <span class="token number">14500.00</span> <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token number">1</span> row in <span class="token function">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>同时对两个表进行更新</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">update 表1,表2 set 字段1=值1,字段2=值2,字段n=值n where 条件</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">update money m,user u m.balance=m.balance*u.age where m.userid=u.id;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">修改money，将money表的别名设置为m；user表的别名设置为u；将m表的余额改为m表的<br>balance*用户表的age。执行条件是：m.userid = u.id</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> update money m<span class="token punctuation">,</span>user u m<span class="token punctuation">.</span>balance<span class="token operator">=</span>m<span class="token punctuation">.</span>balance<span class="token operator">*</span>u<span class="token punctuation">.</span>age where m<span class="token punctuation">.</span>userid<span class="token operator">=</span>u<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>&emsp;</p><h3 id="十三-增删改查之删除记录"><font color="#FF6347" face="Comic sans MS">十三. 增删改查之删除记录</font><a href="post/MySQL-Primer#十三-增删改查之删除记录"></a></h3><p>使用关键词：<font color="#00B2EE"><strong>delete</strong></font></p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">DELETE FROM 表 [where 条件];</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">DELETE FROM user where id &gt; 10;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">删除掉用户表中id大于10的所有用户</td></tr></tbody></table></div></div><p>&emsp;<br>user表，表结构如下：</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">userid</th><th style="text-align:left">username</th><th style="text-align:left">balance</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">王宝强</td><td style="text-align:left">50000.00</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">胡歌</td><td style="text-align:left">150000000.00</td></tr><tr><td style="text-align:center">15</td><td style="text-align:left">马云</td><td style="text-align:left">15000.00</td></tr><tr><td style="text-align:center">16</td><td style="text-align:left">陈赫</td><td style="text-align:left">1234131.00</td></tr></tbody></table></div></div><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> <span class="token constant">DELETE</span> <span class="token constant">FROM</span> user where id ＝ <span class="token number">1</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">1</span> row <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.08</span> sec<span class="token punctuation">)</span>删除掉了id为<span class="token number">1</span>的，李文凯这一行的记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><font color="red"><strong>清空表记录</strong></font><br><font color="#FF7F00"><strong>delete</strong></font>和<font color="#FF7F00"><strong>truncate</strong></font>是一样的，但它们有一点不同，那就是DELETE可以返回被删除的记录数，而TRUNCATE TABLE返回的是0。<br>如果一个表中有自增字段，使用truncate table 这个自增字段将起始值恢复成1.<br><br><font color="#FF7F00"></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">TRUNCATE TABLE 表名;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">TRUNCATE TABLE user;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">清空表的数据，并且让自增的id从1开始自增</td></tr></tbody></table></div></div><blockquote><font color="#FF7F00"><strong>切记：</strong></font><br><font color="#FF7F00">1.<strong>删除时一定要记住加上where条件，不然会清空掉整个表的记录。</strong><br>2.<strong>删除重要数据前一定要备份、备份、备份。</strong>     </font></blockquote><p>&emsp;<br>&emsp;</p><h3 id="十四-数据控制语言DCL"><font color="#FF6347" face="Comic sans MS">十四. 数据控制语言DCL</font><a href="post/MySQL-Primer#十四-数据控制语言DCL"></a></h3><p>创建库用户(注：可以针对一个用户增加多条权限。)</p><font color="#00B2EE"><strong>添加权限：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">grant 权限 on 库.表 to ‘用户‘@’主机’ identified by ‘密码’;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">grant select, insert on test.* to ‘liwenkai‘@’localhost’ identified by ‘4311’;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#00B2EE"><strong>删除权限：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">详细解示</th></tr></thead><tbody><tr><td style="text-align:center">基本语法</td><td style="text-align:left">revoke 权限 on 库.表 from ‘用户‘@’主机’;</td></tr><tr><td style="text-align:center">示例</td><td style="text-align:left">revoke select, insert on test.* to ‘liwenkai‘@’localhost’ identified by ‘4311’;</td></tr><tr><td style="text-align:center">示例说明</td><td style="text-align:left">给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限</td></tr></tbody></table></div></div><p>&emsp;</p><font color="#FF7F00"><strong>参数说明：</strong></font><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">grant all</td><td style="text-align:left">在grant后接all说明给予所有权限</td></tr><tr><td style="text-align:center">revoke all</td><td style="text-align:left">在revoke后接all说明删除所有权限</td></tr><tr><td style="text-align:center">权限 on .</td><td style="text-align:left">. 所明给予所有库所有表的操作权限</td></tr><tr><td style="text-align:center">‘用户‘@’主机’</td><td style="text-align:left">主机里面若为%。任意来源的主机均可以使用这个用户来访问</td></tr></tbody></table></div></div><blockquote><p>创建数据库用户liwenkai ，具有对test数据库中所有标的<strong>select / insert</strong> 权限</p></blockquote><p>&emsp;<br>示例：增加权限</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> grant select<span class="token punctuation">,</span> insert on test<span class="token punctuation">.</span><span class="token operator">*</span> to <span class="token string">'liwenkai'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'4311'</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br>示例：移除权限</p><pre class="line-numbers language-php"><code class="language-php">mysql<span class="token operator">></span> revoke insert on test<span class="token punctuation">.</span><span class="token operator">*</span> from <span class="token string">'liwenkai'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span> Query <span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token number">0</span> rows <span class="token function">affected</span> <span class="token punctuation">(</span><span class="token number">0.30</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><font color="#FF7F00"><strong>注：</strong></font><br>上面的一些语句用的较少。你可以将知识点的掌握级别设置为了解级别。<br>更多的时候，权限设置项特别多，人们往往记不住具体的命令。更多 的时候人们使用专门的工具来操作权限。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容好多啊◑﹏◐&lt;font color=&quot;#00B2EE&quot;&gt;[&lt;a href=&quot;http://www.php.cn/code/4954.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;那看视频吧…..&lt;/a&gt;]&lt;/font&gt; ٩(๑❛ᴗ❛๑)۶  (๑&amp;gt;◡&amp;lt;๑)&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="Treecatee.gitgub.io/categories/MySQL/"/>
    
    
      <category term="PHP语言" scheme="Treecatee.gitgub.io/tags/PHP%E8%AF%AD%E8%A8%80/"/>
    
      <category term="MySQL" scheme="Treecatee.gitgub.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
