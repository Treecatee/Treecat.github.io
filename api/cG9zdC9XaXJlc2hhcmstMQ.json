{"title":"Wireshark简单介绍和数据包分析","date":"2019-01-19T08:39:57.000Z","thumbnail":"https://i.loli.net/2019/01/19/5c42e330868ec.jpg","slug":"Wireshark-1","comments":true,"tags":["Web","Wireshark"],"categories":["Web-Tools"],"updated":"2019-01-19T12:20:35.505Z","content":"<p>&ensp;<br>&ensp;</p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>Wireshark-Acquaintance</strong></font></center>\n\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"前言\"><font color=\"#3CB371\" face=\"Comic sans MS\">前言</font><a href=\"post/Wireshark-1#前言\"></a></h3><font face=\"Comic sans MS\">Wireshark是一款世界范围最广、最好用的网络封包分析软件，功能强大，界面友好直观，操作起来非常方便。它的创始人是Gerald Combs，前身是Ethereal，作为开源项目经过众多开发者的完善它已经成为使用量最大的安全工具之一。在CTF中也经常会使用wireshark进行流量数据包分析，可以快速检测网络通讯数据，获取最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。用户将在图形界面中浏览这些数据，实时监控TCP、session等网络动态，轻松完成网络管理工作。<br></font>\n\n<h3 id=\"什么是数据包分析\"><font color=\"#3CB371\" face=\"Comic sans MS\">什么是数据包分析</font><a href=\"post/Wireshark-1#什么是数据包分析\"></a></h3><font face=\"Comic sans MS\">数据包嗅探或协议分析:指捕获和解析网络上传输的数据的过程，以便更好地了解网络上正在发生的事情。<br></font>\n\n<h3 id=\"TCP-IP四层模型：\"><font color=\"#3CB371\" face=\"Comic sans MS\">TCP/IP四层模型：</font><a href=\"post/Wireshark-1#TCP-IP四层模型：\"></a></h3><font face=\"Comic sans MS\"><strong>1.应用层：</strong>最高的一层，直接面对用户，各种程序都是基于这一层，主要作用是处理传输层提交的信息，与用户交换，并把信息传到下层发送。<br><strong>2.传输层：</strong>主要作用对数据包的分割、重组、连接、管理、排序、重传等等，以及标记逻辑端口号—常见协议：TCP、UDP; 端口0~ 65535个端口，只是应该标识，方便管理（such as:21端口是FTP程序，80端口是HTTP程序，4000端口是QQ）。<br><strong>3.网络层：</strong>主要作用是实现与远程设备的连接，是TCP/IP模型中最重要的一层，封装为 IP头部。封装中的重要部分为IP地址，每台设备唯一。<br><strong>4.链路层：</strong>主要功能在两个网络实体之间提供数据链路链接，最常见的是以太网和IEEE 802封装，封装中有一个重要的部分就是MAC地址（网卡物理地址）。<br></font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c42f9967e0d9.png\" alt=\"19-2.png\" data-zoomable></p></div>\n<font face=\"Comic sans MS\"><strong>TCP协议：</strong>可靠，面向连接，效验数据，超时重传，有序号，保证数据完整有序到达，但是协议复杂速度稍慢。（适合文件传输和网页浏览，对数据完整有序要求比较高的场合）<br><strong>UDP协议:</strong>不可靠，仅发送数据，不保证数据完整有序到达，协议简单速度快。（适合DNS查询，视频聊天，对数据完整有序要求比较低，但对数据即使性要求比较高的场合）<br></font>\n\n<h3 id=\"wireshark界面介绍\"><font color=\"#3CB371\" face=\"Comic sans MS\">wireshark界面介绍</font><a href=\"post/Wireshark-1#wireshark界面介绍\"></a></h3><font face=\"Comic sans MS\">wireshark是捕获机器上的某一块网卡的网络包，当你的机器上有多块网卡的时候，你需要选择一个网卡。 点击 <code>Caputre-&gt;Interfaces</code>. 出现下面对话框，选择正确的网卡。然后点击<code>Start</code>按钮, 开始抓包<br><br><strong>WireShark 主要分为这几个界面</strong><br>1. Display Filter(显示过滤器)，用于过滤。<br>2. Packet List Pane(封包列表)，显示捕获到的封包，有源地址和目标地址，端口号。 颜色不同，代表<br>3. Packet Details Pane(封包详细信息)，显示封包中的字段。<br>4. Dissector Pane(16进制数据)。<br>5. Miscellanous(地址栏，杂项)。<br></font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c42fc67a674b.png\" alt=\"19-3.png\" data-zoomable></p></div>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-Display-Filter-显示过滤器\"><font color=\"red\" face=\"Comic sans MS\"><strong>1. Display Filter(显示过滤器)</strong></font><a href=\"post/Wireshark-1#1-Display-Filter-显示过滤器\"></a></h4><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4300457e402.png\" alt=\"19-4.png\" data-zoomable></p></div>\n<font face=\"Comic sans MS\">使用过滤是非常重要的， 初学者使用wireshark时，将会得到大量的冗余信息，在几千甚至几万条记录中，以至于很难找到自己需要的部分。搞得晕头转向。<br>过滤器会帮助我们在大量的数据中迅速找到我们需要的信息。<br>过滤器有两种:<br>&emsp;&emsp;&emsp;一种是显示过滤器，就是主界面上那个，用来在捕获的记录中找到所需要的记录<br>&emsp;&emsp;&emsp;一种是捕获过滤器，用来过滤捕获的封包，以免捕获太多的记录。<br>在<code>Capture-&gt;Capture Filters</code>中设置.<br><br>&emsp;<br><strong>保存过滤</strong><br>在Filter栏上，填好Filter的表达式后，点击 + 按钮，取个名字。比如 “test”。点击OK后Filter栏上就多了个”test” 的按钮。</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4302ec99520.png\" alt=\"19-5.png\" data-zoomable></p></div>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><strong>过滤表达式的规则</strong><br>表达式规则<br>&emsp;&emsp;1. 协议过滤 比如TCP，只显示TCP协议。<br>&emsp;&emsp;2. IP 过滤 比如 ip.src ==192.168.1.102显示源地址为192.168.1.102，ip.dst==192.168.1.102, 目标地址为192.168.1.102<br>&emsp;&emsp;3. 端口过滤 tcp.port ==80, 端口为80的 tcp.srcport == 80, 只显示TCP协议的愿端口为80的。<br>&emsp;&emsp;4. Http模式过滤 http.request.method==”GET”, 只显示HTTP GET方法的。<br>&emsp;&emsp;5. 逻辑运算符为 AND/ OR 常用的过滤表达式<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">过滤表达式                                                      用途\nhttp                                                    只查看HTTP协议的记录\nip.src<span class=\"token operator\">==</span>192.168.1.102 or ip.dst<span class=\"token operator\">==</span>192.168.1.102      源地址或者目标地址是192.168.1.102\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-封包列表-Packet-List-Pane\"><font color=\"red\" face=\"Comic sans MS\"><strong>2. 封包列表(Packet List Pane)</strong></font><a href=\"post/Wireshark-1#2-封包列表-Packet-List-Pane\"></a></h4><font face=\"Comic sans MS\">封包列表的面板中显示，编号，时间戳，源地址，目标地址，协议，长度，以及封包信息。 <font color=\"#00B2EE\"><strong>你可以看到不同的协议用了不同的颜色显示。</strong></font><br>你也可以修改这些显示颜色的规则，<code>View-&gt;ColoringRules</code>。</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4308567081a.png\" alt=\"19-6.png\" data-zoomable></p></div>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"3-Packet-Details-Pane-封包详细信息\"><font color=\"red\" face=\"Comic sans MS\"><strong>3. Packet Details Pane(封包详细信息)</strong></font><a href=\"post/Wireshark-1#3-Packet-Details-Pane-封包详细信息\"></a></h4><font face=\"Comic sans MS\">Packet Details Pane(封包详细信息)，这个面板是我们最重要的，用来查看协议中的每一个字段。<br><strong>各行信息分别为：</strong><br>Frame: 物理层的数据帧概况<br>Ethernet II: 数据链路层以太网帧头部信息<br>Internet Protocol Version 4: 互联网层IP包头部信息<br>Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP<br>Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c43110cce481.png\" alt=\"19-7.png\" data-zoomable></p></div>\n<font face=\"Comic sans MS\"><strong>TCP包的具体内容</strong><br>从下图可以看到wireshark捕获到的TCP包中的每个字段。</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4311b3be837.png\" alt=\"19-8.png\" data-zoomable></p></div>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><strong>TCP三次握手</strong><br>看到这， 基本上对wireshak有了初步了解， 现在我们看一个TCP三次握手的实例三次握手过程为：</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4312139aa7f.png\" alt=\"19-9.png\" data-zoomable></p></div>\n<font face=\"Comic sans MS\">我们用wireshark实际分析下三次握手的过程。 打开wireshark, 打开浏览器输入 <a href=\"http://www.cr173.com\" target=\"_blank\" rel=\"noopener\">http://www.cr173.com</a> 在wireshark中输入http过滤， 然后选中GET /tankxiao HTTP/1.1的那条记录，右键然后点击”Follow TCP Stream”, 这样做的目的是为了得到与浏览器打开网站相关的数据包，将得到如下图：</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c431281371cc.png\" alt=\"19-10.png\" data-zoomable></p></div>\n<font face=\"Comic sans MS\">图中可以看到wireshark截获到了三次握手的三个数据包。第四个包才是HTTP的， 这说明HTTP的确是使用TCP建立连接的。</font>\n\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>第一次握手数据包</strong></font><br>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。 如下图</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4313be5c1f4.png\" alt=\"19-11.png\" data-zoomable></p></div>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>第二次握手的数据包</strong></font><br>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SYN加1以.即0+1=1, 如下</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4314b91bc6b.png\" alt=\"19-12.png\" data-zoomable></p></div>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>第三次握手的数据包</strong></font><br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1, 如下图</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/19/5c4315188f16a.png\" alt=\"19-13.png\" data-zoomable></p></div>\n<p>&emsp;<br>就这样通过了TCP三次握手，建立了连接。  <a href=\"https://mp.weixin.qq.com/s/qjLNOopwvWlJOWW6SAcTig\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<hr>\n<hr>\n","prev":{"title":"PHP基础语法","slug":"PHP-1"},"next":{"title":"Java数组(3.9)","slug":"Java-Language-2-4"},"link":"Treecatee.gitgub.io/post/Wireshark-1/","toc":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">前言</font>","id":"前言","index":"1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">什么是数据包分析</font>","id":"什么是数据包分析","index":"2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">TCP/IP四层模型：</font>","id":"TCP-IP四层模型：","index":"3"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">wireshark界面介绍</font>","id":"wireshark界面介绍","index":"4","children":[{"title":"<font color=\"red\" face=\"Comic sans MS\"><strong>1. Display Filter(显示过滤器)</strong></font>","id":"1-Display-Filter-显示过滤器","index":"4.1"},{"title":"<font color=\"red\" face=\"Comic sans MS\"><strong>2. 封包列表(Packet List Pane)</strong></font>","id":"2-封包列表-Packet-List-Pane","index":"4.2"},{"title":"<font color=\"red\" face=\"Comic sans MS\"><strong>3. Packet Details Pane(封包详细信息)</strong></font>","id":"3-Packet-Details-Pane-封包详细信息","index":"4.3"}]}],"copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/Wireshark-1/\" title=\"Wireshark简单介绍和数据包分析\">Treecatee.gitgub.io/post/Wireshark-1/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}