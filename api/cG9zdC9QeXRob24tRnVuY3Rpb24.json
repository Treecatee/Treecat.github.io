{"title":"Python-函数","date":"2019-03-02T06:18:58.000Z","thumbnail":"https://i.loli.net/2019/03/01/5c78f736c03de.jpg","slug":"Python-Function","comments":true,"tags":["Python语言"],"categories":["Python"],"updated":"2019-03-03T11:33:20.285Z","content":"<p>有两种定义函数的方法，千万不要忘了冒号和<code>return</code>   ( ´⚰︎` )<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>函数</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<blockquote>\n<p><strong>函数分为：</strong><font color=\"#FF7F00\"><strong>内置（系统）函数和自定义函数</strong></font>。</p>\n<ol>\n<li>自定义函数又分为普通（有名字的）函数和匿名（无名字的）函数，二者定义方式不一样；</li>\n<li>自定义和函数里面还可嵌套定义其他函数，匿名函数定义时是一条语句，并且要赋值给一个变量指针。</li>\n<li>普通函数的函数体如果为空，则必须放入一条pass语句，否则会报错；函数体不为空的必须有return语句，否则会报错。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-定义函数\"><font color=\"#FF6347\" face=\"Comic sans MS\">一. 定义函数</font><a href=\"post/Python-Function#一-定义函数\"></a></h3><blockquote>\n<p><strong>自定义函数简单的规则：</strong></p>\n<ol>\n<li>函数代码块以 <code>def</code> 关键词开头，依次写出函数名、括号、括号中的参数和冒号<code>:</code>。</li>\n<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>\n<li>函数内容以冒号起始，并且缩进写代码块结构。</li>\n<li>用<code>return [表达式]</code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。还可以返回多个值，如<code>return x,y</code></li>\n</ol>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>语法</strong></font>\n\n<p>Python 定义函数使用 def 关键字，默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。一般格式如下：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> 函数名（参数列表）<span class=\"token punctuation\">:</span>\n    函数体\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><br></p>\n<p>以自定义一个求绝对值的my_abs函数为例：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">my_abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> x\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>x\n\n运行结果：\n<span class=\"token number\">99</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-参数传递\"><font color=\"#FF6347\" face=\"Comic sans MS\">二. 参数传递</font><a href=\"post/Python-Function#二-参数传递\"></a></h3><p>在 python 中，类型属于对象，变量是没有类型的：<br><code>a=[1,2,3]</code><br><code>a=&quot;Runoob&quot;</code><br>以上代码中，[1,2,3] 是 List 类型，”Runoob” 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、可更改(mutable)与不可更改(immutable)对象</strong></font>\n\n<p>在 python 中，<font color=\"#FF7F00\"><strong>strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象</strong></font>。</p>\n<p>python 函数的参数传递：</p>\n<ul>\n<li><p><strong>不可变类型：</strong>类似 c++ 的值传递，如 <strong>整数</strong>、<strong>字符串</strong>、<strong>元组</strong>。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</p>\n</li>\n<li><p><strong>可变类型：</strong>类似 c++ 的引用传递（地址），如 <strong>列表</strong>，<strong>字典</strong>。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</p>\n</li>\n</ul>\n<blockquote>\n<p>python 中<font color=\"#FF7F00\"><strong>一切都是对象</strong></font>，严格意义我们不能说值传递还是引用传递，我们应该说<font color=\"#FF7F00\"><strong>传不可变对象和传可变对象</strong></font>。</p>\n</blockquote>\n<p><br></p>\n<p>python 传不可变对象实例:</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">ChangeInt</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nChangeInt<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> b <span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 结果是 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<blockquote>\n<p>实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。</p>\n</blockquote>\n</blockquote>\n<p><br></p>\n<p>传可变对象实例:</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">changeme</span><span class=\"token punctuation\">(</span> mylist <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"修改传入的列表\"</span>\n   mylist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"函数内取值1: \"</span><span class=\"token punctuation\">,</span> mylist<span class=\"token punctuation\">)</span>\n   mylist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"函数内取值2: \"</span><span class=\"token punctuation\">,</span> mylist<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 调用changeme函数</span>\nmylist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\nchangeme<span class=\"token punctuation\">(</span> mylist <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"函数外取值: \"</span><span class=\"token punctuation\">,</span> mylist<span class=\"token punctuation\">)</span>\n\n运行结果：\n函数内取值<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n函数内取值<span class=\"token number\">2</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n函数外取值<span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、参数</strong></font>\n\n<p><strong>以下是调用函数时可使用的正式参数类型：</strong></p>\n<ol>\n<li><p><font color=\"#FF7F00\"><strong>必需参数：</strong></font>调用函数时以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>\n</li>\n<li><p><font color=\"#FF7F00\"><strong>关键字参数：</strong></font>允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p>\n</li>\n<li><p><font color=\"#FF7F00\"><strong>默认参数：</strong></font>定义函数时可指定参数值，调用函数时，如果没有传递参数，则会使用默认参数。</p>\n</li>\n<li><p><font color=\"#FF7F00\"><strong>不定长参数：</strong></font>能处理比当初声明时更多的参数，这些参数被包装进一个<font color=\"#FF7F00\"><strong>元组</strong></font>或<font color=\"#FF7F00\"><strong>字典</strong></font>，通常，这些 可变 参数是参数列表中的最后一个，因为它们将把所有的剩余输入参数传递给函数。</p>\n</li>\n</ol>\n<p><br></p>\n<font color=\"#FF7F00\" face=\"Comic sans MS\"><strong>1. 必需参数：</strong></font>\n\n<p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>\n<p>调用printme()函数，你必须传入一个参数，不然会出现语法错误：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printme</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的字符串\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#调用printme函数</span>\nprintme<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"test.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    printme<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> printme<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">1</span> required positional argument<span class=\"token punctuation\">:</span> <span class=\"token string\">'str'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#FF7F00\" face=\"Comic sans MS\"><strong>2. 关键字参数：</strong></font>\n\n<p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p>\n<p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>以下实例中演示了函数参数的使用不需要使用指定顺序：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的字符串\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"名字: \"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄: \"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#调用printinfo函数</span>\nprintinfo<span class=\"token punctuation\">(</span> age<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span> <span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n名字<span class=\"token punctuation\">:</span>  runoob\n年龄<span class=\"token punctuation\">:</span>  <span class=\"token number\">50</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#FF7F00\" face=\"Comic sans MS\"><strong>3. 默认参数：</strong></font>\n\n<p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span> name<span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的字符串\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"名字: \"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄: \"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#调用printinfo函数</span>\nprintinfo<span class=\"token punctuation\">(</span> age<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------\"</span><span class=\"token punctuation\">)</span>\nprintinfo<span class=\"token punctuation\">(</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span> <span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n名字<span class=\"token punctuation\">:</span>  runoob\n年龄<span class=\"token punctuation\">:</span>  <span class=\"token number\">50</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n名字<span class=\"token punctuation\">:</span>  runoob\n年龄<span class=\"token punctuation\">:</span>  <span class=\"token number\">35</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#FF7F00\" face=\"Comic sans MS\"><strong>4. 不定长参数：</strong></font>\n\n<blockquote>\n<p><strong>你可能需要一个函数能处理比当初声明时更多的参数：</strong></p>\n<ol>\n<li>加了星号 <code>*</code> 的参数会以<font color=\"#FF7F00\"><strong>元组(tuple)</strong></font>的形式导入，存放所有未命名的变量参数。</li>\n<li>加了两个星号<code>**</code>的参数会以<font color=\"#FF7F00\"><strong>字典(dict)</strong></font>的形式导入。</li>\n<li>声明函数时，参数中星号 * 可以单独出现。</li>\n<li>如果单独出现星号 * 后的参数必须用关键字传入。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<ol>\n<li>加了星号<code>*</code>的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span> arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vartuple <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的参数\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"输出: \"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">for</span> var <span class=\"token keyword\">in</span> vartuple<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"循环输出: \"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 调用printinfo 函数</span>\nprintinfo<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span>\nprintinfo<span class=\"token punctuation\">(</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span>\n\n输出结果：\n输出<span class=\"token punctuation\">:</span>\n<span class=\"token number\">10</span>\n输出<span class=\"token punctuation\">:</span>\n<span class=\"token number\">70</span>\n循环输出<span class=\"token punctuation\">:</span>\n<span class=\"token number\">60</span>\n循环输出<span class=\"token punctuation\">:</span>\n<span class=\"token number\">50</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<ol start=\"2\">\n<li>加了两个星号<code>**</code>的参数会以字典的形式导入。</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">printinfo</span><span class=\"token punctuation\">(</span> arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>vardict <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token string\">\"打印任何传入的参数\"</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"输出: \"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>vardict<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 调用printinfo 函数</span>\nprintinfo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n<span class=\"token number\">1</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<ol start=\"3\">\n<li>声明函数时，参数中星号 * 可以单独出现，例如:</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><br></p>\n<ol start=\"4\">\n<li>如果单独出现星号 * 后的参数必须用关键字传入。</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n\na <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># 报错</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n报错如下：\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nTypeError<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> takes <span class=\"token number\">2</span> positional arguments but <span class=\"token number\">3</span> were given\n\n改正方式：\na <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 正常</span>\n<span class=\"token number\">6</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"三-匿名函数\"><font color=\"#FF6347\" face=\"Comic sans MS\">三. 匿名函数</font><a href=\"post/Python-Function#三-匿名函数\"></a></h3><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>python 使用 lambda 来创建匿名函数。</strong></font>\n\n<blockquote>\n<p><strong>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</strong></p>\n<ol>\n<li>lambda 只是一个表达式，函数体比 def 简单很多。</li>\n<li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li>\n<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p><strong>语法</strong><br>lambda 函数的语法只包含一个语句，如下：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">[</span>arg1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>argn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>expression\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><br></p>\n<p>如下实例：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 可写函数说明</span>\nsum <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2\n\n<span class=\"token comment\" spellcheck=\"true\"># 调用sum函数</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n相加后的值为 <span class=\"token punctuation\">:</span>  <span class=\"token number\">30</span>\n相加后的值为 <span class=\"token punctuation\">:</span>  <span class=\"token number\">40</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"四-变量作用域\"><font color=\"#FF6347\" face=\"Comic sans MS\">四. 变量作用域</font><a href=\"post/Python-Function#四-变量作用域\"></a></h3><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p>\n<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p>\n<ul>\n<li><font color=\"#FF7F00\"><strong>L （Local）</strong></font> 局部作用域</li>\n<li><font color=\"#FF7F00\"><strong>E （Enclosing）</strong></font> 闭包函数外的函数中(函数A中定义了函数B，A定义的变量对B来说是闭包函数外的函数)</li>\n<li><font color=\"#FF7F00\"><strong>G （Global）</strong></font> 全局作用域</li>\n<li><font color=\"#FF7F00\"><strong>B （Built-in）</strong></font> 内置作用域（内置函数所在模块的范围）</li>\n</ul>\n<p>以 L –&gt; E –&gt; G –&gt;B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">g_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\" spellcheck=\"true\"># 全局作用域</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    o_count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\" spellcheck=\"true\"># 闭包函数外的函数中</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        i_count <span class=\"token operator\">=</span> <span class=\"token number\">2</span>  <span class=\"token comment\" spellcheck=\"true\"># 局部作用域</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">'I am from Runoob'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n输出结果：\nI am <span class=\"token keyword\">from</span> Runoob\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<blockquote>\n<p>实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。<br>如果将 msg 定义在函数中，则它就是局部变量，外部不能访问。</p>\n</blockquote>\n<p><br></p>\n<p><br></p>\n<h3 id=\"五-全局变量和局部变量\"><font color=\"#FF6347\" face=\"Comic sans MS\">五. 全局变量和局部变量</font><a href=\"post/Python-Function#五-全局变量和局部变量\"></a></h3><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p>\n<p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">total <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\" spellcheck=\"true\"># 这是一个全局变量</span>\n<span class=\"token comment\" spellcheck=\"true\"># 可写函数说明</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span> arg1<span class=\"token punctuation\">,</span> arg2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#返回2个参数的和.\"</span>\n    total <span class=\"token operator\">=</span> arg1 <span class=\"token operator\">+</span> arg2 <span class=\"token comment\" spellcheck=\"true\"># total在这里是局部变量.</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"函数内是局部变量 : \"</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> total\n\n<span class=\"token comment\" spellcheck=\"true\">#调用sum函数</span>\nsum<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"函数外是全局变量 : \"</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n函数内是局部变量 <span class=\"token punctuation\">:</span>  <span class=\"token number\">30</span>\n函数外是全局变量 <span class=\"token punctuation\">:</span>  <span class=\"token number\">0</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>global 和 nonlocal关键字</strong></font>\n\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>global</strong></font>：内部作用域使用全局变量，并且可以修改，作用影响全局；</p>\n<p><font color=\"#FF7F00\"><strong>nonlocal</strong></font>：函数A嵌套函数B，函数B使用函数A的变量，并且可以修改，作用影响函数A的这个变量；</p>\n</blockquote>\n<ol>\n<li>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。</li>\n</ol>\n<p>以下实例修改全局变量 num：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> num  <span class=\"token comment\" spellcheck=\"true\"># 需要使用 global 关键字声明</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> \n    num <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\nfun1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n<span class=\"token number\">1</span>\n<span class=\"token number\">123</span>\n<span class=\"token number\">123</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<ol start=\"2\">\n<li>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例：</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        nonlocal num   <span class=\"token comment\" spellcheck=\"true\"># nonlocal关键字声明</span>\n        num <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    inner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\nouter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n以上实例输出结果：\n<span class=\"token number\">100</span>\n<span class=\"token number\">100</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"六-非公开函数\"><font color=\"#FF6347\" face=\"Comic sans MS\">六. 非公开函数</font><a href=\"post/Python-Function#六-非公开函数\"></a></h3><blockquote>\n<p><font color=\"#FF7F00\"><strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong></font>。</p>\n</blockquote>\n<p>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；</p>\n<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p>\n<p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_private_1</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, %s'</span> <span class=\"token operator\">%</span> name\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_private_2</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hi, %s'</span> <span class=\"token operator\">%</span> name\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _private_1<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _private_2<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p>我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p>\n<p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</p>\n","prev":{"title":"Python-生成器与迭代器","slug":"Python-generator-iterator"},"next":{"title":"Python-运算符","slug":"Python-Operators"},"link":"Treecatee.gitgub.io/post/Python-Function/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 定义函数</font>","id":"一-定义函数","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 参数传递</font>","id":"二-参数传递","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三. 匿名函数</font>","id":"三-匿名函数","index":"3"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">四. 变量作用域</font>","id":"四-变量作用域","index":"4"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">五. 全局变量和局部变量</font>","id":"五-全局变量和局部变量","index":"5"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">六. 非公开函数</font>","id":"六-非公开函数","index":"6"}],"copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/Python-Function/\" title=\"Python-函数\">Treecatee.gitgub.io/post/Python-Function/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}