{"title":"Java接口、包(4.7-4.8)","date":"2018-12-26T14:16:53.000Z","thumbnail":"https://i.loli.net/2018/12/26/5c2390274f7fc.jpg","slug":"Java-Interface-Package5","comments":true,"tags":["Java学习"],"categories":["Java"],"updated":"2019-03-05T11:46:37.183Z","content":"<p>&emsp;<br>&emsp;</p>\n<center><font color=\"#3CB371\" face=\"Comic sans MS\" size=\"5\"><strong>接口 &amp; 包</strong></font></center>\n\n<p>&emsp;</p>\n<h3 id=\"一、-接口\"><font color=\"#FF6347\" face=\"Comic sans MS\">一、 接口</font><a href=\"post/Java-Interface-Package5#一、-接口\"></a></h3><h4 id=\"1-1-接口的概念\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  接口的概念</font><a href=\"post/Java-Interface-Package5#1-1-接口的概念\"></a></h4><font face=\"Comic sans MS\"><strong>1.  📒使程序设计和实现相互分离：</strong><br>在单继承的继承树中，设计和实现不可避免地要纠缠在一起。在设计的时候，人们也许只想提供一个类的抽象的接口，而不希望去具体实现它，因为那是实现阶段的事情。使用接口类型可以很完美地解决这个问题。<br><br><strong>2.📒弥补Java只支持单重继承的不足：</strong><br>   Java的类型层次结构具有一定的局限——它只支持单继承，一个类只能有一个父类，而不能交叉继承树的其它分支中有用的部分。这样就给面向对象的程序设计带来了一些困难。但是多继承的引入使得继承层次结构变得混乱，更加容易出错和产生二义性。<br><br><strong>3.📒约束实现接口的类</strong>:<br>接口只是约束实现了该接口的类必须满足接口的要求。<br>当定义一个接口时，实际上是在编写一个契约，用来描述实现其的类能够做什么，能够充当什么角色，具体怎么做和接口无关。<br><br><br><strong>所以，Java抛弃了多继承，引入一种新的层次结构——<font color=\"red\">接口</font>来达到同样的功能。</strong></font>\n\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\">📒<strong>接口和类的区别：</strong> </font><br> (1) 类只能单继承，而接口可以多继承。<br> (2) 类中的方法可以是具体的，也可以抽象的。 接口中的方法都是抽象的。<br> (3) 接口中的方法要用类来实现，一个类可以实现多个接口。<br><font color=\"red\">📒<strong>注意：</strong>  </font><br> (1) 接口可以继承：一个接口可以继承多个其它的接口，<br> (2) 接口中的方法要用类来实现 。<br> (3) 一个类可以实现多个接口 。<br> (4) Java接口反映了对象较高层次的抽象，为描述相互似乎没有关系的对象的共性提供了一种有效的手段。</font></td></tr></table></div></div>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-2-接口的说明\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  接口的说明</font><a href=\"post/Java-Interface-Package5#1-2-接口的说明\"></a></h4><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>修饰符<span class=\"token punctuation\">]</span> <span class=\"token keyword\">interface</span> 接口名<span class=\"token punctuation\">[</span><span class=\"token keyword\">extends</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>接口列表<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{</span>\n   接口体\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1.  📒首部：</strong></font><br><strong>修饰符：</strong>或者不使用修饰符（同包访问），或者只能使用public（任意访问）。归结为只能使用public或者缺省.<br><strong>extends：</strong>定义父接口，支持多重继承(多个父接口用逗号分隔)<br>&emsp;&emsp;&emsp;&emsp;public interface Cookable extends Foodable,Printable<br><br><font color=\"#00B2EE\"><strong>2.📒接口体：定义常量和抽象方法：</strong></font><br>&emsp;<font color=\"red\"><strong>接口的成员：成员变量和方法</strong></font><br><strong>(1) 接口中的成员变量：</strong>都是隐含public、static、final的——静态最终变量（常量），例如在接口中有下面这行代码：<br>int STEP=5;<br>等同于：<br>public static final int STEP=5;<br><strong>(2) 接口中的方法：</strong>接口中说明的方法都是抽象方法，所有方法隐含public和abstract的 ，例如 int increment(int x)；<br><font color=\"red\">注意， 接口中的方法不能使用下面的修饰符：</font><br>     static<br>     native或synchronized<br>     final<br></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-3-接口的使用\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.3  接口的使用</font><a href=\"post/Java-Interface-Package5#1-3-接口的使用\"></a></h4><font face=\"Comic sans MS\">&emsp;接口自己不能提供方法的实现，接口中的方法必须由类实现。Java语言用关键字implements声明类中将实现的接口。声明接口的形式：<br>&emsp;&emsp;<font color=\"#00B2EE\">[类修饰符]  class类名  [extends子句]  [ implements 子句]</font><br><font color=\"red\"><strong>注意：</strong></font><br>在implements子句中可以包含多个接口类型，各个接口类型之间用逗号隔开。<br></font>\n\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>例<span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span>  TestInterface<span class=\"token punctuation\">.</span>java 接口的使用示例\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runner</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Swimmer</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runner</span><span class=\"token punctuation\">,</span>Swimmer <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//Person是能跑和游泳的动物，所以继承了Animal，同时实现了Runner和Swimmer两个接口</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInterface</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        TestInterface t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Person p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">m3</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span>Runner f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>Swimmer s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span>Animal a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-4-对接口的引用\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.4  对接口的引用</font><a href=\"post/Java-Interface-Package5#1-4-对接口的引用\"></a></h4><font face=\"Comic sans MS\">&emsp;(1) 接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可以存储在该接口类型的变量中，通过这些变量可以访问类所实现的接口中的方法。Java运行时系统动态地确定该使用哪个类中的方法。<br><br>&emsp;(2) 把接口作为一种数据类型可以不需要了解对象所对应的具体的类，而着重于它的交互界面。例如，[例4-18]中Person类实现了Runner接口，可以如下赋值，和子类对象赋给父类对象是类似的：<br>          Runner r=new Person();<br></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-5-使用接口实现多重继承\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.5  使用接口实现多重继承</font><a href=\"post/Java-Interface-Package5#1-5-使用接口实现多重继承\"></a></h4><font face=\"Comic sans MS\">&emsp;程序设计有时需要表达这样的意思：<br>&emsp;&emsp;<font color=\"#00B2EE\"> “x从属于a，也从属于b，也从属于c” </font><br><strong>C++：</strong>多重继承，每个类都有具体的实施细节<br><strong>Java：</strong>接口，只有一个类有具体的实施细节<br></font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2018/12/27/5c246b3100ab8.png\" alt=\"图片1.png\" data-zoomable></p></div>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>例<span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>  Swan<span class=\"token punctuation\">.</span>java 接口实现多重继承\n<span class=\"token comment\" spellcheck=\"true\">/* Swan表示天鹅类，它继承了animal基础类，并实现了接口canWalk、canSwim、canFly，即天鹅具有\nanimal的功能，同时也具有行走、游泳和飞行的功能。这就实现了多重继承。\n*/</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">canWalk</span><span class=\"token punctuation\">{</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">canSwim</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">canFly</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">animal</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Swan</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">animial</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">canWalk</span><span class=\"token punctuation\">,</span>canSwim<span class=\"token punctuation\">,</span>canFly\n<span class=\"token punctuation\">{</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swan walking!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swan swimming!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swan flying!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swan eating!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Swan swan<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Swan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        swan<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        swan<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        swan<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        swan<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-6-抽象类和接口的选择\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.6  抽象类和接口的选择</font><a href=\"post/Java-Interface-Package5#1-6-抽象类和接口的选择\"></a></h4><font color=\"red\"><strong><em>问题：接口和抽象类都可以使设计和实现分离，那么继承结构中的基础类应该定义成一个普通类、抽象类还是接口 ？？</em></strong></font><br><font face=\"Comic sans MS\">(1) 在语法上都是可以的，但是把基础类定义成抽象类或接口往往会增加程序的灵活性和容错性；<br>(2) 如果基础类只是定义一些接口，根本不需要具体的实现，<font color=\"#00B2EE\"> <strong>那么首先优先选择使用接口，接口的抽象程度比抽象类更高；</strong></font><strong>如果基础类必须实现方法或者定义成员变量的时候，才考虑采用抽象类。</strong></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-7-多态\"><font color=\"#20B2AA\" face=\"Comic sans MS\">1.7  多态</font><a href=\"post/Java-Interface-Package5#1-7-多态\"></a></h4><font face=\"Comic sans MS\">📒<strong>多个类中的多态：</strong>在具有继承关系的多个类中，子类对父类方法的覆盖（不能是重载父类的方法），即子类和父类可以有相同首部的方法，运行的时间决定每个对象到底执行哪个特定的版本。<br>📒<strong>判断程序中是否存在多态：</strong><font color=\"red\"><strong>继承(覆盖)、向上转型、动态绑定。</strong></font>\n\n<p>&emsp;<font color=\"red\"><strong>1. 覆盖：</strong></font>前面已经讲过，如下：<br><img src=\"https://i.loli.net/2019/01/08/5c3473153aa24.png\" alt=\"20-1.png\"></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span>例<span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> Shapes<span class=\"token punctuation\">.</span>java 多态性示例<span class=\"token number\">1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle.draw()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle.erase()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Square.draw()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Square.erase()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shapes</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>Shape s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  s<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Circle c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Square s<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n运行结果：\nCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nCircle<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nSquare<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nSquare<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;<font color=\"red\"><strong>2. 向上转型：</strong></font>子类对象可以直接转换成父类对象，即一个对象除了可以当作自己的类型，还可以作为它的基础类型对待，这种把子类型当作它的基本类型处理的过程，就叫作向上转型（即“Upcasting”）<br><strong>例如：</strong><br>Shape s=new Circle();<br>Circle c=new Circle();<br>Square s=new Square();<br>doShape(c);<br>doShape(s);</p>\n<p>&emsp;<font color=\"red\"><strong>3. 动态绑定：</strong></font><br>&emsp;&emsp;绑定：将一个方法调用同一个方法体连接起来<br>&emsp;&emsp;早期绑定：程序运行以前执行绑定；<br>&emsp;&emsp;动态绑定（或后期绑定）：在运行期间执行绑定。</p>\n<font color=\"#00B2EE\"><strong>Java支持动态绑定：能在运行期间判断参数的实际类型，并分别调用适当的方法体，从而实现了多态性。在Java中所有非final和非static的方法都会自动地进行动态绑定。</strong></font><br></font>\n\n<p><em>如下代码块：</em><br><img src=\"https://i.loli.net/2018/12/27/5c24716ea85b2.png\" alt=\"21\"></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Triangle.draw()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Triangle.erase()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shapes</span> \n<span class=\"token punctuation\">{</span> \n <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>Shape s<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n     s<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Circle c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Square s<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Triangle t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doShape</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"二、-包\"><font color=\"#FF6347\" face=\"Comic sans MS\">二、 包</font><a href=\"post/Java-Interface-Package5#二、-包\"></a></h3><h4 id=\"2-1-包的说明和作用\"><font color=\"#20B2AA\" face=\"Comic sans MS\">2.1  包的说明和作用</font><a href=\"post/Java-Interface-Package5#2-1-包的说明和作用\"></a></h4><font face=\"Comic sans MS\"><strong>1. 📒包的说明：</strong><br>•    包是用于组织类的一种方式，可以对类进行分组，一个包中可以包含任意数量的类和接s口,本身是一种命名机制，具体的表现就是一个文件夹<br>•    包是一种松散的类的集合：一般不要求处于同一个包中的类有明确的相互关系，如包含、继承等，但是由于同一个包中的类在默认情况下可以相互访问，所以为了方便编程和管理，通常把需要在一起工作的类放在一个包里。<br><br><strong>2. 📒包的作用：</strong><br>（1）包能够让程序员将类组织成单元，通过文件夹或目录来组织文件和应用程序；<br>（2）包减少了名称冲突带来的问题，可以防止同名的类发生冲突；<br>（3）包能够更大面积的保护类、变量和方法，而不是分别对每个类进行保护；<br>（4）包可以用于标示类。<br></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-2-包的创建\"><font color=\"#20B2AA\" face=\"Comic sans MS\">2.2  包的创建</font><a href=\"post/Java-Interface-Package5#2-2-包的创建\"></a></h4><font face=\"Comic sans MS\"><strong>1. 📒无名包：</strong><br>&emsp;&emsp;系统为每个没有明确指明所属包的.java文件默认创建的包<br>&emsp; &emsp; <font color=\"#00B2EE\"><strong>无名包中的类无法被引用和复用</strong></font>\n\n<p><strong>2. 📒有名包：</strong><br>     （1）说明格式   package 包名；<br>       &emsp;&emsp; package SubClass;<br>       &emsp;&emsp; package MyClass.SubClass;<br>     （2）<font color=\"red\"><strong>说明语句必须放在整个.java文件的第一行</strong></font> </p>\n<p><strong>3. 📒创建包的含义：</strong><br>      &emsp;创建包就是在当前文件夹下创建一个子文件夹，以便存放这个包中包含的所有类的.class文件.</p>\n<p><strong>4.</strong> 📒可以在不同的文件中使用相同的包说明语句，这样就可以将不同文件中的类都包含到相同的程序包中.<br></p></font><p></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> SubClass<span class=\"token punctuation\">;</span>         <span class=\"token keyword\">package</span> MyClass<span class=\"token punctuation\">.</span>SubClass<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">s1</span><span class=\"token punctuation\">{</span>                 <span class=\"token keyword\">class</span> <span class=\"token class-name\">s2</span><span class=\"token punctuation\">{</span>\n……                        ……\n <span class=\"token punctuation\">}</span>                         <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-3-包的引用\"><font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  包的引用</font><a href=\"post/Java-Interface-Package5#2-3-包的引用\"></a></h4><font face=\"Comic sans MS\"><strong>1. 📒使用全名引用：</strong><br>&emsp;(1) 同包的类相互引用时：<br>&emsp;&emsp;&emsp;      <font color=\"red\">在使用的属性或方法名前加上类名作为前缀即可.</font><br>&emsp;(2) 不同包中的类相互引用时：<br>&emsp;&emsp;&emsp;      <font color=\"red\">在类名的前面再加上包名——类的全名.</font><br>&emsp;&emsp;&emsp;      例如：Class myDate extends java.util.Date{<br>&emsp;&emsp;&emsp;      java.util.Date d=new java.util.Date();<br>&emsp;&emsp;&emsp;      ……<br>&emsp;&emsp;&emsp;       }<br><br><strong>2. 📒使用import：</strong><br>&emsp;&emsp;import可以加载整个包中的文件或包中的某一个文件。import语句的格式为：<br>&emsp;&emsp;&emsp;&emsp;<font color=\"#00B2EE\">import package1[.package2…].(classname|*);</font><br></font>\n\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">{</span>\n         Date d<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n……\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<font color=\"red\" face=\"Comic sans MS\"><strong>注意：java编译器会为所有程序自动引入包java.lang，因此不必用import语句引入它包含的所有的类，但是若需要使用其他包中的类，必须用import语句引入。</strong></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-4-编译和运行包中的类\"><font color=\"#20B2AA\" face=\"Comic sans MS\">2.4  编译和运行包中的类</font><a href=\"post/Java-Interface-Package5#2-4-编译和运行包中的类\"></a></h4><font face=\"Comic sans MS\">当程序中用package语句指明一个包，在编译时产生的字节码文件（.class文件）需要放到相应的以包名为名称的文件夹目录下：<br>   （1）手工建立子目录，以包名命名该目录，再将.class文件复制到相应目录下。<br>   （2）在编译时，使用“javac –d”命令<br></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-5-Java包\"><font color=\"#20B2AA\" face=\"Comic sans MS\">2.5  Java包</font><a href=\"post/Java-Interface-Package5#2-5-Java包\"></a></h4><p><font face=\"Comic sans MS\">&emsp;&emsp;Java自带了一些包。这些包以“java.”开头，作为java的一个标准部分发布。学习Java，必须学习Java常用包中的类。从第六章开始，主要内容是介绍Java常用包的使用。</font></p>\n<p><a href=\"https://www.breakyizhan.com/java/4260.html\" target=\"_blank\" rel=\"noopener\">包的使用参考。</a><br><a href=\"https://www.breakyizhan.com/java/4313.html\" target=\"_blank\" rel=\"noopener\">输入流的使用参考。</a><br>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n","prev":{"title":"Java变量及其传递、内部类(4.9-4.10)","slug":"Java-Variable-InnerClass6"},"next":{"title":"Hash函数和消息认证","slug":"Hash-Message-Authentication"},"link":"Treecatee.gitgub.io/post/Java-Interface-Package5/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一、 接口</font>","id":"一、-接口","index":"1","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  接口的概念</font>","id":"1-1-接口的概念","index":"1.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  接口的说明</font>","id":"1-2-接口的说明","index":"1.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.3  接口的使用</font>","id":"1-3-接口的使用","index":"1.3"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.4  对接口的引用</font>","id":"1-4-对接口的引用","index":"1.4"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.5  使用接口实现多重继承</font>","id":"1-5-使用接口实现多重继承","index":"1.5"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.6  抽象类和接口的选择</font>","id":"1-6-抽象类和接口的选择","index":"1.6"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.7  多态</font>","id":"1-7-多态","index":"1.7"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二、 包</font>","id":"二、-包","index":"2","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.1  包的说明和作用</font>","id":"2-1-包的说明和作用","index":"2.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.2  包的创建</font>","id":"2-2-包的创建","index":"2.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  包的引用</font>","id":"2-3-包的引用","index":"2.3"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.4  编译和运行包中的类</font>","id":"2-4-编译和运行包中的类","index":"2.4"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.5  Java包</font>","id":"2-5-Java包","index":"2.5"}]}],"copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/Java-Interface-Package5/\" title=\"Java接口、包(4.7-4.8)\">Treecatee.gitgub.io/post/Java-Interface-Package5/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}