{"title":"PHP-正则表达式","date":"2019-02-14T13:40:36.000Z","thumbnail":"https://i.loli.net/2019/02/15/5c66518f6861b.jpg","slug":"PHP-Regular-Expression","comments":true,"tags":["PHP语言"],"categories":["PHP"],"updated":"2019-03-08T14:54:07.878Z","content":"<p>世界上最难懂的是道士的鬼符、医生的处方和程序员的正则表达示。(ง •_•)ง<br><a id=\"more\"></a></p>\n<p>&ensp;<br>&ensp;</p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>PHP 正则表达式</strong></font></center>\n\n<p>&emsp;<br>&emsp;</p>\n<font color=\"red\"><strong>正则表达示我们其实之前经常看到，它主要用在以下一些地方：</strong></font><br>1.匹配邮箱、手机号码、验证码<br>2.替换敏感的关键词。例如：涉及政治和骂人的话<br>3.文章采集。<br>4.早期的表情替换技术,ubb文件编码、markdown编辑器替换等<br>5.以后自己写模板引擎也需要用到正则表达示<br>其他….<br><font face=\"Comic sans MS\"></font>\n\n<blockquote>\n<p>正则表达式是一种描述字符串结果的语法规则，是一个特定的格式化模式，可以匹配、替换、截取匹配的字符串。<font color=\"#00B2EE\"><strong>常用的语言基本上都有正则表达式，如JavaScript、java</strong></font>等。其实，只有了解一种语言的正则使用，其他语言的正则使用起来，就相对简单些。文本主要围绕解决下面问题展开。</p>\n</blockquote>\n<hr>\n<hr>\n<h4 id=\"1-定界符\"><font color=\"#FF6347\" face=\"Comic sans MS\">1. 定界符</font><a href=\"post/PHP-Regular-Expression#1-定界符\"></a></h4><font face=\"Comic sans MS\">定界符，就是定一个边界，边界以内的就是正则表达示。<br>PHP的正则表达示定界符的规定如下：<br>定界符，<font color=\"#00B2EE\"><strong>不能用a-zA-Z0-9\\ 其他的都可以用。必须成对出现，有开始就有结束。</strong></font><br>我们来例几个例子：<br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">例子</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">/中间写正则/</td>\n<td style=\"text-align:center\">正确</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$中间写正则$</td>\n<td style=\"text-align:center\">正确</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%中间写正则%</td>\n<td style=\"text-align:center\">正确</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^中间写正则^</td>\n<td style=\"text-align:center\">正确</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@中间写正则@</td>\n<td style=\"text-align:center\">正确</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#中间写正则#</td>\n<td style=\"text-align:center\">正确</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(中间写正则)</td>\n<td style=\"text-align:center\">错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A中间写正则A</td>\n<td style=\"text-align:center\">错误</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-转义字符\"><font face=\"Comic sans MS\" color=\"#FF6347\"> 2. 转义字符 </font><a href=\"post/PHP-Regular-Expression#2-转义字符\"></a></h4><font face=\"Comic sans MS\">注：<font color=\"#FF7F00\">\\ </font>是转义字符，如果在以后正则表达示里面需要匹配/，如下：<br>/ / /<br>这个时候真要匹配/ 的时候，需要把定界符里面的/ 用转义字符转义一下，写成下面的例子：<br>/ <font color=\"#FF7F00\">\\</font>/ /<br>如果你觉得麻烦，遇到这种需要转义的字符的时候可以把两个正斜线（/ /）定界，改为其他的定界符（# #）。<br></font>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"3-原子\"><font face=\"Comic sans MS\"><font color=\"#FF6347\"> 3. 原子 </font></font><a href=\"post/PHP-Regular-Expression#3-原子\"></a></h4><font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>原子</strong></font>是正则表达示里面的最小单位，原子说白了就是需要匹配的内容。一个成立的正则表达示当中必须最少要有一个原子。<br><font color=\"#00B2EE\"><strong>所有可见不可见的字符就是原子！</strong></font><br><font color=\"red\"><strong>说明：</strong></font>我们见到的空格、回车、换行、0-9、A-Za-z、中文、标点符号、特殊符号全为原子。<br>在做原子的实例前我们先来讲解一个函数,preg_match:<br><font color=\"red\">int preg_match ( string $正则 , string $字符串 [, array &amp;$结果] )</font><br>功能：根据$正则变量，匹配$字符串变量。如果存在则返回匹配的个数，把匹配到的结果放到$结果变量里。如果没有匹配到结果返回0。<br><strong>注：</strong>上面是preg_match常用的主要几个参数。我在上面将另外几个参数没有列出来。因为，另外两个参数太不常用了。<br>我们来通过实验来证明：<br></font>\n\n<font color=\"#FF6347\">(1)↓↓</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//定义一个变量叫zz，放正则表达示。为了方便大家记忆，如果你英文比较ok，建议把变量名还是写成\n//英文的<span class=\"token variable\">$pattern</span>。\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/a/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ddfdjjvi2jfvkwkfi24'</span><span class=\"token punctuation\">;</span>\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>因为我希望的是匹配a，而$string当是是不存在a的，所以不成功。</p>\n</blockquote>\n<font color=\"#FF6347\">(2)↓↓</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/wq/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ssssswqaaaaaa'</span><span class=\"token punctuation\">;</span>\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的字符串中s后存在wq，因此匹配成功。</p>\n</blockquote>\n<p>接下来我们匹配一个空格试试：</p>\n<font color=\"#FF6347\">(3)↓↓</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/ /'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'sssssw aaaaa'</span><span class=\"token punctuation\">;</span>\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>因上，$string这个变量的w字符后存在一个空格。所以匹配成功，输出了字符串类型，长度为1。只不过我们的肉眼不可见，看不到这个字符串而已。</p>\n</blockquote>\n<p>&emsp;</p>\n<h4 id=\"4-特殊标识的原子\"><font face=\"Comic sans MS\" color=\"#FF6347\">4. 特殊标识的原子</font><a href=\"post/PHP-Regular-Expression#4-特殊标识的原子\"></a></h4><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">原子</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">等价式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:left\">匹配一个0-9</td>\n<td style=\"text-align:left\">[a-zA-Z0-9_] </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:left\">除了0-9以外的所有字符</td>\n<td style=\"text-align:left\">[^a-zA-Z0-9_]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:left\">a-zA-Z0-9_</td>\n<td style=\"text-align:left\">[0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:left\">除了0-9A-Za-z_以外的所有字符</td>\n<td style=\"text-align:left\">[^0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:left\">匹配所有空白字符\\n \\t \\r 空格</td>\n<td style=\"text-align:left\">[ \\t\\n\\f\\r]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:left\">匹配所有非空白字符</td>\n<td style=\"text-align:left\">[^ \\t\\n\\f\\r]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ ]</td>\n<td style=\"text-align:left\">指定范围的原子</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table></div></div>\n<font color=\"#FF6347\">这个个需要记住，最好达到默写级别。记忆的时候成对记忆，\\d是匹配一个0-9，那么\\D 就是除了0-9以外的所有字符。上面已经说明的很清楚了，我们进行实验一步一步对这些进行学习。</font>\n\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1. \\d匹配一个0-9</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\d/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'我爱喝9你爱不爱喝'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>2. \\D匹配一个非0-9的值</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\D/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'121243中23453453'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配成功，匹配到了中。因为它不是0-9之间的字符。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>3. \\w匹配一个a-zA-Z0-9_</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\w/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'新中_国万岁呀万岁'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配成功，匹配到了下划线。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>4. \\W匹配一个非a-zA-Z0-9_</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\w/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'afasABCWEQR44231284737'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配失败。因为，上面上面全是a-zA-Z0-9_，没有非a-zA-Z0-9_。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>5. \\s 匹配所有空白字符\\n \\t \\r 空格</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\s/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"中国万\n岁\"</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配成功，因为有一个回车。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>6. \\S 非空字符</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\s/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"        \n         a       \"</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配成功。虽然上面有空格，回车和缩进。但是，有一个非空白字符a。因此，匹配成功。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>7. [] 指定范围的原子</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/[0-5]\\w+/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'6a'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1C'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：<br>上例中0-5匹配$string失败，而$string1成功。因为，$string中的第一个数值为6，不在[0-5]的范围之内。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/[a-zA-Z0-9_]\\w/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ab'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'9A'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：$string和$string1都匹配成功。因为\\w就是[a-zA-Z0-9_]</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/[abc]\\d+/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a9'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">'c5'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string3</span> <span class=\"token operator\">=</span> <span class=\"token string\">'d4'</span><span class=\"token punctuation\">;</span>\n\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：$string、$string1、$string2匹配成功，而$string3不成功。因为$string3超过了[abc]的范围，它是从d开始的。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>8. [\\^ 字符] 不匹配指定区间的字符</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/[^0-9A-Za-z_]/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'aaaaab311dd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'!<span class=\"token variable\">$@!#</span>%<span class=\"token variable\">$#</span>^##'</span><span class=\"token punctuation\">;</span>\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：</p>\n<ol>\n<li>匹配$string不成功，但是匹配$string1的时候成功。因为中括号里面有个抑扬符。</li>\n<li>^ 抑扬符在中括号里面的作用是不准以中括号里面的字符进行匹配。</li>\n</ol>\n</blockquote>\n<p>&emsp;</p>\n<h4 id=\"5-元字符\"><font face=\"Comic sans MS\" color=\"#FF6347\">5. 元字符</font><a href=\"post/PHP-Regular-Expression#5-元字符\"></a></h4><font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>抛出问题：</strong></font>\\d 代表匹配一个字符。而我现在想要匹配十个八个，任意多个数字肿么办？<br>这个时候我们就要用到元字符。在使用原子的时候，发现只能够匹配一个字符，可是要匹配多个字符就出现了问题。<br>这个时候，我们需要借助<font color=\"#00B2EE\">元字符</font>来帮我们修饰原子，实现更多的功能。<br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元字符</th>\n<th style=\"text-align:left\">功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">是代表匹配前面的一个原子，匹配0次或者任意多次前面的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">匹配一次或多前前面的一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">前面的字符可有可无【可选】 有或没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">更标准一些应该把点算作原子。匹配除了\\n以外的所有字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">丨</td>\n<td style=\"text-align:left\">或者。注：它的优先级最低了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">必须要以抑扬符之后的字符串开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">必须要以$之前的字符结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:left\">词边界</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\B</td>\n<td style=\"text-align:left\">非边界</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{m}</td>\n<td style=\"text-align:left\">有且只能出现m次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,m}</td>\n<td style=\"text-align:left\">可以出现n到m次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{m,}</td>\n<td style=\"text-align:left\">至少m次，最大次数不限制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">()</td>\n<td style=\"text-align:left\">改变优先级或者将某个字符串视为一个整体，匹配到的数据取出来也可以使用它</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1. + 匹配最少1次前面的字符</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\d+/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"迪奥和奥迪250都是我最爱\"</span><span class=\"token punctuation\">;</span>\n\n//待会儿再试试中间没有0-9的情况\n//<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"迪奥和奥迪都是我最爱\"</span><span class=\"token punctuation\">;</span>\n\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配成功，证明了\\d+中的+。\\d是匹配数字，而+是最少匹配一次前面的字符。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>2. * 匹配0次或者任意多次前面的字符</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\w*/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"!@!@!!@#@!<span class=\"token variable\">$@#!</span>\"</span><span class=\"token punctuation\">;</span>\n\n//待会儿再试试中间没有0-9的情况\n//<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"!@#!@#!abcABC#@#!\"</span><span class=\"token punctuation\">;</span>\n\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>说明，注释掉的$string1和$string都匹配成功了。因为，\\w是匹配的0-9A-Za-z_，而*是说明前面的\\w可以不存在。如果存在可以有1个或者多个。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>3. ? 前面的字符出现0次或者1次，可有可无</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/ABC\\d?ABC/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC1ABC\"</span><span class=\"token punctuation\">;</span>\n\n//待会儿再试试中间没有0-9的情况\n//<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC888888ABC\"</span><span class=\"token punctuation\">;</span>\n//<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCABC\"</span><span class=\"token punctuation\">;</span>\n\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>4. . (点) 匹配除\\n以外的所有字符</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/gg.+gg/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC1ABC\"</span><span class=\"token punctuation\">;</span>\n\n\nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>匹配$string,$string2成功，但是匹配$string1失败。<br>因为匹配前后都是ABC，中间是一个0-9。0-9可有可无，但是不能有多个。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>5. |（竖线），或者，优先级最低</strong></font><br></font>\n\n<p>我们通过实验来看优先级和或者的匹配</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/abc|bcd/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abccd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ggggbcd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来看看：<br>    1.最开始我匹配的想法是想匹配的是abccd或者是abbcd。可是，匹配$string1和$string2，匹配出来的结果却是abc和bcd.<br>    2.实现了或者匹配，匹配出来了abc或者是bcd。它还没有字符串连续在一起的优先级高。</p>\n<p>那么问题来了，我要匹配上例中的abccd或者是abbcd怎么办？</p>\n<font color=\"red\">需要使用到<strong>()</strong>来改变优先级。</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/ab(c|b)cd/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"起来abccd阅兵\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ggggbcd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string3</span> <span class=\"token operator\">=</span> <span class=\"token string\">'中国abbcd未来'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">)</span> <span class=\"token string\">\"abccd\"</span> <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：<br>   1.确实匹配了了abccd或者abbcd（$string1 or $string3）。<br>   2.但是匹配的数组里面多了一个元素，这个元素的下标为1<br>   3.()中的内容只要匹配成功，会把匹配到的数据放到下标为1的这个数组元素中。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>6. ^ （抑扬符），必须要以^之后的字符串开始</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/^猪哥好帅\\w+/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"猪哥好帅abccdaaaasds\"</span><span class=\"token punctuation\">;</span>\n//<span class=\"token variable\">$string2</span>没有以猪哥好帅开始\n<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"帅abccdaaaasds\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>通过实验发现以下结论：<br>   1.$string1匹配成功，$string2没有匹配成功<br>   2.因为$string1是以指定的字符开始的<br>   3.而$string2并没有以^之后的字符开始<br>   4.翻译这个正则的意思就是：以要猪哥好帅开始后面接a-zA-Z0-9_最少一个字符。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>7. $ （美元符）必须要以$之前的字符结束</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\d+努力$/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"12321124333努力\"</span><span class=\"token punctuation\">;</span>\n//<span class=\"token variable\">$string2</span>\n<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"12311124112313力\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>我们运行一下看一下结果，得出来的结论：<br>   1.$string1 匹配成功，而$string2匹配不成功<br>   2.$之前的字符是\\d+，后面接着中文的努力。<br>   3.因此，匹配的是这一个整体。\\d指的是0-9的整型,+号代表最少一个0-9</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>8. \\b和\\B 词边界和非词边界</strong></font><br></font>\n\n<p>我们来讲解什么是边界：</p>\n<p>   1.正则表达示是有边界的，这个边界是定界符的开始和结尾是正则的边界。</p>\n<p>   2.this是一个英文单词，后面加上一个空格，意味着这个词结束了，到达了这个词的边界</p>\n<p>\\b词边界，就是指必须要在最前或者最后。<br>\\B非边界，就是不能在一个正则表达示的最前或者最后。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\w+\\b/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a apple\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"thisis a apple\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string3</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"thisisaapple\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：<br>   1.$string1、$string2和$string3都匹配成功。<br>   2.$string1匹配的时候this 空格是边界<br>   3.$string2匹配的时候thisis是边界<br>   4.$string3匹配的时候，thisisaapple到了整个正则表达示的最后，因此也是边界。所以匹配成功。</p>\n</blockquote>\n<p>我们来实验一下非词边界：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\Bthis/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hellothis9\"</span><span class=\"token punctuation\">;</span>\n\n//<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello this9\"</span><span class=\"token punctuation\">;</span>\n//<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this9中国万岁\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>总结：<br>   1.匹配$string1成功而$string2不成功。<br>   2.因为\\B后接的是this，所以this不能在词边界（空格和开始结尾）的位置出现。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>9. {m}有且只能出现m次</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/喝\\d{3}酒/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝988酒\"</span><span class=\"token punctuation\">;</span>\n\n//<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝98811酒\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：<br>上例中\\d{3}我规定了0-9只能出现3次，多一次少一次都不行。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>10. {n,m} 可以出现n到m次</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/喝\\d{1,3}酒/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝9酒\"</span><span class=\"token punctuation\">;</span>\n\n//<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝988酒\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：<br>上例中\\d{1,3}我规定了0-9只能出现1次，2次或者3次。其它次数都是错的</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>11. {m,} 至少m次，最大次数不限制</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$zz</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/喝\\d{2,}/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝9\"</span><span class=\"token punctuation\">;</span>\n\n//<span class=\"token variable\">$string2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝98\"</span><span class=\"token punctuation\">;</span>\n//<span class=\"token variable\">$string3</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"喝98122121\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$zz</span>, <span class=\"token variable\">$string1</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：<br>上例中\\d{2,}我规定喝后面的0-9最少出现两次，最多次数不限。因此$string1是匹配不成功的，$string2是匹配成功的。$string3是匹配成功的。</p>\n</blockquote>\n<p>&emsp;</p>\n<h4 id=\"6-模式修正符\"><font face=\"Comic sans MS\"><font color=\"#FF6347\">6. 模式修正符</font></font><a href=\"post/PHP-Regular-Expression#6-模式修正符\"></a></h4><font face=\"Comic sans MS\">我们通过元字符和原子完成了正则表达示的入门。有一些特殊情况我们依然需要来处理。<br>如果abc在第二行的开始处如何匹配？<br><font color=\"red\">我不希望正则表达示特别贪婪的匹配全部，只匹配一部份怎么办？</font><br>这个时候，我们就需要用到下面的这些模式匹配来增强正则的功能。<br><br><font color=\"#00B2EE\"><strong>常用的模式匹配符有：</strong></font><br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式匹配符</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:left\">模式中的字符将同时匹配大小写字母.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:left\">字符串视为多行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:left\">将字符串视为单行,换行符作为普通字符.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:left\">将模式中的空白忽略.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:left\">强制仅从目标字符串的开头开始匹配.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:left\">模式中的美元元字符仅匹配目标字符串的结尾.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:left\">匹配最近的字符串.</td>\n</tr>\n</tbody>\n</table></div></div>\n<font face=\"Comic sans MS\">模式匹配符的用法如下：<font color=\"red\"><strong>/ 正则表达示/模式匹配符</strong></font> &emsp;   <font color=\"#00B2EE\">模式匹配符是放在正则表达式的最后的。</font><br></font>例如： /\\w+/<font color=\"red\"><strong>s</strong></font> \n\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1. i 不区分大小写</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php //在后面加上了一个i \n    <span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/ABC/i'</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'8988abc12313'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'11111ABC2222'</span><span class=\"token punctuation\">;</span> \nif<span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span> \n    var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>else<span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论，不论是$string还是$string1全都匹配成功了。因此，在后面加上了i之后，能够不共分匹配内容的大小写。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>2. m 视为多行</strong></font><br></font><font color=\"red\">正则在匹配的时候，要匹配的目标字符串我们通常视为一行。</font><br><font color=\"#00B2EE\"><strong>“行起始”元字符（^）</strong></font>仅仅匹配字符串的起始，<font color=\"#00B2EE\"><strong>“行结束”元字符（$）</strong></font>仅仅匹配字符串的结束。<br>当设定了此修正符，“行起始”和“行结束”除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。<br><font color=\"red\"><strong>注意：</strong></font><strong>如果要匹配的字符串中没有“\\n”字符或者模式中没有 ^ 或 $，则设定此修正符没有任何效果。</strong><br><br>我们通过实验和代码来验证一下这个特点：<br>第一次匹配，你会发现匹配不成功：<font color=\"#FF6347\">(1)↓↓</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/^a\\d+/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"我的未来在自己手中我需要不断的努力\na9是一个不错的字符表示\n怎么办呢，其实需要不断奋进\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n    var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>第二次匹配，我们加上m 试试：<font color=\"#FF6347\">(2)↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/^a\\d+/m'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"我的未来在自己手中我需要不断的努力\na9是一个不错的字符表示\n怎么办呢，其实需要不断奋进\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n    var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span> <span class=\"token string\">\"a9\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>哦耶！匹配成功了。/^a\\d+/ 匹配的内容是a9，必须得在行开始处。在第二行也被匹配成功了。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>3. s 视为一行</strong></font><br>如果设定了此修正符，模式中的圆点元字符（.）匹配所有的字符，包括换行符。<br></font><br>第一次，不加模式匹配符s：<font color=\"#FF6347\">(1)↓↓</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/新的未来.+\\d+/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'新的未来\n987654321'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>第二次，在正则表达示后面加上模式匹配符s:<font color=\"#FF6347\">(2)↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/新的未来.+\\d+/s'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"新的未来\n987654321\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>22<span class=\"token punctuation\">)</span> <span class=\"token string\">\"新的未来 987654321\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结论：</p>\n<ol>\n<li>因为在新的未来，未来后面有一个换行</li>\n<li>而.(点)是匹配非空白字符以外的所有字符。因此，第一次不成功</li>\n<li>第二次，加上了s模式匹配符。因为，加上后.（点）能匹配所有字符。</li>\n</ol>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>4. x 忽略空白字符</strong></font><br> 1. 如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略。<br> 2. 未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。<br></font>\n\n<ul>\n<li><font color=\"#FF6347\">(1)↓↓</font>我们先来实验一下忽略空白行等特性：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/a b c /x'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'学英语要从abc开始'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>这样也能匹配成功。<br>在$pattern里面有空格，每个abc后面有一个空格。而$string里面没有空格。<br>所以x忽略空白字符。</p>\n</blockquote>\n<ul>\n<li><font color=\"#FF6347\">(2)↓↓</font>而第二句话从字面上比较难理解：</li>\n</ul>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//重点观察这一行\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/a b c #我来写一个注释\n/x'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'学英语要从abc开始'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$matches</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>结果也匹配成功了！<br>我们发现，<font color=\"red\">x的第二个特性是忽略：#字符和下一个换行符之间的字符也被忽略</font>。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>5. e 将匹配项找出来，进行替换</strong></font><br>e模式也叫逆向引用。主要的功能是将正则表达式括号里的内容取出来，放到替换项里面替换原字符串。<br>使用这个模式匹配符前必须要使用到<font color=\"#00B2EE\"><strong>preg_replace()</strong></font>。<br><font color=\"red\"><strong>mixed preg_replace ( mixed $正则表达式 , mixed $用于取代字符串的字串 , mixed $目标字符串)</strong></font><br><strong>preg_replace的功能：</strong>使用正则表达式 ，找到目标字符串。然后用’用于取代字符串的字串’进行替换。<br></font>\n\n<p>在正式讲解前我们回顾一下之前的知识，我们故意的把每个要匹配的原子外面都加上括号：<font color=\"#FF6347\">↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//加上了括号\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/(\\d+)([a-z]+)(\\d+)/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'987abc321'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$match</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>9<span class=\"token punctuation\">)</span> <span class=\"token string\">\"987abc321\"</span> <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token string\">\"987\"</span> <span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">[</span>3<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token string\">\"321\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>这是我们之前讲括号的时候：匹配到的内容外面有括号。会把括号里面的内容，也放到数组的元素里面。如图中的：987、abc、321。</p>\n</blockquote>\n<p>&emsp;<br>我们接下来看正则表达示中的e模式：<font color=\"#FF6347\">↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"{April 15, 2003}\"</span><span class=\"token punctuation\">;</span>\n\n//<span class=\"token string\">'w'</span>匹配字母，数字和下划线，<span class=\"token string\">'d'</span>匹配0-99数字，<span class=\"token string\">'+'</span>元字符规定其前导字符必须在目标对象中连续出现一次或多次\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/{(\\w+) (\\d+), (\\d+)}/i\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replacement</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\<span class=\"token variable\">$2</span>\"</span><span class=\"token punctuation\">;</span>\n\n//字符串被替换为与第 n 个被捕获的括号内的子模式所匹配的文本\n<span class=\"token keyword\">echo</span> preg_replace<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$replacement</span>, <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n?<span class=\"token operator\">></span>\n\n运行结果：\n15\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n</blockquote>\n<p>结论：</p>\n<ol>\n<li>上例中\\$2 指向的是正则表达示的第一个(\\d+)。相当于把15又取出来了</li>\n<li>替换的时候，我写上\\$2。将匹配项取出来，用来再次替换匹配的结果。</li>\n</ol>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>6. U 贪婪模式控制</strong></font><br>正则表达式默认是贪婪的，也就是尽可能的最大限度匹配。<br></font>\n\n<p>我们来看看正则表达示是如何贪婪的：<font color=\"#FF6347\">↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/&lt;div>.*&lt;\\/div>/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;div>你好&lt;/div>&lt;div>我是&lt;/div>\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$match</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>34<span class=\"token punctuation\">)</span> <span class=\"token string\">\"\n你好\n我是\n\"</span> <span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>我们来看看结果，得到如下结论。它从“<br>你好”直接匹配到了“我是<br>”。进行了最大范围的匹配。</p>\n</blockquote>\n<p>&emsp;<br>同样一段代码我们再加大写的U，再看看效果：<font color=\"#FF6347\">↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/&lt;div>.*&lt;\\/div>/U'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;div>你好&lt;/div>&lt;div>我是&lt;/div>\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$match</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n?<span class=\"token operator\">></span>\n\n运行结果：\n匹配到了，结果为：array<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> string<span class=\"token punctuation\">(</span>17<span class=\"token punctuation\">)</span> <span class=\"token string\">\"\n你好\n\"</span> <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>我们发现，只匹配出来了：&lt;div>你好&lt;/div><br>这样，把正则的贪婪特性取消掉。让它找到了最近的匹配，就OK了。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>7. A 从目标字符串的开头开始匹配</strong></font><br>此模式类似于元字符中的^（抑扬符）效果。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/this/A'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello this is a '</span><span class=\"token punctuation\">;</span>\n//<span class=\"token variable\">$string1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is a '</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$match</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span>\n   var_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>结论：</strong><br>   1.如果加A模式修正符的时候匹配不出来$string，不加时能匹配出来<br>   2.如果加上了A模式修正符的时候能匹配出来$string1,因为必须要从开始处开始匹配</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>8. D 结束$符后不准有回车</strong></font><br>如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php \n<span class=\"token variable\">$pattern</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\w+this$/'</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$pattern1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/\\w+this$/D'</span><span class=\"token punctuation\">;</span> \n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hellothis \"</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token variable\">$pattern1</span>, <span class=\"token variable\">$string</span>, <span class=\"token variable\">$match</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'匹配到了，结果为：'</span><span class=\"token punctuation\">;</span> \nvar_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>else <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'没有匹配到'</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>结论：</strong><br>1.如pattern 在匹配$string的时候，$string的字符串this后有一个回车。在没有加D匹配符的时候也能匹配成功<br>2.如pattern 在匹配$string的时候，加上了D。$string的字符串this后有空格，匹配不成功。</p>\n</blockquote>\n<p>&emsp;</p>\n<h4 id=\"7-写正则的诀窍和常用正则\"><font face=\"Comic sans MS\" color=\"#FF6347\">7. 写正则的诀窍和常用正则</font><a href=\"post/PHP-Regular-Expression#7-写正则的诀窍和常用正则\"></a></h4><font face=\"Comic sans MS\">写正则的诀窍</font><br>女孩和男孩恋爱时的诀窍通常是：测试你是不是对我好一点，如果是的，咱们的关系就更好一点。<br>而正则的诀窍和恋爱的诀窍基本一致：<font color=\"red\">写一点、测一点。</font><br>因为，<strong>我们需要不断的正则，用preg_match对比是不是能匹配成功。成功了，再写后面的一点。直到写完，全部匹配成功为止！</strong><br><font face=\"Comic sans MS\">例如，我要写一个邮箱的正则。我先要做的事情，将常用的邮箱格式全部列出来。例如：<br><a href=\"mailto:phpcn@php.cn\" target=\"_blank\" rel=\"noopener\">phpcn@php.cn</a> &emsp; <a href=\"mailto:phpcn@corp.baidu.cm\" target=\"_blank\" rel=\"noopener\">phpcn@corp.baidu.cm</a> &emsp; <a href=\"mailto:phpcn@126.com\" target=\"_blank\" rel=\"noopener\">phpcn@126.com</a>  &emsp;<a href=\"mailto:phpcn@xxx.com\" target=\"_blank\" rel=\"noopener\">phpcn@xxx.com</a>  &emsp;<a href=\"mailto:12345@qq.com\" target=\"_blank\" rel=\"noopener\">12345@qq.com</a><br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\">  常用的格式主要有这样一些。那我们就可以来分析：<br>    1.先匹配@之前的字符 \\w+（因为是0-9A-Za-z_）<br>    2.第二个跟一个@符<br>    3.第三个再写上[a-zA-Z0-9-]+ 因为qq和126这些主域名是不能有下划线的<br>    4.corp.baidu. 或者是126. 通常邮箱后缀都是这样的。所以我们可以写成：([a-zA-Z0-9-]+.){1,2}<br>    5.上面的是将 <strong>.</strong> 转义，让它是本身的意思。括号重复的区间最少一次，最多两次。<br>    6.后面接下com|cn|org|gov.cn|net|edu.cn等就可以了<br></font></td></tr></table></div></div>\n\n<p>因此，我们的正则表达式我使用：<br>/\\w+@([a-zA-Z0-9-]+.){1,2}(com|cn|org|gov.cn|net|edu.cn)/<br>或<br>/\\w+@([a-zA-Z0-9_]+)\\.(com|cn|org|gov.cn|net|edu.cn)/<br>邮箱的正则就被我写成功了。ฅʕ•̫͡•ʔฅ</p>\n<p>&emsp;</p>\n<h4 id=\"8-常用正则函数\"><font face=\"Comic sans MS\" color=\"#FF6347\">8. 常用正则函数</font><a href=\"post/PHP-Regular-Expression#8-常用正则函数\"></a></h4><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">preg_filter</td>\n<td style=\"text-align:left\">执行一个正则表达式搜索和替换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_grep</td>\n<td style=\"text-align:left\">返回匹配模式的数组条目</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_match</td>\n<td style=\"text-align:left\">执行一个正则表达式匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_match_all</td>\n<td style=\"text-align:left\">执行一个全局正则表达式匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_replace_callback_array</td>\n<td style=\"text-align:left\">传入数组，执行一个正则表达式搜索和替换使用回调</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_replace_callback</td>\n<td style=\"text-align:left\">执行一个正则表达式搜索并且使用一个回调进行替换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_replace</td>\n<td style=\"text-align:left\">执行一个正则表达式的搜索和替换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">preg_split</td>\n<td style=\"text-align:left\">通过一个正则表达式分隔字符串</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;<br><strong>正则关于面试常遇到的问题</strong><br>面试中经常考到的几个正则达达示是：</p>\n<ol>\n<li>匹配邮箱</li>\n<li>匹配手机号</li>\n<li>匹配一个网址</li>\n<li>用正则匹配某个格式，取出某个例</li>\n<li>写一个采集器<br>其他….</li>\n</ol>\n<p>面试的第4题和第5题我对大家不担心，因为只要大家认真学习了我给的前五节的内容。第4，5题推理就行。<br>因为，通常在技术答题面试环节，是时候准许查手机的！  ヾ(๑╹◡╹)ﾉ”</p>\n","prev":{"title":"PHP-函数","slug":"PHP-function"},"next":{"title":"PHP-命名空间","slug":"PHP-namespace"},"link":"Treecatee.gitgub.io/post/PHP-Regular-Expression/","copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/PHP-Regular-Expression/\" title=\"PHP-正则表达式\">Treecatee.gitgub.io/post/PHP-Regular-Expression/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}