{"title":"Python-基础语法","date":"2019-02-27T08:06:40.000Z","thumbnail":"https://i.loli.net/2019/02/27/5c7627f220a38.jpg","slug":"Python-Grammar","tags":["Python语言"],"categories":["Python"],"updated":"2019-03-06T10:25:51.455Z","content":"<p>请务必注意，Python程序是<font color=\"#FF7F00\"><strong>大小写敏感</strong></font>的，如果写错了大小写，程序会报错。<br><a id=\"more\"></a></p>\n<p>&ensp;<br>&ensp;</p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>Python 基础语法</strong></font> </center>\n\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"一-标识符\"><a href=\"#一-标识符\" class=\"headerlink\" title=\"一. 标识符\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一. 标识符</font></h3><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、标识符定义规则</strong></font>\n\n<ol>\n<li><p>在 Python 里，标识符由<font color=\"#FF7F00\"><strong>字母</strong></font>、<font color=\"#FF7F00\"><strong>数字</strong></font>、<font color=\"#FF7F00\"><strong>下划线</strong></font>组成。</p>\n</li>\n<li><p>在 Python 中，所有标识符<font color=\"#FF7F00\"><strong>不能以数字开头</strong></font>。</p>\n</li>\n<li><p>Python 中的标识符<font color=\"#FF7F00\"><strong>是区分大小写的</strong></font>。</p>\n</li>\n<li><p>以<font color=\"#FF7F00\"><strong>下划线开头</strong></font>的标识符是<font color=\"#FF7F00\"><strong>有特殊意义</strong></font>的。</p>\n<ol>\n<li>以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li>\n<li>以双下划线开头的 <code>__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code>__foo__</code>代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li>\n</ol>\n</li>\n</ol>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、Python 保留字符</strong></font>\n\n<p>下面的列表显示了在Python中的保留字。这些保留字<font color=\"#FF7F00\"><strong>不能用作常数或变数，或任何其他标识符名称</strong></font>。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">exec</td>\n<td style=\"text-align:center\">not</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">assert</td>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">or</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">break</td>\n<td style=\"text-align:center\">for</td>\n<td style=\"text-align:center\">pass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">print</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">raise</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">def</td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\">return</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">del</td>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">try</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elif</td>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">while</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">with</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">except</td>\n<td style=\"text-align:center\">lambda</td>\n<td style=\"text-align:center\">yield</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<h3 id=\"二-缩进-代码块\"><a href=\"#二-缩进-代码块\" class=\"headerlink\" title=\"二. 缩进(代码块)\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二. 缩进(代码块)</font></h3><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、注意事项：</strong></font>\n\n<ol>\n<li><p>学习 Python 与其他语言最大的区别就是，Python 的<font color=\"#FF7F00\"><strong>代码块不使用大括号 <code>{}</code> 来控制类，函数以及其他逻辑判断</strong></font>。python 最具特色的就是<font color=\"#FF7F00\"><strong>用缩进来写模块</strong></font>。</p>\n</li>\n<li><p>缩进的空白数量是可变的，但是<font color=\"#FF7F00\"><strong>所有代码块语句必须包含相同的缩进空白数量</strong></font>，<strong>这个必须严格执行</strong>！！！</p>\n<ol>\n<li>按照约定俗成的管理，应该始终坚持使用<font color=\"red\"><strong>4个空格</strong></font>的缩进；</li>\n<li>很多Python程序员都建议每行不超过80字符（最多79个见多）；</li>\n<li>要将程序的不同部分分开，可使用空行，但不要在程序文件中过多地使用空行</li>\n</ol>\n</li>\n</ol>\n<p><br></p>\n<p>以下代码将会执行错误：<strong>缩进空白数量不一样会报错！</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 文件名：test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Answer\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"True\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Answer\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 没有严格缩进，在执行时会报错</span></span><br><span class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">执行以上代码，会出现如下错误提醒：</span><br><span class=\"line\">$ python test.py  </span><br><span class=\"line\">  File <span class=\"string\">\"test.py\"</span>, line <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\">                ^</span><br><span class=\"line\">IndentationError: unindent does <span class=\"keyword\">not</span> match any outer indentation level</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、多个语句构成代码块</strong></font>\n\n<ol>\n<li><p>Python不像C/C++/Java一样一条语句是以<code>;</code>结束，而是<font color=\"#FF7F00\"><strong>换行即表示一个语句结束</strong></font>。</p>\n</li>\n<li><p>缩进相同的一组语句构成一个<strong>代码块</strong>，我们称之代码组。</p>\n</li>\n<li><p>像if、while、def和class这样的复合语句，<strong>首行以关键字开始</strong>，<strong>以冒号( <code>:</code> )结束</strong>，该行之后的一行或多行缩进代码构成代码组。注意这里冒号( <code>:</code> )不能省略。</p>\n</li>\n</ol>\n<p><br></p>\n<p>如下实例的冒号不能省略：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> expression : </span><br><span class=\"line\">   suite </span><br><span class=\"line\"><span class=\"keyword\">elif</span> expression :  </span><br><span class=\"line\">   suite  </span><br><span class=\"line\"><span class=\"keyword\">else</span> :  </span><br><span class=\"line\">   suite</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"三-一行和多行语句\"><a href=\"#三-一行和多行语句\" class=\"headerlink\" title=\"三. 一行和多行语句\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">三. 一行和多行语句</font></h3><blockquote>\n<p><font color=\"red\"><strong>一行</strong></font>分为：</p>\n<ol>\n<li><font color=\"#FF7F00\"><strong>同一行显示多条语句</strong></font>;</li>\n<li>将一行的语句分为多行显示(<font color=\"#FF7F00\"><strong>一条语句以多行来书写</strong></font>)也包括在多行语句里面来讲。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>1. 同一行显示多条语句</strong></font>\n\n<p>Python可以在同一行中使用多条语句，语句之间<strong>使用分号( <code>;</code> )分割</strong>，以下是一个简单的实例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys; x = <span class=\"string\">'runoob'</span>; sys.stdout.write(x + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">运行输出：</span><br><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>3. 一条语句以多行来书写</strong></font>\n\n<p>看下面的多行语句即可，是同一个意思。</p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>3. 多行语句</strong></font>\n\n<blockquote>\n<p><font color=\"red\"><strong>多行</strong></font>：</p>\n<ol>\n<li>Python语句中一般<font color=\"#FF7F00\"><strong>以新行作为语句的结束符</strong></font>，但是我们可以使用斜杠（  <code>\\</code> ）将一行的语句分为多行显示，斜杠（  <code>\\</code> ）称为<code>多行连接符</code>。</li>\n<li>语句中包含 [], {} 或 () 括号就<strong>不需要</strong>使用多行连接符。</li>\n</ol>\n</blockquote>\n<ol>\n<li><font color=\"#FF7F00\"><strong>Python语句中一般以新行作为语句的结束符</strong></font>。但是我们可以使用斜杠（  <code>\\</code> ）将一行的语句分为多行显示，如下所示：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ol start=\"2\">\n<li>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days = [<span class=\"string\">'Monday'</span>, <span class=\"string\">'Tuesday'</span>, <span class=\"string\">'Wednesday'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Thursday'</span>, <span class=\"string\">'Friday'</span>]</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"四-引号\"><a href=\"#四-引号\" class=\"headerlink\" title=\"四. 引号\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">四. 引号</font></h3><ol>\n<li><p>Python 可以使用单引号( <code>&#39;</code> )、双引号( <code>&quot;</code> )、三引号( <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> ) <strong>来表示字符串</strong>，引号的开始与结束必须的相同类型的。</p>\n</li>\n<li><p><strong>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，</strong><font color=\"#FF7F00\"><strong>被当做注释</strong></font>。</p>\n</li>\n</ol>\n<p>如下示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word = <span class=\"string\">'word'</span></span><br><span class=\"line\">sentence = <span class=\"string\">\"这是一个句子。\"</span></span><br><span class=\"line\">paragraph = <span class=\"string\">\"\"\"这是一个段落。</span></span><br><span class=\"line\"><span class=\"string\">包含了多个语句\"\"\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"五-注释\"><a href=\"#五-注释\" class=\"headerlink\" title=\"五. 注释\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">五. 注释</font></h3><ol>\n<li><font color=\"#FF7F00\"><strong>python中单行注释采用 <code>#</code> 开头。</strong></font></li>\n<li>python 中多行注释使用三个单引号( <code>&#39;&#39;&#39;</code> )或三个双引号( <code>&quot;&quot;&quot;</code> )。</li>\n</ol>\n<p>单行注释,如下示例1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 文件名：test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一个注释</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Hello, Python!\"</span>  <span class=\"comment\"># 第二个注释</span></span><br></pre></td></tr></table></figure>\n<p><br><br>多行注释,如下示例2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 文件名：test.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释，使用单引号。</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释，使用单引号。</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释，使用单引号。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释，使用双引号。</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释，使用双引号。</span></span><br><span class=\"line\"><span class=\"string\">这是多行注释，使用双引号。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"六-空行\"><a href=\"#六-空行\" class=\"headerlink\" title=\"六. 空行\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">六. 空行</font></h3><blockquote>\n<ol>\n<li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</li>\n<li>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于<font color=\"#FF7F00\"><strong>分隔两段不同功能或含义的代码，便于日后代码的维护或重构</strong></font>。</li>\n<li>记住：<font color=\"#FF7F00\"><strong>空行也是程序代码的一部分</strong></font>。</li>\n</ol>\n</blockquote>\n<p>什么是空行？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">2</span>+<span class=\"number\">3</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">           <span class=\"comment\">#这里就是空行</span></span><br><span class=\"line\">b=a+<span class=\"number\">3</span></span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"七-输出-print\"><a href=\"#七-输出-print\" class=\"headerlink\" title=\"七. 输出(print)\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">七. 输出(print)</font></h3><p>Python3.0以后的输出使用<code>print()</code>函数。分为<strong>换行输出</strong>和<strong>不换行输出</strong>。<br>在print()括号中加上字符串，就可以向屏幕上输出指定的文字。括号里还可以放表达式等……</p>\n<blockquote>\n<ol>\n<li><strong>换行输出：</strong><font color=\"#FF7F00\"><strong>print 默认输出是换行的</strong></font></li>\n<li><strong>不换行输出：</strong>将括号里的所有参数输出在一行，只需要<font color=\"#FF7F00\"><strong>在每一个参数后面加一个<code>,</code></strong></font>即可。<strong>注意：</strong><ol>\n<li>最后一个参数后面没有<code>,</code>，也就是和普通函数使用一样；</li>\n<li>参数中间的<code>,</code>输出来是一个空格。如下：</li>\n</ol>\n</li>\n<li>循环输出变量b的时候如果不换行，可在后面加个<code>end=&#39; &#39;</code>，即<code>print(b, end=&#39; &#39;)</code></li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Thequickbrownfox'</span>, <span class=\"string\">'jumpsover'</span>, <span class=\"string\">'thelazydog'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">Thequickbrownfox jumpsover thelazydog</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h4 id=\"7-1-输出的补充\"><a href=\"#7-1-输出的补充\" class=\"headerlink\" title=\"7.1 输出的补充\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">7.1 输出的补充</font></h4><blockquote>\n<p><font face=\"Microsoft YaHei\" color=\"#FF7F00\">Python的三种输出：</font></p>\n<ol>\n<li><font face=\"Microsoft YaHei\">Python两种输出值的方式: 表达式语句和<code>print()</code>函数；</font><ol>\n<li><font face=\"Microsoft YaHei\">如果你希望输出的形式更加多样，可以使用 <code>str.format()</code> 函数来格式化输出值。</font></li>\n<li><font face=\"Microsoft YaHei\">如果你希望将输出的值转成字符串，可以使用 <code>repr()</code> 或 <code>str()</code> 函数来实现</font>.</li>\n</ol>\n</li>\n<li><font face=\"Microsoft YaHei\">第三种方式是使用文件对象的<code>write()</code> 方法，标准输出文件可以用<code>sys.stdout</code>引用</font>！</li>\n</ol>\n</blockquote>\n<p><br></p>\n<h4 id=\"7-2-输出时常用的函数\"><a href=\"#7-2-输出时常用的函数\" class=\"headerlink\" title=\"7.2 输出时常用的函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">7.2 输出时常用的函数</font></h4><ul>\n<li><font color=\"#FF7F00\"><strong>str()：</strong></font> 将对象转化为适于人阅读的形式，函数返回一个对象的string格式。</li>\n<li><font color=\"#FF7F00\"><strong>repr()：</strong></font> 将对象转化为供解释器读取的形式，返回一个对象的 string 格式。可以输出包括转义字符在内的所有字符！</li>\n<li><font color=\"#FF7F00\"><strong><code>end=&#39; &#39;</code>：</strong></font> 循坏输出时常用于不换行输出。</li>\n<li><font color=\"#FF7F00\"><strong>str.format() ：</strong></font>格式化输出。</li>\n</ul>\n<p><br></p>\n<p>举例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">\"'abcd\\ne\\nfg'\"</span></span><br><span class=\"line\">print(str(x))</span><br><span class=\"line\">print(repr(x))</span><br><span class=\"line\"></span><br><span class=\"line\">output：</span><br><span class=\"line\"><span class=\"string\">'abcd</span></span><br><span class=\"line\"><span class=\"string\">e</span></span><br><span class=\"line\"><span class=\"string\">fg'</span></span><br><span class=\"line\"><span class=\"string\">\"'abcd\\ne\\nfg'\"</span></span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"string\">'''repr() 的参数可以是 Python 的任何对象'''</span></span><br><span class=\"line\">x = <span class=\"number\">10</span> * <span class=\"number\">3.25</span></span><br><span class=\"line\">y = <span class=\"number\">200</span> * <span class=\"number\">200</span></span><br><span class=\"line\">print(repr((x, y, (<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\">output： (<span class=\"number\">32.5</span>, <span class=\"number\">40000</span>, (<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>))</span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"string\">'''  我们都知道正常情况下将多个字符串输出在一行直接使用半角逗号,分隔即可。但是循坏输出要想不换行就得</span></span><br><span class=\"line\"><span class=\"string\">使用 end=' '了  '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">print(<span class=\"string\">'\\n----------分隔符-----------'</span>) </span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> a: </span><br><span class=\"line\">  print(y,end=<span class=\"string\">''</span>)</span><br><span class=\"line\">print(<span class=\"string\">'\\n----------分隔符-----------'</span>) </span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> a: </span><br><span class=\"line\">  print(y,end=<span class=\"string\">'w'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'\\n----------分隔符-----------'</span>) </span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> a: </span><br><span class=\"line\">  print(y,end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">OUTPUT：</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">----------分隔符-----------</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br><span class=\"line\">----------分隔符-----------</span><br><span class=\"line\"><span class=\"number\">1</span>w2w3w4w5w6w</span><br><span class=\"line\">----------分隔符-----------</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"7-3-str-format-格式化字符串\"><a href=\"#7-3-str-format-格式化字符串\" class=\"headerlink\" title=\"7.3 str.format()格式化字符串\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">7.3 str.format()格式化字符串</font></h4><p>旧式的格式化输出在<font color=\"#00B2EE\">[<a href=\"https://directoree.top/post/Python-Grammar\" target=\"_blank\" rel=\"noopener\">Python-基础语法</a>]</font>里面讲过，这里的<code>str.format()</code>就是新版的格式化的一种形式。</p>\n<p><strong>语法：</strong>字符串类型格式化采用format()方法，基本使用格式是：</p>\n<font color=\"#FF7F00\"><strong>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</strong></font>\n\n<p>所谓的<strong>str.format()</strong>：即<code>.format()</code>前是一个字符串，字符串里面有<code>{}</code>相当于旧书式的<code>%</code>。<code>{}</code>及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。分为以下几种使用方法：</p>\n<p><br></p>\n<ol>\n<li>在括号中的<font color=\"#FF7F00\"><strong>数字</strong></font>用于指向传入对象在 format() 中的<font color=\"#FF7F00\"><strong>索引位置</strong></font>，如下所示：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'&#123;0&#125; 和 &#123;1&#125;'</span>.format(<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;1&#125; 和 &#123;0&#125;'</span>.format(<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT：</span><br><span class=\"line\">Google 和 Runoob</span><br><span class=\"line\">Runoob 和 Google</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ol start=\"2\">\n<li>在 format() 中使用了<font color=\"#FF7F00\"><strong>关键字参数, 那么它们的值会指向使用该名字的参数</strong></font>。也可以位置及关键字参数可以任意的结合:</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'&#123;0&#125; 和 &#123;1&#125;'</span>.format(<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;1&#125; 和 &#123;0&#125;'</span>.format(<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'站点列表 &#123;0&#125;, &#123;1&#125;, 和 &#123;other&#125;。'</span>.format(<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>,</span><br><span class=\"line\">                                                       other=<span class=\"string\">'Taobao'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT：</span><br><span class=\"line\">Google 和 Runoob</span><br><span class=\"line\">Runoob 和 Google</span><br><span class=\"line\">站点列表 Google, Runoob, 和 Taobao。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ol start=\"3\">\n<li>在 <code>{}</code> 里使用 <code>!a</code> (使用 ascii()), <code>!s</code>(使用 str()) 和 <code>!r</code> (使用 repr()) 可以用于<font color=\"#FF7F00\"><strong>在格式化某个值之前对其进行转化</strong></font>:</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\">print(<span class=\"string\">'常量 PI 的值近似为： &#123;&#125;。'</span>.format(math.pi))</span><br><span class=\"line\">print(<span class=\"string\">'常量 PI 的值近似为： &#123;!s&#125;。'</span>.format(math.pi))</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT:</span><br><span class=\"line\">常量 PI 的值近似为： <span class=\"number\">3.141592653589793</span>。</span><br><span class=\"line\">常量 PI 的值近似为： <span class=\"number\">3.141592653589793</span>。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ol start=\"4\">\n<li>可选项 <code>:</code> 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。</li>\n</ol>\n<p>format()方法中&lt;模板字符串&gt;的<code>{}</code>除了包括参数序号，还可以包括格式控制信息。此时，<code>{}</code>的内部样式如下：</p>\n<font color=\"#FF7F00\">     <strong>{&lt;参数序号&gt;: &lt;格式控制标记&gt;}</strong>  </font>\n\n<p>其中，&lt;格式控制标记&gt;用来控制参数显示时的格式，包括：<strong>&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;,&lt;.精度&gt;&lt;类型&gt;</strong> 6 个字段，这些字段都是可选的，可以组合使用，逐一介绍如下。参考：<font color=\"#00B2EE\">[<a href=\"https://blog.csdn.net/i_chaoren/article/details/77922939\" target=\"_blank\" rel=\"noopener\">Python字符串格式化–format()方法</a>]</font></p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/06/5c7f917b8902b.jpg\" alt=\"1.jpg\"></p></div>\n<p><br></p>\n<p><strong>&lt;宽度&gt;</strong><br>指当前槽的设定输出字符宽度，如果该槽对应的format()参数长度比&lt;宽度&gt;设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则位数将被默认以空格字符补充。</p>\n<p><strong>&lt;对齐&gt;</strong><br>指参数在&lt;宽度&gt;内输出时的对齐方式，分别使用&lt;、&gt;和^三个符号表示左对齐、右对齐和居中对齐。</p>\n<p><strong>&lt;填充&gt;</strong><br>指&lt;宽度&gt;内除了参数外的字符采用什么方式表示，默认采用空格，可以通过&lt;填充&gt;更换。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">\"PYTHON\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:30&#125;\"</span>.format(s)</span><br><span class=\"line\">Out[<span class=\"number\">17</span>]: <span class=\"string\">'PYTHON                        '</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:&gt;30&#125;\"</span>.format(s)</span><br><span class=\"line\">Out[<span class=\"number\">18</span>]: <span class=\"string\">'                        PYTHON'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:*^30&#125;\"</span>.format(s)</span><br><span class=\"line\">Out[<span class=\"number\">19</span>]: <span class=\"string\">'************PYTHON************'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:-^30&#125;\"</span>.format(s)</span><br><span class=\"line\">Out[<span class=\"number\">20</span>]: <span class=\"string\">'------------PYTHON------------'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:3&#125;\"</span>.format(s)</span><br><span class=\"line\"></span><br><span class=\"line\">Out[<span class=\"number\">21</span>]: <span class=\"string\">'PYTHON'</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>逗号（，）</strong><br>&lt;格式控制标记&gt;中逗号（，）用于显示数字的千位分隔符，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"&#123;0:-^20,&#125;\"</span>.format(<span class=\"number\">1234567890</span>)</span><br><span class=\"line\">Out[<span class=\"number\">24</span>]: <span class=\"string\">'---1,234,567,890----'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:-^20&#125;\"</span>.format(<span class=\"number\">1234567890</span>) <span class=\"comment\">#对比输出</span></span><br><span class=\"line\">Out[<span class=\"number\">25</span>]: <span class=\"string\">'-----1234567890-----'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">\"&#123;0:-^20,&#125;\"</span>.format(<span class=\"number\">12345.67890</span>)</span><br><span class=\"line\">Out[<span class=\"number\">26</span>]: <span class=\"string\">'----12,345.6789-----'</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>&lt;.精度&gt;</strong><br>表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。</p>\n<p><strong>&lt;类型&gt;</strong><br>表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6 种：</p>\n<ul>\n<li>b: 输出整数的二进制方式；</li>\n<li>c: 输出整数对应的 Unicode 字符；</li>\n<li>d: 输出整数的十进制方式；</li>\n<li>o: 输出整数的八进制方式；</li>\n<li>x: 输出整数的小写十六进制方式；</li>\n<li>X: 输出整数的大写十六进制方式；</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = &#123;<span class=\"string\">'Google'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Runoob'</span>: <span class=\"number\">2</span>, <span class=\"string\">'Taobao'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> name, number <span class=\"keyword\">in</span> table.items():</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">'&#123;0:10&#125; ==&gt; &#123;1:10d&#125;'</span>.format(name, number))</span><br><span class=\"line\">...</span><br><span class=\"line\">Runoob     ==&gt;          2</span><br><span class=\"line\">Taobao     ==&gt;          3</span><br><span class=\"line\">Google     ==&gt;          1</span><br></pre></td></tr></table></figure>\n<p>对于<strong>浮点数类型</strong>，输出格式包括4 种：</p>\n<ul>\n<li>e: 输出浮点数对应的小写字母 e 的指数形式；</li>\n<li>E: 输出浮点数对应的大写字母 E 的指数形式；</li>\n<li>f: 输出浮点数的标准浮点形式；</li>\n<li>%: 输出浮点数的百分形式。</li>\n</ul>\n<p><br></p>\n<ol start=\"5\">\n<li>如果你有一个很长的格式化字符串, 而你不想将它们分开, 那么在格式化时通过变量名而非位置会是很好的事情。</li>\n</ol>\n<p>最简单的就是传入一个字典, 然后使用方括号 <code>[]</code> 来访问键值 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = &#123;<span class=\"string\">'Google'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Runoob'</span>: <span class=\"number\">2</span>, <span class=\"string\">'Taobao'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'Runoob: &#123;0[Runoob]:d&#125;; Google: &#123;0[Google]:d&#125;; Taobao: &#123;0[Taobao]:d&#125;'</span>.format(table))</span><br><span class=\"line\">Runoob: <span class=\"number\">2</span>; Google: <span class=\"number\">1</span>; Taobao: <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">也可以通过在 table 变量前使用 <span class=\"string\">'**'</span> 来实现相同的功能：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = &#123;<span class=\"string\">'Google'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Runoob'</span>: <span class=\"number\">2</span>, <span class=\"string\">'Taobao'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'Runoob: &#123;Runoob:d&#125;; Google: &#123;Google:d&#125;; Taobao: &#123;Taobao:d&#125;'</span>.format(**table))</span><br><span class=\"line\">Runoob: <span class=\"number\">2</span>; Google: <span class=\"number\">1</span>; Taobao: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"八-输入-input\"><a href=\"#八-输入-input\" class=\"headerlink\" title=\"八. 输入(input)\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">八. 输入(input)</font></h3><blockquote>\n<ol>\n<li>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量（指针）中，以方便你使用。</li>\n<li>input()函数有个返回值，<font color=\"#FF7F00\"><strong>返回类型为String</strong></font>。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<font color=\"red\"><strong>一、参数</strong></font>\n\n<p>输入分为两种：<strong>空参数</strong>、<strong>带有参数</strong>。</p>\n<font color=\"#00B2EE\"><strong>空参数：</strong></font><code>input()</code>；效果是屏幕上没有任何提示，等待用户输入。<br><font color=\"#00B2EE\"><strong>带有参数：</strong></font><code>input(&#39;请输入一个字符串：&#39;)</code>；效果是屏幕上显示“请输入一个字符串：”，然后等待用户输入。<br><br><br><br><font color=\"red\"><strong>二、返回值</strong></font>\n\n<p>关于input()的返回值，是<font color=\"#FF7F00\"><strong>字符串String类型</strong></font><br>如下会报错，假如输入1998，返回给s的值是字符串”1998”，如果直接和数字型进行比较会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = input(<span class=\"string\">'birth: '</span>)</span><br><span class=\"line\">birth = s</span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00前'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00后'</span>)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>解决方法是使用函数<code>int(str)</code>，功能是<font color=\"#FF7F00\"><strong>将字符串类型转换成数字型</strong></font>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = input(<span class=\"string\">'birth: '</span>)</span><br><span class=\"line\">birth = int(s)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00前'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'00后'</span>)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Python-变量和数据类型","slug":"Python-Variables-DataTypes"},"next":{"title":"Python-基础","slug":"Python-Basics"},"link":"Treecatee.gitgub.io/post/Python-Grammar/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 标识符</font>","id":"一-标识符","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 缩进(代码块)</font>","id":"二-缩进-代码块","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三. 一行和多行语句</font>","id":"三-一行和多行语句","index":"3"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">四. 引号</font>","id":"四-引号","index":"4"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">五. 注释</font>","id":"五-注释","index":"5"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">六. 空行</font>","id":"六-空行","index":"6"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">七. 输出(print)</font>","id":"七-输出-print","index":"7","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">7.1 输出的补充</font>","id":"7-1-输出的补充","index":"7.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">7.2 输出时常用的函数</font>","id":"7-2-输出时常用的函数","index":"7.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">7.3 str.format()格式化字符串</font>","id":"7-3-str-format-格式化字符串","index":"7.3"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">八. 输入(input)</font>","id":"八-输入-input","index":"8"}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Python-Grammar/\" title=\"Python-基础语法\">Treecatee.gitgub.io/post/Python-Grammar/</a>","published":"February 27, 2019"}}