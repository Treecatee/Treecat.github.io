{"title":"Python-列表、元组、字典、集合","date":"2019-02-28T12:28:00.000Z","thumbnail":"https://i.loli.net/2019/02/28/5c775a3eba5a9.jpg","slug":"Python-list-tuple-dict-set","tags":["Python语言"],"categories":["Python"],"updated":"2019-03-02T09:10:23.177Z","content":"<p>Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>Python 列表、元组、字典、集合</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-认识列表\"><a href=\"#一-认识列表\" class=\"headerlink\" title=\"一. 认识列表\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一. 认识列表</font></h3><p><br></p>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>列表（list）是什么：</strong></font></p>\n<ol>\n<li>序列是Python中最基本的数据结构。</li>\n<li>在Python中，用方括号 [ ] 来表示列表，并用逗号来分隔其中的元素。并且<font color=\"#FF7F00\"><strong>列表的数据项（各个元素）不需要具有相同的类型</strong></font>。</li>\n<li>序列中的每个元素都分配一个数字 - 它的位置，即索引，<font color=\"#FF7F00\"><strong>第一个索引是0，第二个索引是1，依此类推</strong></font>。<ol>\n<li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li>\n<li>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</li>\n</ol>\n</li>\n<li>把列表当作堆栈使用。涉及的方法有：append()、pop()</li>\n<li>访问和使用列表可以使用切片。[a:b]</li>\n<li>把列表当作队列使用（不过使用起来较麻烦，可自行百度）。</li>\n<li>列表可以<font color=\"#FF7F00\"><strong>嵌套使用</strong></font>。</li>\n<li>列表复制是这样的：<code>list2 = list1[:]</code></li>\n<li>获取列表的索引值：<code>a = list.index(&quot;String&quot;)</code></li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>定义列表的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>]</span><br><span class=\"line\">list2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</span><br><span class=\"line\">list3 = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>]</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\">print(list3)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">[<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>] </span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>] </span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-切片\"><a href=\"#二-切片\" class=\"headerlink\" title=\"二. 切片\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二. 切片</font></h3><blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>切片和索引：</strong></font></p>\n<ol>\n<li>与字符串的索引一样，列表索引从0开始。(在字符串那个章节总结过)列表可以进行截取、组合等；</li>\n<li>你还可以处理列表的部分元素——Python称之为切片。使用下标索引来访问列表中的值，同样你也可以使用方括号[ ]的形式截取字符； [x:y]</li>\n<li>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在<font color=\"#FF7F00\"><strong>到达你指定的第二个索引前面的元素后停止</strong></font>。要输出列表中的前三个元素，需要指定索引<code>0~3</code>，这将输出分别为0 、1 和2 的元素； [1:5]表示索引为1,2,3,4的四个元素</li>\n<li>如果你没有指定第一个索引，Python将自动从列表开头开始； [ :6]</li>\n<li>要让切片终止于列表末尾，也可使用类似的语法，即不指定第二个索引； [2: ]<br>无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。</li>\n<li>如果要遍历列表的部分元素，可在for 循环中使用切片。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>]</span><br><span class=\"line\">list2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"> </span><br><span class=\"line\">print(list1[<span class=\"number\">1</span>],list1[<span class=\"number\">-2</span>])           //类似字符串一样使用索引</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"list1[0]: \"</span>, list1[<span class=\"number\">0</span>])      //输出第一个元素</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"list2[1:5]: \"</span>, list2[<span class=\"number\">1</span>:<span class=\"number\">5</span>])  //输出索引为<span class=\"number\">1</span>到（<span class=\"number\">5</span><span class=\"number\">-1</span>）的元素</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"list2[:4]: \"</span>, list2[<span class=\"number\">1</span>:])    //前者输出从第<span class=\"number\">1</span>个元素到索引为（<span class=\"number\">4</span><span class=\"number\">-1</span>）的元素</span><br><span class=\"line\">                                    //后者输出索引为<span class=\"number\">1</span>到最后一个元素</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">chemistry <span class=\"number\">1997</span> </span><br><span class=\"line\">list1[<span class=\"number\">0</span>]:  physics </span><br><span class=\"line\">list2[<span class=\"number\">1</span>:<span class=\"number\">5</span>]:  [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>] </span><br><span class=\"line\">list2[:<span class=\"number\">4</span>]:  [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h3 id=\"三-更新列表\"><a href=\"#三-更新列表\" class=\"headerlink\" title=\"三. 更新列表\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">三. 更新列表</font></h3><h4 id=\"3-1-处理元素\"><a href=\"#3-1-处理元素\" class=\"headerlink\" title=\"3.1 处理元素\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.1 处理元素</font></h4><p>附加参考：<font color=\"#00B2EE\">[<a href=\"https://www.cnblogs.com/wl404/p/7884665.html\" target=\"_blank\" rel=\"noopener\">列表使用大全</a>]</font> <font color=\"#00B2EE\">[<a href=\"https://blog.csdn.net/viviliao_/article/details/79518219\" target=\"_blank\" rel=\"noopener\">Python3列表元素的修改</a>]</font> </p>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>1. 按索引来使用的方法</strong></font></p>\n<ol>\n<li><font color=\"#FF7F00\">append(‘String’)：</font> 将元素string追加到列表末尾，即把一个元素添加到堆栈顶；</li>\n<li><font color=\"#FF7F00\">pop(X)：</font> 删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。若果不指定则默认删除末尾的元素；</li>\n<li><font color=\"#FF7F00\">insert(X, “String”)：</font> 将元素String插入到索引为X的位置，原来元素从索引为X往后移；</li>\n<li><font color=\"#FF7F00\">del list[X]：</font> 删除列表list索引为X的元素；</li>\n<li><font color=\"#FF7F00\">len(list)：</font> 是个函数，统计列表list元素的个数，和在字符串中使用一样；</li>\n<li>del和pop()的区别在于：del删除的元素不可以再继续使用了，但是pop()有个返回值，因为当作栈使用，它删除的元素还可以在其他地方继续使用；</li>\n<li><font color=\"#FF7F00\">reverse() ：</font> 按元素顺序倒转；</li>\n<li><font color=\"#FF7F00\">sort() ：</font> 是方法，对列表进行永久性排序，前提是列表中所有元素数据类型一样；</li>\n<li><font color=\"#FF7F00\">sorted() ：</font> 注意这是个函数，对列表进行临时排序，若列表中所有元素数据类型不一样会报错；</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>2. 按值来使用的方法</strong></font></p>\n<ol>\n<li><font color=\"#FF7F00\"><strong>remove(“String”)</strong>：</font> 删除列表中值为String的元素。注意：方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>]</span><br><span class=\"line\">list2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\">list1.append(<span class=\"string\">'Adam'</span>)      //append()</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">a = list2.pop(<span class=\"number\">3</span>)          //pop()</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> list2[<span class=\"number\">4</span>]              //<span class=\"keyword\">del</span></span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">list2.insert(<span class=\"number\">3</span>,<span class=\"number\">9</span>)         //insert()</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(len(list2))         //len()</span><br><span class=\"line\"></span><br><span class=\"line\">list1.remove(<span class=\"number\">1997</span>)        //remove</span><br><span class=\"line\">list1.remove(<span class=\"string\">\"Adam\"</span>)</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">[<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>, <span class=\"string\">'Adam'</span>] </span><br><span class=\"line\"><span class=\"number\">4</span> </span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>] </span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>] </span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\">[<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">2000</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>]</span><br><span class=\"line\">s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>,<span class=\"string\">'scheme'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">print(s)                        //临时排序</span><br><span class=\"line\">print(sorted(s))</span><br><span class=\"line\">print(s);print(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s.sort();print(s);print(<span class=\"string\">'\\n'</span>)   //永久排序 </span><br><span class=\"line\"></span><br><span class=\"line\">s.reverse();print(s)            //倒序</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">[<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, <span class=\"string\">'scheme'</span>] </span><br><span class=\"line\">[<span class=\"string\">'java'</span>, <span class=\"string\">'python'</span>, <span class=\"string\">'scheme'</span>] </span><br><span class=\"line\">[<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, <span class=\"string\">'scheme'</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'java'</span>, <span class=\"string\">'python'</span>, <span class=\"string\">'scheme'</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'scheme'</span>, <span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>]</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h4 id=\"3-2-嵌套使用列表\"><a href=\"#3-2-嵌套使用列表\" class=\"headerlink\" title=\"3.2 嵌套使用列表\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.2 嵌套使用列表</font></h4><p><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>], <span class=\"string\">'scheme'</span>]</span><br><span class=\"line\">print(len(s))</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了。<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>]</span><br><span class=\"line\">s = [<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, p, <span class=\"string\">'scheme'</span>]</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(p[<span class=\"number\">1</span>])</span><br><span class=\"line\">print(s[<span class=\"number\">2</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">[<span class=\"string\">'python'</span>, <span class=\"string\">'java'</span>, [<span class=\"string\">'asp'</span>, <span class=\"string\">'php'</span>], <span class=\"string\">'scheme'</span>] </span><br><span class=\"line\">php </span><br><span class=\"line\">php</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h3 id=\"四-列表常用的方法和函数\"><a href=\"#四-列表常用的方法和函数\" class=\"headerlink\" title=\"四. 列表常用的方法和函数\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">四. 列表常用的方法和函数</font></h3><h4 id=\"4-1-列表操作符\"><a href=\"#4-1-列表操作符\" class=\"headerlink\" title=\"4.1 列表操作符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">4.1 列表操作符</font></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。<br>如下所示：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Python表达式</th>\n<th style=\"text-align:left\">结果</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">len([1, 2, 3])</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[1, 2, 3] + [4, 5, 6]</td>\n<td style=\"text-align:left\">[1, 2, 3, 4, 5, 6]</td>\n<td style=\"text-align:left\">组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[‘Hi!’] * 4</td>\n<td style=\"text-align:left\">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td style=\"text-align:left\">重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3 in [1, 2, 3]</td>\n<td style=\"text-align:left\">True</td>\n<td style=\"text-align:left\">元素是否存在于列表中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">for x in [1, 2, 3]: print x,</td>\n<td style=\"text-align:left\">1 2 3</td>\n<td style=\"text-align:left\">迭代</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h4 id=\"4-2-列表函数-amp-方法\"><a href=\"#4-2-列表函数-amp-方法\" class=\"headerlink\" title=\"4.2 列表函数&amp;方法\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">4.2 列表函数&amp;方法</font></h4><p>可查阅：<font color=\"#00B2EE\">[<a href=\"http://www.runoob.com/python/python-lists.html\" target=\"_blank\" rel=\"noopener\">Python列表函数&amp;方法</a>]</font></p>\n<p>列表中Python包含以下函数:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">cmp(list1, list2)<br>比较两个列表的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">len(list)<br>列表元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">max(list)<br>返回列表元素最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">min(list)<br>返回列表元素最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">list(seq)<br>将元组转换为列表</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p>Python包含以下方法:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">list.append(obj)<br>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">list.count(obj)<br>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">list.extend(seq)<br>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">list.index(obj)<br>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">list.insert(index, obj)<br>将对象插入列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">list.pop([index=-1])<br>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">list.remove(obj)<br>移除列表中某个值的第一个匹配项</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">list.reverse()<br>反向列表中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">list.sort(cmp=None, key=None, reverse=False)<br>对原列表进行排序</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h3 id=\"五-元组\"><a href=\"#五-元组\" class=\"headerlink\" title=\"五. 元组\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">五. 元组</font></h3><blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>什么是元组tuple：</strong></font></p>\n<ol>\n<li>Python的元组与列表类似，不同之处在于元组的元素不能修改。</li>\n<li>元组使用小括号<code>()</code>，列表使用方括号<code>[]</code>。</li>\n<li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</li>\n<li>当括号中只有一个数字没有逗号时，既表示一个数字也可以便是一个元组，又可以表示数学公式中的小括号，这就产生了歧义。这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时<font color=\"#FF7F00\"><strong>必须加一个逗号</strong></font>。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、定义元组</strong></font>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = (<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">tup2 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> )</span><br><span class=\"line\">tup3 = <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>创建空元组：<code>tup1 = ()</code></p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号。<code>tup1 = (50,)</code></p>\n<p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、使用元组</strong></font>\n\n<ol>\n<li>元组可以使用下标索引来访问元组中的值，如下：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"> </span><br><span class=\"line\">tup1 = (<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">tup2 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> )</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"tup1[0]: \"</span>, tup1[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"tup2[1:5]: \"</span>, tup2[<span class=\"number\">1</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">以上实例输出结果：</span><br><span class=\"line\"></span><br><span class=\"line\">tup1[<span class=\"number\">0</span>]:  physics</span><br><span class=\"line\">tup2[<span class=\"number\">1</span>:<span class=\"number\">5</span>]:  (<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>元组的值不允许修改，但是可以进行运算，比如连接用加号（+），重复用星号（*）。</p>\n</li>\n<li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"> </span><br><span class=\"line\">tup = (<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">print</span> tup</span><br><span class=\"line\"><span class=\"keyword\">del</span> tup</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"After deleting tup : \"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> tup</span><br></pre></td></tr></table></figure>\n<p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'physics'</span>, <span class=\"string\">'chemistry'</span>, <span class=\"number\">1997</span>, <span class=\"number\">2000</span>)</span><br><span class=\"line\">After deleting tup :</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"test.py\"</span>, line <span class=\"number\">9</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> tup</span><br><span class=\"line\">NameError: name <span class=\"string\">'tup'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ol start=\"4\">\n<li><font color=\"#FF7F00\"><strong>最后来看一个“可变的”tuple：</strong></font>\n\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>])</span><br><span class=\"line\">t[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">'X'</span></span><br><span class=\"line\">t[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">'Y'</span></span><br><span class=\"line\">print(t)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, [<span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>]) </span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">这个tuple定义的时候有<span class=\"number\">3</span>个元素，分别是<span class=\"string\">'a'</span>，<span class=\"string\">'b'</span>和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？</span><br><span class=\"line\">别急，我们先看看定义的时候tuple包含的<span class=\"number\">3</span>个元素：</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">0.</span>png](https://i.loli.net/<span class=\"number\">2019</span>/<span class=\"number\">02</span>/<span class=\"number\">28</span>/<span class=\"number\">5</span>c77b1cc56635.png)</span><br><span class=\"line\"></span><br><span class=\"line\">当我们把list的元素<span class=\"string\">'A'</span>和<span class=\"string\">'B'</span>修改为<span class=\"string\">'X'</span>和<span class=\"string\">'Y'</span>后，tuple变为：</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"number\">0</span> (<span class=\"number\">1</span>).png](https://i.loli.net/<span class=\"number\">2019</span>/<span class=\"number\">02</span>/<span class=\"number\">28</span>/<span class=\"number\">5</span>c77b1f4c3628.png)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<span class=\"string\">'a'</span>，就不能改成指向<span class=\"string\">'b'</span>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</span><br><span class=\"line\"></span><br><span class=\"line\">理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=\"#00B2EE\" face=\"Comic sans MS\"&gt;**三、元组运算符**&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</span><br><span class=\"line\"></span><br><span class=\"line\">Python表达式|结果|描述|</span><br><span class=\"line\">:-|:-|:-|\t</span><br><span class=\"line\">len((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))\t         |<span class=\"number\">3</span>\t                            |计算元素个数</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) + (<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)\t |(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)\t        |连接</span><br><span class=\"line\">(<span class=\"string\">'Hi!'</span>,) * <span class=\"number\">4</span>\t         |(<span class=\"string\">'Hi!'</span>, <span class=\"string\">'Hi!'</span>, <span class=\"string\">'Hi!'</span>, <span class=\"string\">'Hi!'</span>)\t|复制</span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)\t         |<span class=\"literal\">True</span>\t                        |元素是否存在</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>): <span class=\"keyword\">print</span> x,\t  |<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>\t            |迭代</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=\"#00B2EE\" face=\"Comic sans MS\"&gt;**四、元组内置函数**&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Python元组包含了以下内置函数</span><br><span class=\"line\"></span><br><span class=\"line\">序号|函数|</span><br><span class=\"line\">:-:|:-|</span><br><span class=\"line\"><span class=\"number\">1</span>\t|cmp(tuple1, tuple2)&lt;br&gt;比较两个元组元素。</span><br><span class=\"line\"><span class=\"number\">2</span>\t|len(tuple)&lt;br&gt;计算元组元素个数。</span><br><span class=\"line\"><span class=\"number\">3</span>\t|max(tuple)&lt;br&gt;返回元组中元素最大值。</span><br><span class=\"line\"><span class=\"number\">4</span>\t|min(tuple)&lt;br&gt;返回元组中元素最小值。</span><br><span class=\"line\"><span class=\"number\">5</span>\t|tuple(seq)&lt;br&gt;将列表转换为元组。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### &lt;font color=\"#FF6347\" face=\"Comic sans MS\"&gt;六. 字典&lt;/font&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### &lt;font color=\"#3CB371\" face=\"Comic sans MS\"&gt;6.1 字典的定义&lt;/font&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&lt;font color=\"#00B2EE\" face=\"Comic sans MS\"&gt;**关于字典dict：**&lt;/font&gt;</span><br><span class=\"line\"><span class=\"number\">1.</span> 字典是另一种可变容器模型，且可存储任意类型对象；</span><br><span class=\"line\">2. 字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 &#123;&#125; 中；`d = &#123;key1 : value1, key2 : value2 &#125;`</span><br><span class=\"line\"><span class=\"number\">3.</span> 键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一；</span><br><span class=\"line\"><span class=\"number\">4.</span> 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组；</span><br><span class=\"line\"><span class=\"number\">5.</span> 第一个键定义为什么数据类型，后面所有的键必须定义为相同的数据类型；</span><br><span class=\"line\"><span class=\"number\">6.</span> 访问字典里的值，把相应的键放入熟悉的方括弧即可，`dict[key]`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### &lt;font color=\"#3CB371\" face=\"Comic sans MS\"&gt;6.2 字典的修改&lt;/font&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=\"#00B2EE\" face=\"Comic sans MS\"&gt;**一、添加键—值对、修改字典**&lt;/font&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=\"#FF7F00\"&gt;**字典是一种动态结构，可随时在其中添加键—值对**&lt;/font&gt;。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">如下示例，我们先建立一个空字典，然后向里面添加元素（键值对）并修改：</span><br><span class=\"line\">&lt;font color=\"#FF7F00\"&gt;&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">a=&#123;&#125;</span><br><span class=\"line\">a[<span class=\"string\">'color'</span>]=<span class=\"string\">'green'</span></span><br><span class=\"line\">a[<span class=\"string\">'points'</span>]=<span class=\"number\">5</span></span><br><span class=\"line\">print(a[<span class=\"string\">'color'</span>],a[<span class=\"string\">'points'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"string\">'color'</span>]=<span class=\"number\">666</span></span><br><span class=\"line\">print(a[<span class=\"string\">'color'</span>],a[<span class=\"string\">'points'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">green <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">666</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、删除键—值对</strong></font>\n\n<p>能删单一的元素也能清空字典，清空只需一项操作。</p>\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>删除字典可以使用del或者pop()。</strong></font></p>\n<ol>\n<li><font color=\"#FF7F00\"><strong>要删除一个key:</strong></font><ol>\n<li>用pop(key)方法，对应的value也会从dict中删除</li>\n<li>可使用del 语句将相应的键—值对彻底删除。使用del 语句时，必须指定字典名和要删除的键。<code>del dict[&#39;key&#39;]</code></li>\n</ol>\n</li>\n<li><font color=\"#FF7F00\"><strong>删除整个字典：</strong></font>del dict 则dict这个字典被删除了</li>\n</ol>\n</blockquote>\n<p><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;<span class=\"string\">'Name'</span>: <span class=\"string\">'Zara'</span>, <span class=\"string\">'Age'</span>: <span class=\"number\">7</span>, <span class=\"string\">'Class'</span>: <span class=\"string\">'First'</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">del</span> dict[<span class=\"string\">'Name'</span>]  <span class=\"comment\"># 删除键是'Name'的条目</span></span><br><span class=\"line\">dict.pop(<span class=\"string\">'Class'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(dict[<span class=\"string\">'Age'</span>])</span><br><span class=\"line\">dict.clear()      <span class=\"comment\"># 清空词典所有条目</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> dict          <span class=\"comment\"># 删除词典</span></span><br><span class=\"line\">print(dict[<span class=\"string\">'Age'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"1.py\"</span>, line <span class=\"number\">11</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    print(dict[<span class=\"string\">'Age'</span>])</span><br><span class=\"line\">TypeError: <span class=\"string\">'type'</span> object <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> subscriptable</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"6-3-字典的遍历\"><a href=\"#6-3-字典的遍历\" class=\"headerlink\" title=\"6.3 字典的遍历\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">6.3 字典的遍历</font></h4><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、判断字典中</strong><font color=\"red\"><strong>某个键</strong></font><strong>是否存在</strong></font>\n\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>方法：</strong></font></p>\n<ol>\n<li>通过in判断key是否存在；</li>\n<li>通过dict提供的get()方法，如果key不存在，可以返回None，或者返回自己指定的value。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;<span class=\"string\">'Name'</span>: <span class=\"string\">'Zara'</span>, <span class=\"string\">'Age'</span>: <span class=\"number\">7</span>, <span class=\"string\">'Class'</span>: <span class=\"string\">'First'</span>&#125;</span><br><span class=\"line\">a = <span class=\"string\">'Name'</span> <span class=\"keyword\">in</span> dict</span><br><span class=\"line\">b = <span class=\"string\">'Year'</span> <span class=\"keyword\">in</span> dict</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\">c = dict.get(<span class=\"string\">'Name'</span>,<span class=\"string\">'如果不存在，这里是返回信息'</span>)</span><br><span class=\"line\">d = dict.get(<span class=\"string\">'Year'</span>,<span class=\"string\">'如果不存在，这里是返回信息'</span>)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">Zara</span><br><span class=\"line\">如果不存在，这里是返回信息</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、遍历字典中的所有键</strong></font>\n\n<p>在不需要使用字典中的值时，方法keys() 很有用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = &#123;</span><br><span class=\"line\">      <span class=\"string\">'jen'</span>: <span class=\"string\">'python'</span>,</span><br><span class=\"line\">      <span class=\"string\">'sarah'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">      <span class=\"string\">'edward'</span>: <span class=\"string\">'ruby'</span>,</span><br><span class=\"line\">      <span class=\"string\">'phil'</span>: <span class=\"string\">'python'</span>,</span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> f.keys():</span><br><span class=\"line\">      print(name.title())</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">Jen</span><br><span class=\"line\">Sarah</span><br><span class=\"line\">Edward</span><br><span class=\"line\">Phil</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>三、遍历字典中的所有值</strong></font>\n\n<p>如果你感兴趣的主要是字典包含的值，可使用方法values() ，它返回一个值列表，而不包含任何键。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = &#123;</span><br><span class=\"line\">    <span class=\"string\">'jen'</span>: <span class=\"string\">'python'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sarah'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    <span class=\"string\">'edward'</span>: <span class=\"string\">'ruby'</span>,</span><br><span class=\"line\">    <span class=\"string\">'phil'</span>: <span class=\"string\">'python'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> f.values():</span><br><span class=\"line\">    print(g.title())</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">Python</span><br><span class=\"line\">C</span><br><span class=\"line\">Ruby</span><br><span class=\"line\">Python</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"6-4-字典的各种嵌套\"><a href=\"#6-4-字典的各种嵌套\" class=\"headerlink\" title=\"6.4 字典的各种嵌套\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">6.4 字典的各种嵌套</font></h4><p>请自行查阅Python编程：从入门到实践 6.4</p>\n<p><br></p>\n<h4 id=\"6-5-字典内置函数-amp-方法\"><a href=\"#6-5-字典内置函数-amp-方法\" class=\"headerlink\" title=\"6.5 字典内置函数&amp;方法\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">6.5 字典内置函数&amp;方法</font></h4><p>可查阅：<font color=\"#00B2EE\">[<a href=\"http://www.runoob.com/python/python-dictionary.html\" target=\"_blank\" rel=\"noopener\">Python字典函数&amp;方法</a>]</font></p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、Python字典包含了以下内置函数：</strong></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">cmp(dict1, dict2)<br>比较两个字典元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">len(dict)<br>计算字典元素个数，即键的总数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">str(dict)<br>输出字典可打印的字符串表示。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">type(variable)<br>返回输入的变量类型，如果变量是字典就返回字典类型。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、Python字典包含了以下内置方法：</strong></font>\n\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">dict.clear()<br>删除字典内所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">dict.copy()<br>返回一个字典的浅复制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">dict.fromkeys(seq[, val])<br>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">dict.has_key(key)<br>如果键在字典dict里返回true，否则返回false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">dict.keys()<br>以列表返回一个字典所有的键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">dict.update(dict2)<br>把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">dict.values()<br>以列表返回字典中的所有值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">pop(key[,default])<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">popitem()<br>随机返回并删除字典中的一对键和值。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h3 id=\"七-集合\"><a href=\"#七-集合\" class=\"headerlink\" title=\"七. 集合\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">七. 集合</font></h3><blockquote>\n<p><font color=\"#FF7F00\"><strong>集合是什么：</strong></font></p>\n<ol>\n<li>集合和字典类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在集合中，没有重复的key；</li>\n<li>集合可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集，差等操作；</li>\n<li>基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算；</li>\n<li>大括号或 set() <strong>函数</strong>可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典。</li>\n<li>注意：<font color=\"#FF7F00\"><strong>set()只能放一个参数，它会将里面的字符串拆成字符，并且每个字符都是无序的（集合的属性）</strong></font>；</li>\n<li>如果集合中包含多喝不可拆的元素，则必须用{}来定义集合。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>仔细分析如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basket = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'apple'</span>, </span><br><span class=\"line\">\t<span class=\"string\">'orange'</span>, </span><br><span class=\"line\">\t<span class=\"string\">'apple'</span>, </span><br><span class=\"line\">\t<span class=\"string\">'pear'</span>, </span><br><span class=\"line\">\t<span class=\"string\">'orange'</span>, </span><br><span class=\"line\">\t<span class=\"string\">'banana'</span>&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">print(basket)</span><br><span class=\"line\">print(<span class=\"string\">'\\n'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">a = set(<span class=\"string\">'abracadabra'</span>)</span><br><span class=\"line\">b = set(<span class=\"string\">'alacazam'</span>)</span><br><span class=\"line\">c =set(<span class=\"string\">'我们'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(a) </span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\"> </span><br><span class=\"line\">print(<span class=\"string\">'\\n'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">print(a - b) </span><br><span class=\"line\">print(a | b) </span><br><span class=\"line\">print(a &amp; b) </span><br><span class=\"line\">print(a ^ b ) </span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">&#123;<span class=\"string\">'pear'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'l'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'们'</span>, <span class=\"string\">'我'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">'r'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'c'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'l'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'m'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'r'</span>&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"Python-条件语句与循环","slug":"Python-ConditionalStatements-loops"},"next":{"title":"Python-字符编码&字符串&格式化","slug":"Python-Coding"},"link":"Treecatee.gitgub.io/post/Python-list-tuple-dict-set/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 认识列表</font>","id":"一-认识列表","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 切片</font>","id":"二-切片","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三. 更新列表</font>","id":"三-更新列表","index":"3","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.1 处理元素</font>","id":"3-1-处理元素","index":"3.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.2 嵌套使用列表</font>","id":"3-2-嵌套使用列表","index":"3.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">四. 列表常用的方法和函数</font>","id":"四-列表常用的方法和函数","index":"4","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">4.1 列表操作符</font>","id":"4-1-列表操作符","index":"4.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">4.2 列表函数&amp;方法</font>","id":"4-2-列表函数-amp-方法","index":"4.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">五. 元组</font>","id":"五-元组","index":"5","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.3 字典的遍历</font>","id":"6-3-字典的遍历","index":"5.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.4 字典的各种嵌套</font>","id":"6-4-字典的各种嵌套","index":"5.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.5 字典内置函数&amp;方法</font>","id":"6-5-字典内置函数-amp-方法","index":"5.3"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">七. 集合</font>","id":"七-集合","index":"6"}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Python-list-tuple-dict-set/\" title=\"Python-列表、元组、字典、集合\">Treecatee.gitgub.io/post/Python-list-tuple-dict-set/</a>","published":"February 28, 2019"}}