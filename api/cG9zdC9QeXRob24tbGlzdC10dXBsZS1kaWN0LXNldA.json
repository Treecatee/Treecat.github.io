{"title":"Python-列表、元组、字典、集合","date":"2019-02-28T12:28:00.000Z","thumbnail":"https://i.loli.net/2019/02/28/5c775a3eba5a9.jpg","slug":"Python-list-tuple-dict-set","comments":true,"tags":["Python语言"],"categories":["Python"],"updated":"2019-03-02T09:10:23.177Z","content":"<p>Python的列表相当于数组 ( ⸝⸝•ᴗ•⸝⸝ )੭⁾⁾<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>Python 列表、元组、字典、集合</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-认识列表\"><font color=\"#FF6347\" face=\"Comic sans MS\">一. 认识列表</font><a href=\"post/Python-list-tuple-dict-set#一-认识列表\"></a></h3><p><br></p>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>列表（list）是什么：</strong></font></p>\n<ol>\n<li>序列是Python中最基本的数据结构。</li>\n<li>在Python中，用方括号 [ ] 来表示列表，并用逗号来分隔其中的元素。并且<font color=\"#FF7F00\"><strong>列表的数据项（各个元素）不需要具有相同的类型</strong></font>。</li>\n<li>序列中的每个元素都分配一个数字 - 它的位置，即索引，<font color=\"#FF7F00\"><strong>第一个索引是0，第二个索引是1，依此类推</strong></font>。<ol>\n<li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li>\n<li>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</li>\n</ol>\n</li>\n<li>把列表当作堆栈使用。涉及的方法有：append()、pop()</li>\n<li>访问和使用列表可以使用切片。[a:b]</li>\n<li>把列表当作队列使用（不过使用起来较麻烦，可自行百度）。</li>\n<li>列表可以<font color=\"#FF7F00\"><strong>嵌套使用</strong></font>。</li>\n<li>列表复制是这样的：<code>list2 = list1[:]</code></li>\n<li>获取列表的索引值：<code>a = list.index(&quot;String&quot;)</code></li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>定义列表的示例：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span>\nlist3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token punctuation\">[</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-切片\"><font color=\"#FF6347\" face=\"Comic sans MS\">二. 切片</font><a href=\"post/Python-list-tuple-dict-set#二-切片\"></a></h3><blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>切片和索引：</strong></font></p>\n<ol>\n<li>与字符串的索引一样，列表索引从0开始。(在字符串那个章节总结过)列表可以进行截取、组合等；</li>\n<li>你还可以处理列表的部分元素——Python称之为切片。使用下标索引来访问列表中的值，同样你也可以使用方括号[ ]的形式截取字符； [x:y]</li>\n<li>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在<font color=\"#FF7F00\"><strong>到达你指定的第二个索引前面的元素后停止</strong></font>。要输出列表中的前三个元素，需要指定索引<code>0~3</code>，这将输出分别为0 、1 和2 的元素； [1:5]表示索引为1,2,3,4的四个元素</li>\n<li>如果你没有指定第一个索引，Python将自动从列表开头开始； [ :6]</li>\n<li>要让切片终止于列表末尾，也可使用类似的语法，即不指定第二个索引； [2: ]<br>无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。</li>\n<li>如果要遍历列表的部分元素，可在for 循环中使用切片。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>list1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>           <span class=\"token operator\">//</span>类似字符串一样使用索引\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"list1[0]: \"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>      <span class=\"token operator\">//</span>输出第一个元素\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"list2[1:5]: \"</span><span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>输出索引为<span class=\"token number\">1</span>到（<span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>）的元素\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"list2[:4]: \"</span><span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">//</span>前者输出从第<span class=\"token number\">1</span>个元素到索引为（<span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>）的元素\n                                    <span class=\"token operator\">//</span>后者输出索引为<span class=\"token number\">1</span>到最后一个元素\n\n运行结果：\nchemistry <span class=\"token number\">1997</span> \nlist1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  physics \nlist2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> \nlist2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"三-更新列表\"><font color=\"#FF6347\" face=\"Comic sans MS\">三. 更新列表</font><a href=\"post/Python-list-tuple-dict-set#三-更新列表\"></a></h3><h4 id=\"3-1-处理元素\"><font color=\"#3CB371\" face=\"Comic sans MS\">3.1 处理元素</font><a href=\"post/Python-list-tuple-dict-set#3-1-处理元素\"></a></h4><p>附加参考：<font color=\"#00B2EE\">[<a href=\"https://www.cnblogs.com/wl404/p/7884665.html\" target=\"_blank\" rel=\"noopener\">列表使用大全</a>]</font> <font color=\"#00B2EE\">[<a href=\"https://blog.csdn.net/viviliao_/article/details/79518219\" target=\"_blank\" rel=\"noopener\">Python3列表元素的修改</a>]</font> </p>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>1. 按索引来使用的方法</strong></font></p>\n<ol>\n<li><font color=\"#FF7F00\">append(‘String’)：</font> 将元素string追加到列表末尾，即把一个元素添加到堆栈顶；</li>\n<li><font color=\"#FF7F00\">pop(X)：</font> 删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。若果不指定则默认删除末尾的元素；</li>\n<li><font color=\"#FF7F00\">insert(X, “String”)：</font> 将元素String插入到索引为X的位置，原来元素从索引为X往后移；</li>\n<li><font color=\"#FF7F00\">del list[X]：</font> 删除列表list索引为X的元素；</li>\n<li><font color=\"#FF7F00\">len(list)：</font> 是个函数，统计列表list元素的个数，和在字符串中使用一样；</li>\n<li>del和pop()的区别在于：del删除的元素不可以再继续使用了，但是pop()有个返回值，因为当作栈使用，它删除的元素还可以在其他地方继续使用；</li>\n<li><font color=\"#FF7F00\">reverse() ：</font> 按元素顺序倒转；</li>\n<li><font color=\"#FF7F00\">sort() ：</font> 是方法，对列表进行永久性排序，前提是列表中所有元素数据类型一样；</li>\n<li><font color=\"#FF7F00\">sorted() ：</font> 注意这是个函数，对列表进行临时排序，若列表中所有元素数据类型不一样会报错；</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>2. 按值来使用的方法</strong></font></p>\n<ol>\n<li><font color=\"#FF7F00\"><strong>remove(“String”)</strong>：</font> 删除列表中值为String的元素。注意：方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>下面示例代码（注意“//”不代表注释，仅仅为了展示）：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">]</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">]</span>\n\nlist1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">)</span>      <span class=\"token operator\">//</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>          <span class=\"token operator\">//</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">del</span> list2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>              <span class=\"token operator\">//</span><span class=\"token keyword\">del</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n\nlist2<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>         <span class=\"token operator\">//</span>insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token operator\">//</span>len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nlist1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">1997</span><span class=\"token punctuation\">)</span>        <span class=\"token operator\">//</span>remove\nlist1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token punctuation\">[</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Adam'</span><span class=\"token punctuation\">]</span> \n<span class=\"token number\">4</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> \n<span class=\"token number\">6</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">]</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'php'</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>                        <span class=\"token operator\">//</span>临时排序\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\ns<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>永久排序 \n\ns<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>            <span class=\"token operator\">//</span>倒序\n\n\n运行结果：\n<span class=\"token punctuation\">[</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span> \n\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span> \n\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">'scheme'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">]</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h4 id=\"3-2-嵌套使用列表\"><font color=\"#3CB371\" face=\"Comic sans MS\">3.2 嵌套使用列表</font><a href=\"post/Python-list-tuple-dict-set#3-2-嵌套使用列表\"></a></h4><p><br></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'php'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token number\">4</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p>要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了。<br>要拿到’php’可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'php'</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token punctuation\">[</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'asp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'php'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scheme'</span><span class=\"token punctuation\">]</span> \nphp \nphp \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"四-列表常用的方法和函数\"><font color=\"#FF6347\" face=\"Comic sans MS\">四. 列表常用的方法和函数</font><a href=\"post/Python-list-tuple-dict-set#四-列表常用的方法和函数\"></a></h3><h4 id=\"4-1-列表操作符\"><font color=\"#3CB371\" face=\"Comic sans MS\">4.1 列表操作符</font><a href=\"post/Python-list-tuple-dict-set#4-1-列表操作符\"></a></h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。<br>如下所示：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Python表达式</th>\n<th style=\"text-align:left\">结果</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">len([1, 2, 3])</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[1, 2, 3] + [4, 5, 6]</td>\n<td style=\"text-align:left\">[1, 2, 3, 4, 5, 6]</td>\n<td style=\"text-align:left\">组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[‘Hi!’] * 4</td>\n<td style=\"text-align:left\">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td style=\"text-align:left\">重复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3 in [1, 2, 3]</td>\n<td style=\"text-align:left\">True</td>\n<td style=\"text-align:left\">元素是否存在于列表中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">for x in [1, 2, 3]: print x,</td>\n<td style=\"text-align:left\">1 2 3</td>\n<td style=\"text-align:left\">迭代</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h4 id=\"4-2-列表函数-amp-方法\"><font color=\"#3CB371\" face=\"Comic sans MS\">4.2 列表函数&amp;方法</font><a href=\"post/Python-list-tuple-dict-set#4-2-列表函数-amp-方法\"></a></h4><p>可查阅：<font color=\"#00B2EE\">[<a href=\"http://www.runoob.com/python/python-lists.html\" target=\"_blank\" rel=\"noopener\">Python列表函数&amp;方法</a>]</font></p>\n<p>列表中Python包含以下函数:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">cmp(list1, list2)<br>比较两个列表的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">len(list)<br>列表元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">max(list)<br>返回列表元素最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">min(list)<br>返回列表元素最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">list(seq)<br>将元组转换为列表</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p>Python包含以下方法:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">list.append(obj)<br>在列表末尾添加新的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">list.count(obj)<br>统计某个元素在列表中出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">list.extend(seq)<br>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">list.index(obj)<br>从列表中找出某个值第一个匹配项的索引位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">list.insert(index, obj)<br>将对象插入列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">list.pop([index=-1])<br>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">list.remove(obj)<br>移除列表中某个值的第一个匹配项</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">list.reverse()<br>反向列表中元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">list.sort(cmp=None, key=None, reverse=False)<br>对原列表进行排序</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h3 id=\"五-元组\"><font color=\"#FF6347\" face=\"Comic sans MS\">五. 元组</font><a href=\"post/Python-list-tuple-dict-set#五-元组\"></a></h3><blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>什么是元组tuple：</strong></font></p>\n<ol>\n<li>Python的元组与列表类似，不同之处在于元组的元素不能修改。</li>\n<li>元组使用小括号<code>()</code>，列表使用方括号<code>[]</code>。</li>\n<li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</li>\n<li>当括号中只有一个数字没有逗号时，既表示一个数字也可以便是一个元组，又可以表示数学公式中的小括号，这就产生了歧义。这种情况下，按小括号进行计算，计算结果自然是1。所以，只有1个元素的tuple定义时<font color=\"#FF7F00\"><strong>必须加一个逗号</strong></font>。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、定义元组</strong></font>\n\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">tup1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\ntup2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span>\ntup3 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p>创建空元组：<code>tup1 = ()</code></p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号。<code>tup1 = (50,)</code></p>\n<p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、使用元组</strong></font>\n\n<ol>\n<li>元组可以使用下标索引来访问元组中的值，如下：</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/python</span>\n\ntup1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\ntup2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"tup1[0]: \"</span><span class=\"token punctuation\">,</span> tup1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"tup2[1:5]: \"</span><span class=\"token punctuation\">,</span> tup2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n以上实例输出结果：\n\ntup1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  physics\ntup2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><p>元组的值不允许修改，但是可以进行运算，比如连接用加号（+），重复用星号（*）。</p>\n</li>\n<li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/python</span>\n\ntup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> tup\n<span class=\"token keyword\">del</span> tup\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"After deleting tup : \"</span>\n<span class=\"token keyword\">print</span> tup\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chemistry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\nAfter deleting tup <span class=\"token punctuation\">:</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"test.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    <span class=\"token keyword\">print</span> tup\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'tup'</span> <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> defined\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<ol start=\"4\">\n<li><font color=\"#FF7F00\"><strong>最后来看一个“可变的”tuple：</strong></font>\n\n</li>\n</ol>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span>\nt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Y'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个tuple定义的时候有3个元素，分别是’a’，’b’和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？<br>别急，我们先看看定义的时候tuple包含的3个元素：</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/02/28/5c77b1cc56635.png\" alt=\"0.png\" data-zoomable></p></div>\n<p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/02/28/5c77b1f4c3628.png\" alt=\"0 (1).png\" data-zoomable></p></div>\n<p><br></p>\n<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p>\n<p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>三、元组运算符</strong></font>\n\n<p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Python表达式</th>\n<th style=\"text-align:left\">结果</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">len((1, 2, 3))</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">计算元素个数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(1, 2, 3) + (4, 5, 6)</td>\n<td style=\"text-align:left\">(1, 2, 3, 4, 5, 6)</td>\n<td style=\"text-align:left\">连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(‘Hi!’,) * 4</td>\n<td style=\"text-align:left\">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td>\n<td style=\"text-align:left\">复制</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3 in (1, 2, 3)</td>\n<td style=\"text-align:left\">True</td>\n<td style=\"text-align:left\">元素是否存在</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">for x in (1, 2, 3): print x,</td>\n<td style=\"text-align:left\">1 2 3</td>\n<td style=\"text-align:left\">迭代</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>四、元组内置函数</strong></font>\n\n<p>Python元组包含了以下内置函数</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">cmp(tuple1, tuple2)<br>比较两个元组元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">len(tuple)<br>计算元组元素个数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">max(tuple)<br>返回元组中元素最大值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">min(tuple)<br>返回元组中元素最小值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">tuple(seq)<br>将列表转换为元组。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h3 id=\"六-字典\"><font color=\"#FF6347\" face=\"Comic sans MS\">六. 字典</font><a href=\"post/Python-list-tuple-dict-set#六-字典\"></a></h3><h4 id=\"6-1-字典的定义\"><font color=\"#3CB371\" face=\"Comic sans MS\">6.1 字典的定义</font><a href=\"post/Python-list-tuple-dict-set#6-1-字典的定义\"></a></h4><blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>关于字典dict：</strong></font></p>\n<ol>\n<li>字典是另一种可变容器模型，且可存储任意类型对象；</li>\n<li>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中；<code>d = {key1 : value1, key2 : value2 }</code></li>\n<li>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一；</li>\n<li>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组；</li>\n<li>第一个键定义为什么数据类型，后面所有的键必须定义为相同的数据类型；</li>\n<li>访问字典里的值，把相应的键放入熟悉的方括弧即可，<code>dict[key]</code></li>\n</ol>\n</blockquote>\n<p><br></p>\n<h4 id=\"6-2-字典的修改\"><font color=\"#3CB371\" face=\"Comic sans MS\">6.2 字典的修改</font><a href=\"post/Python-list-tuple-dict-set#6-2-字典的修改\"></a></h4><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、添加键—值对、修改字典</strong></font><br><br><br><br><font color=\"#FF7F00\"><strong>字典是一种动态结构，可随时在其中添加键—值对</strong></font>。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。<br><br><br>如下示例，我们先建立一个空字典，然后向里面添加元素（键值对）并修改：<br><font color=\"#FF7F00\"></font>\n\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">a<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'green'</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\na<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">666</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n运行结果：\ngreen <span class=\"token number\">5</span>\n<span class=\"token number\">666</span> <span class=\"token number\">5</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、删除键—值对</strong></font>\n\n<p>能删单一的元素也能清空字典，清空只需一项操作。</p>\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>删除字典可以使用del或者pop()。</strong></font></p>\n<ol>\n<li><font color=\"#FF7F00\"><strong>要删除一个key:</strong></font><ol>\n<li>用pop(key)方法，对应的value也会从dict中删除</li>\n<li>可使用del 语句将相应的键—值对彻底删除。使用del 语句时，必须指定字典名和要删除的键。<code>del dict[&#39;key&#39;]</code></li>\n</ol>\n</li>\n<li><font color=\"#FF7F00\"><strong>删除整个字典：</strong></font>del dict 则dict这个字典被删除了</li>\n</ol>\n</blockquote>\n<p><br></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># -*- coding: UTF-8 -*-</span>\n\ndict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Zara'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'First'</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">del</span> dict<span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># 删除键是'Name'的条目</span>\ndict<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'Class'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">[</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndict<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\"># 清空词典所有条目</span>\n<span class=\"token keyword\">del</span> dict          <span class=\"token comment\" spellcheck=\"true\"># 删除词典</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">[</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token number\">7</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"1.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">[</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'type'</span> object <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> subscriptable\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<h4 id=\"6-3-字典的遍历\"><font color=\"#3CB371\" face=\"Comic sans MS\">6.3 字典的遍历</font><a href=\"post/Python-list-tuple-dict-set#6-3-字典的遍历\"></a></h4><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、判断字典中</strong><font color=\"red\"><strong>某个键</strong></font><strong>是否存在</strong></font>\n\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>方法：</strong></font></p>\n<ol>\n<li>通过in判断key是否存在；</li>\n<li>通过dict提供的get()方法，如果key不存在，可以返回None，或者返回自己指定的value。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># -*- coding: UTF-8 -*-</span>\n\ndict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Zara'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'First'</span><span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">'Name'</span> <span class=\"token keyword\">in</span> dict\nb <span class=\"token operator\">=</span> <span class=\"token string\">'Year'</span> <span class=\"token keyword\">in</span> dict\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\nc <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'如果不存在，这里是返回信息'</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Year'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'如果不存在，这里是返回信息'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\n运行结果：\n<span class=\"token boolean\">True</span>\n<span class=\"token boolean\">False</span>\nZara\n如果不存在，这里是返回信息\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、遍历字典中的所有键</strong></font>\n\n<p>在不需要使用字典中的值时，方法keys() 很有用。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'jen'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'sarah'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'edward'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ruby'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'phil'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>  \n\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n运行结果：\nJen\nSarah\nEdward\nPhil\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>三、遍历字典中的所有值</strong></font>\n\n<p>如果你感兴趣的主要是字典包含的值，可使用方法values() ，它返回一个值列表，而不包含任何键。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'jen'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sarah'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'edward'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ruby'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'phil'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> g <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n运行结果：\nPython\nC\nRuby\nPython\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<h4 id=\"6-4-字典的各种嵌套\"><font color=\"#3CB371\" face=\"Comic sans MS\">6.4 字典的各种嵌套</font><a href=\"post/Python-list-tuple-dict-set#6-4-字典的各种嵌套\"></a></h4><p>请自行查阅Python编程：从入门到实践 6.4</p>\n<p><br></p>\n<h4 id=\"6-5-字典内置函数-amp-方法\"><font color=\"#3CB371\" face=\"Comic sans MS\">6.5 字典内置函数&amp;方法</font><a href=\"post/Python-list-tuple-dict-set#6-5-字典内置函数-amp-方法\"></a></h4><p>可查阅：<font color=\"#00B2EE\">[<a href=\"http://www.runoob.com/python/python-dictionary.html\" target=\"_blank\" rel=\"noopener\">Python字典函数&amp;方法</a>]</font></p>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、Python字典包含了以下内置函数：</strong></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">cmp(dict1, dict2)<br>比较两个字典元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">len(dict)<br>计算字典元素个数，即键的总数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">str(dict)<br>输出字典可打印的字符串表示。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">type(variable)<br>返回输入的变量类型，如果变量是字典就返回字典类型。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、Python字典包含了以下内置方法：</strong></font>\n\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:left\">方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">dict.clear()<br>删除字典内所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">dict.copy()<br>返回一个字典的浅复制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">dict.fromkeys(seq[, val])<br>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">dict.has_key(key)<br>如果键在字典dict里返回true，否则返回false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">dict.items()<br>以列表返回可遍历的(键, 值) 元组数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">dict.keys()<br>以列表返回一个字典所有的键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">dict.update(dict2)<br>把字典dict2的键/值对更新到dict里</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">dict.values()<br>以列表返回字典中的所有值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">pop(key[,default])<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">popitem()<br>随机返回并删除字典中的一对键和值。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><br></p>\n<h3 id=\"七-集合\"><font color=\"#FF6347\" face=\"Comic sans MS\">七. 集合</font><a href=\"post/Python-list-tuple-dict-set#七-集合\"></a></h3><blockquote>\n<p><font color=\"#FF7F00\"><strong>集合是什么：</strong></font></p>\n<ol>\n<li>集合和字典类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在集合中，没有重复的key；</li>\n<li>集合可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集，差等操作；</li>\n<li>基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算；</li>\n<li>大括号或 set() <strong>函数</strong>可以用来创建集合。注意：想要创建空集合，你必须使用 set() 而不是 {}。后者用于创建空字典。</li>\n<li>注意：<font color=\"#FF7F00\"><strong>set()只能放一个参数，它会将里面的字符串拆成字符，并且每个字符都是无序的（集合的属性）</strong></font>；</li>\n<li>如果集合中包含多喝不可拆的元素，则必须用{}来定义集合。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>仔细分析如下代码：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">basket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'banana'</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>basket<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> \n\na <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token string\">'alacazam'</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">'我们'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b <span class=\"token punctuation\">)</span> \n\n运行结果：\n<span class=\"token punctuation\">{</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'们'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'我'</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","prev":{"title":"Python-条件语句与循环","slug":"Python-ConditionalStatements-loops"},"next":{"title":"Python-字符编码&字符串&格式化","slug":"Python-Coding"},"link":"Treecatee.gitgub.io/post/Python-list-tuple-dict-set/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 认识列表</font>","id":"一-认识列表","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 切片</font>","id":"二-切片","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三. 更新列表</font>","id":"三-更新列表","index":"3","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.1 处理元素</font>","id":"3-1-处理元素","index":"3.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.2 嵌套使用列表</font>","id":"3-2-嵌套使用列表","index":"3.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">四. 列表常用的方法和函数</font>","id":"四-列表常用的方法和函数","index":"4","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">4.1 列表操作符</font>","id":"4-1-列表操作符","index":"4.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">4.2 列表函数&amp;方法</font>","id":"4-2-列表函数-amp-方法","index":"4.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">五. 元组</font>","id":"五-元组","index":"5"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">六. 字典</font>","id":"六-字典","index":"6","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.1 字典的定义</font>","id":"6-1-字典的定义","index":"6.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.2 字典的修改</font>","id":"6-2-字典的修改","index":"6.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.3 字典的遍历</font>","id":"6-3-字典的遍历","index":"6.3"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.4 字典的各种嵌套</font>","id":"6-4-字典的各种嵌套","index":"6.4"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">6.5 字典内置函数&amp;方法</font>","id":"6-5-字典内置函数-amp-方法","index":"6.5"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">七. 集合</font>","id":"七-集合","index":"7"}],"copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/Python-list-tuple-dict-set/\" title=\"Python-列表、元组、字典、集合\">Treecatee.gitgub.io/post/Python-list-tuple-dict-set/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}