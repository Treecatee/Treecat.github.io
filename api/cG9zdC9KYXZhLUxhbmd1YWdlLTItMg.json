{"title":"Java运算符和数据类型转换(3.4-3.6)","date":"2019-01-11T09:48:59.000Z","thumbnail":"https://i.loli.net/2019/01/11/5c388e8172b3b.jpg","slug":"Java-Language-2-2","tags":["Java学习","Java语言"],"categories":["Java"],"updated":"2019-01-19T08:37:24.101Z","content":"<p>&ensp;<br>&ensp;</p>\n<center><font color=\"#3CB371\" face=\"Comic sans MS\" size=\"5\"><strong>运算符及表达式、运算符的优先级、数据类型转换</strong></font></center>\n\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <strong>3.4-3.6学习知识点</strong><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 运算符及表达式<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 算术运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 关系运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 逻辑运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 位运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 赋值运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 逻辑运算符</li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 运算符的优先级</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 数据类型转换<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 自动类型转换</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 手动强制类型转换</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 隐含强制类型转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&ensp;<br>&ensp;</p>\n<h3 id=\"一、-运算符及表达式\"><a href=\"#一、-运算符及表达式\" class=\"headerlink\" title=\"一、 运算符及表达式 \"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一、 运算符及表达式 </font></h3><font face=\"Comic sans MS\">&emsp;Java可以对各种类型的数据进行加工，这种加工过程称为<font color=\"#00B2EE\"><strong>运算</strong></font> 。其中表示各种不同运算的符号称为<font color=\"#00B2EE\"><strong>运算符</strong></font> ，参与运算的数据称为<font color=\"#00B2EE\"><strong>操作数</strong></font> 。操作数和运算符按一定语法形式组成的符号序列称为表达式。每个表达式经过运算后都会产生一个确定的值。<br></font> \n\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>📒运算符按其功能分为七类：</strong></font><br>1. 算术运算符  + 、-、 *、 /、%、 ++、 –<br>2. 关系运算符  &gt; 、&lt;、 &gt;=、 &lt;=、 ==、 !=<br>3. 逻辑运算符  ！、&amp;&amp;、||、&amp;、|<br>4. 位运算符     &gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、&amp;、|、^、~<br>5. 条件运算符  ？：<br>6. 赋值运算符  =、+=、-= 、*= 、/=<br>7. 其他：下标运算符[]<br><br><font color=\"red\"><strong>📒运算符按其要求的操作数个数分为三种：</strong></font><br>1. 一元运算符  如  ++、–<br>2. 二元运算符  如  +、-、*、/、%(求模)<br>3. 三元运算符  如  ？：<br></font></td></tr></table></div></div>\n\n<hr>\n<hr>\n<p>&emsp;</p>\n<h4 id=\"1-1-算术运算符\"><a href=\"#1-1-算术运算符\" class=\"headerlink\" title=\"1.1  算术运算符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.1  算术运算符</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>📒算术运算符中的单目运算符</strong></font><br>          如   +（一元加，取正值）、<br>               -（一元减，取负值）、<br>               ++ （增1运算符）、-- （减1运算符）<br><br><strong>增1运算符(++)和减1运算符(--)：</strong><br>   只能用于变量，而不能用于常量或表达式。增量运算符和减量运算符的功能是将操作数的值加1或减1.<br><br>(1)<font color=\"red\">增1运算符（减1运算符）在操作数的<strong>前面</strong>，</font>首先对操作数本身进行增减1运算，然后再参与其所在表达式的<br>  运算。<br>例：如果变量a的值为5，求下列表达式及a的值<br>      ① ++a +10<br>          表达式的值为16，a变为6<br>      ② --a +10<br>          表达式的值为14，a变为4<br>(2)<font color=\"red\">增1运算符（减1运算符）在操作数的<strong>后面</strong>，</font>则首先让操作数参与计算整个表达式的值，然后再对操作数进行<br>   增减运算<br>  例：如果变量a的值为5，求下列表达式及a的值<br>            ① a++ +10<br>                   表达式的值为15，a变为6<br>            ② a-- +10<br>                   表达式的值为15，a变为4<br></font></td></tr></table></div></div>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">练习题1：写出该程序的输出结果\nclass <span class=\"token function\">test</span>\n<span class=\"token punctuation\">{</span>\n      public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n           int a<span class=\"token operator\">=</span>5<span class=\"token punctuation\">;</span>\n           System.out.println<span class=\"token punctuation\">(</span>++a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           System.out.println<span class=\"token punctuation\">(</span>--a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           System.out.println<span class=\"token punctuation\">(</span>a++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           System.out.println<span class=\"token punctuation\">(</span>a--<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>                        \n输出结果：\n6\n5\n5\n6\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>📒算术运算符中的双目运算符 </strong></font><br> 如     +（加）、-（减）、*（乘）、/（除）、  % （取余数或取模）。<br>       +，-，* 是通常意义的加、减、乘<br>如果整数相除，则结果取整。如 5/2 得到结果2。<br>如果浮点数相除，则是我们通常意义上的除法，如5.0/2.0结果为2.5。<br>%是取余，如 5%2结果为1<br>                         5.2%2结果为1.2<br>                         5.2%2.2结果为0.8<br>                         10%-4结果2； -10%-4结果-2<br><br><font color=\"red\"><strong>注意：</strong></font> 如果整数相除或取模 第二个操作数为0 编译无错 运行会出错 抛出异常；<br>          如果浮点数相除或取模 第二个操作数为0 结果为NaN 。<br>注意：<br>1. 整数    int a=10/0     运行报错<br>                int a=10%0   运行报错<br>2. 浮点数<br>     double a=10.0/0     Infinity(正无穷大)<br>     double a=-10.0/0   -Infinity（负无穷大）<br>     double a=0.0/0        NaN<br>     double a=0.0%0        NaN<br></font></td></tr></table></div></div>\n\n<blockquote>\n<blockquote>\n<p><strong>思考：</strong>某个培训中心要为新到的学员安排房间，假设共有x个学员，每个房间可以住6人，让你用一个公式来计算他们要住的房间数？<br>答案：  (x+5)/6<br>这也可以用于计算留言板的页数。 </p>\n</blockquote>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-2-关系运算符\"><a href=\"#1-2-关系运算符\" class=\"headerlink\" title=\"1.2  关系运算符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.2  关系运算符</font></h4><font face=\"Comic sans MS\"><br><font color=\"#00B2EE\"><strong>1.关系运算符有七种：</strong></font>== ，!= ，&lt; ,&lt;= , &gt; ,&gt;= , instanceof  (对象运算符)<br><font color=\"#00B2EE\"><strong>2.关系表达式的结果类型为布尔型</strong></font><br><font color=\"#00B2EE\"><strong>3.instanceof：</strong></font>用来确定一对象是否是某一指定类的对象</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"> class <span class=\"token function\">test</span>\n<span class=\"token punctuation\">{</span>    public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>    <span class=\"token function\">test</span> t1<span class=\"token operator\">=</span>new test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          if<span class=\"token punctuation\">(</span>t1 instanceof test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"是\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>    \n     <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font color=\"red\" face=\"Comic sans MS\"><strong>📒关系表达式</strong></font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/11/5c3864c7165e7.png\" alt=\"1.png\"></p></div>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-3-逻辑运算符\"><a href=\"#1-3-逻辑运算符\" class=\"headerlink\" title=\"1.3  逻辑运算符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.3  逻辑运算符</font></h4><p><img src=\"https://i.loli.net/2019/01/11/5c3866ddb16bb.png\" alt=\"2.png\"> <img src=\"https://i.loli.net/2019/01/11/5c38674613277.png\" alt=\"3.png\"></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例：分析下列程序的输出结果\nclass test<span class=\"token punctuation\">{</span>    \n    public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n        boolean s<span class=\"token punctuation\">;</span>int i<span class=\"token operator\">=</span>100<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>3<span class=\"token operator\">></span>2<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>i++<span class=\"token operator\">==</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System.out.println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">=</span>100<span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>3<span class=\"token operator\">&lt;</span>2<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>i++<span class=\"token operator\">==</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System.out.println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n输出结果：\n101\n100\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-4-位运算符\"><a href=\"#1-4-位运算符\" class=\"headerlink\" title=\"1.4  位运算符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.4  位运算符</font></h4><p><img src=\"https://i.loli.net/2019/01/11/5c386923e4c7a.png\" alt=\"4.png\"><img src=\"https://i.loli.net/2019/01/11/5c38692468530.png\" alt=\"5.png\"></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例：分析下列程序的输出结果\nint a<span class=\"token operator\">=</span>7, b<span class=\"token operator\">=</span>8, c<span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span>     //c<span class=\"token operator\">=</span>00000000000000000000000000000000<span class=\"token operator\">=</span>0\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">;</span>     //c<span class=\"token operator\">=</span>00000000000000000000000000001111<span class=\"token operator\">=</span>15\n    c <span class=\"token operator\">=</span> a ^ b<span class=\"token punctuation\">;</span>     //c<span class=\"token operator\">=</span>00000000000000000000000000001111<span class=\"token operator\">=</span>15\n    c <span class=\"token operator\">=</span>~a<span class=\"token punctuation\">;</span>         //c<span class=\"token operator\">=</span>11111111111111111111111111111000<span class=\"token operator\">=</span>-8\n\n例：分析下列程序的输出结果\n    int a<span class=\"token operator\">=</span>7,c<span class=\"token punctuation\">;</span>     //a<span class=\"token operator\">=</span>00000000000000000000000000000111\n    c <span class=\"token operator\">=</span> a<span class=\"token operator\">>></span>3<span class=\"token punctuation\">;</span>      //c<span class=\"token operator\">=</span>00000000000000000000000000000000<span class=\"token operator\">=</span>0\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;&lt;</span> 3<span class=\"token punctuation\">;</span>    //c<span class=\"token operator\">=</span>00000000000000000000000000111000<span class=\"token operator\">=</span>56\n    c <span class=\"token operator\">=</span> a <span class=\"token operator\">>></span><span class=\"token operator\">></span> 3<span class=\"token punctuation\">;</span>   //c<span class=\"token operator\">=</span>00000000000000000000000000000000<span class=\"token operator\">=</span>0\nint a <span class=\"token operator\">=</span>-8<span class=\"token punctuation\">;</span> \nSystem.out.println<span class=\"token punctuation\">(</span>a<span class=\"token operator\">>></span><span class=\"token operator\">></span>1<span class=\"token punctuation\">)</span> //结果2147483644\nint i<span class=\"token operator\">=</span>88<span class=\"token operator\">>></span>32<span class=\"token punctuation\">;</span> System.out.println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>  //结果88\n//（在进行移位之前，java系统首先把移的位数与被移位数求余数，然后移动这个位数）\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>注意：</strong></font><br>（1）右移n位后的结果与除以2的n次方效果相同<br>（2）左移n位后的结果与乘以2的n次方效果相同<br>（3）无符号右移要慎重<br></font>\n\n<blockquote>\n<blockquote>\n<p>思考：  如何用一个表达式计算2的X次方？<br>答案：  1&lt;&lt;x<br>将1左移x位 </p>\n</blockquote>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-5-赋值运算符\"><a href=\"#1-5-赋值运算符\" class=\"headerlink\" title=\"1.5  赋值运算符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.5  赋值运算符</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>(1)简单赋值运算符    = </strong></font><br>将等号右边的表达式的值赋给等号左边的变量<br>       例如：     int c,d;<br>                     c=1;<br>                     d=c+10;<br><font color=\"red\"><strong>(2)复合赋值运算符      +=、-=、*=、/=、%= 等</strong></font><br>一般形式为：   变量 op= 表达式<br>等价于:     变量 =变量 op 表达式<br>c += a;     //c = c +a;<br>c -= a;     //c = c -a;<br>c <em>= a;     //c = c </em> a;<br><br>例：int a=1;<br>        double x=2;<br>        a+=2;           // 就是a=a+2, 结果使a的值为3<br>        x<em>=x+3;       // 就是x=x</em>(x+3), 结果使x的值为10.0<br>        int a=b=c=d=12;<br>        int a=(b=(c=(d=12))); //赋值运算符有返回值，返回值是=右边的值<br><br><font color=\"red\"><strong>注意：</strong></font><br>  1. boolean型的只能赋给boolean型；<br>  2. 其他七种类型如果能自动转换则可直接赋值，否则要进行强制类型转换。<br></font></td></tr></table></div></div>\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-6-条件运算符\"><a href=\"#1-6-条件运算符\" class=\"headerlink\" title=\"1.6  条件运算符\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.6  条件运算符</font></h4><font face=\"Comic sans MS\">Java 中唯一的三元运算符，其格式如下：<br><font color=\"#00B2EE\">&emsp;&emsp;<strong>变量 =  &lt;布尔表达式&gt; ? &lt;表达式1&gt; : &lt;表达式2&gt;</strong></font><br>含义是：当&lt;布尔表达式&gt;为真时，变量的值为&lt;表达式1&gt;的值，否则为&lt;表达式2&gt;的值。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例:  条件运算\npublic class max \n<span class=\"token punctuation\">{</span>\n       public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">{</span>\n            int x<span class=\"token operator\">=</span>20,y<span class=\"token operator\">=</span>30,max<span class=\"token punctuation\">;</span>\n            max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span> ? x <span class=\"token keyword\">:</span> y<span class=\"token punctuation\">;</span>      \n            System.out.println<span class=\"token punctuation\">(</span>“max<span class=\"token operator\">=</span>”+max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：max<span class=\"token operator\">=</span>30\n\n练习题2:\npublic class max \n<span class=\"token punctuation\">{</span>\n       public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">{</span>\n      int a<span class=\"token operator\">=</span>3,b<span class=\"token operator\">=</span>4,c<span class=\"token punctuation\">;</span>\n      c<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b? ++a:b++<span class=\"token punctuation\">;</span>\n      System.out.println<span class=\"token punctuation\">(</span>a+<span class=\"token string\">\"、\"</span>+b+<span class=\"token string\">\"、\"</span>+c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\n3、5、4\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"二、-运算符的优先级\"><a href=\"#二、-运算符的优先级\" class=\"headerlink\" title=\"二、 运算符的优先级 \"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二、 运算符的优先级 </font></h3><font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>表达式的运算次序取决于表达式中各种运算符的优先级。</strong></font><br>     （1）优先级高的先运算，优先级低的后运算。<br>     （2）括号( )的优先级最高。<br>     （3）优先级相同的情况下要考虑结合性，即从左向右运算还是从右向左运算。<br><font color=\"#00B2EE\"><strong>Java语言规定的运算符的优先级如下表所示</strong></font><br></font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/11/5c3871997c702.png\" alt=\"6.png\"></p></div>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>运算符的优先级与结合性的一些规律：</strong></font><br>1. 优先级<br><font color=\"red\">       () &gt; 单目运算符 &gt; 双目运算符 &gt; 三目运算符 &gt; 赋值运算符</font><br>双目： <font color=\"red\">算术&gt;关系&gt;逻辑</font> 。<br>2. 结合性<br><font color=\"red\">大多数运算符结合性为从左至右<br>赋值运算符的结合性为从右至左</font><br>    int a,b=3,c=5;<br>    a = b = c;    //结果：a、b、c均为 5<br><br><font color=\"red\"><strong>表达式写法的习惯：</strong></font><br><br>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font></td></tr></table></div></div>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例：\n    <span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> a + b * c\n    <span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">||</span> c\n    <span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> a + b <span class=\"token operator\">&lt;</span> c <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">==</span>e\n    <span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">)</span> a<span class=\"token operator\">=</span>8 – 2 * 3 <span class=\"token operator\">&lt;</span>4 <span class=\"token operator\">&amp;&amp;</span> 5 <span class=\"token operator\">&lt;</span> 2     结果：false\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>表达式写法的习惯：</strong></font><br>  (1) 除非是简单的直观运算，应该尽量使用括号<br>  (2)另外，尽量不要写太长的表达式，过长的表达式容易引 起对求值次序的误解。<br></font> \n\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"三、-数据类型转换\"><a href=\"#三、-数据类型转换\" class=\"headerlink\" title=\"三、 数据类型转换  \"></a><font color=\"#FF6347\" face=\"Comic sans MS\">三、 数据类型转换  </font></h3><h4 id=\"3-1-自动类型转换\"><a href=\"#3-1-自动类型转换\" class=\"headerlink\" title=\"3.1  自动类型转换\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.1  自动类型转换</font></h4><font face=\"Comic sans MS\">(1) Java中整型、实型、字符型数据可以混合运算。<br><font color=\"#00B2EE\"><strong>运算过程中，Java自动把精度较低的类型转换为另一种精度较高的类型。</strong></font><br>(2) 低精度的值赋给高精度的变量可以自动转换,不出现编译错误；<font color=\"#00B2EE\"><strong>相反会出现编译错误,需要强制转换。</strong></font><br>例如: float x=(float)5.0;long x=2;<br><br><font color=\"red\"><strong>注意：</strong></font> 如果byte、short、char在一起运算时，会先将这些值转换为int型。再进行运算，结果为int型。 如表达式中一个变量是int型，另一个是long型，则先将int型转为long型，再进行计算。最后结果为long型。</font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/01/11/5c3881774735b.png\" alt=\"7.png\"></p></div>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">下列代码会编译出错，提示c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>有精度损失\nclass <span class=\"token function\">test</span>\n<span class=\"token punctuation\">{</span>\n      public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n        byte a <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>\n        byte b <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>\n        byte c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<blockquote>\n<p>练习题3:<br>下列表达式结果是什么类型？<br>‘A’+2+2.5<br>double</p>\n</blockquote>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"3-2-手动强制类型转换\"><a href=\"#3-2-手动强制类型转换\" class=\"headerlink\" title=\"3.2  手动强制类型转换\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.2  手动强制类型转换</font></h4><font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>在Java中直接将高精度的值赋给低精度的变量会导致编译出错。这时可用强制类型转换来解决。</strong></font><br> 形式为：<br>&emsp;&emsp;<font color=\"red\">       (类型名)表达式</font><br> 例如：<br>       int   i;   byte  b,c;<br>       b=(byte)345;      //上机测试知b得到89<br>       c=(byte)356;      //上机测试知c得到100<br>       i=(int)(3.8+6);   //强制转换后小数部分被截去，i得到9，不会四舍五入<br><br><font color=\"red\"><strong>注意：</strong></font><br>1. 强制类型转换可能造成信息的丢失；<br>2. 布尔型与其它基本类型之间不能转换。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">加上强制类型转换，下列代码编译通过。\nclass <span class=\"token function\">test</span>\n<span class=\"token punctuation\">{</span>     public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n        byte a <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>\n        byte b <span class=\"token operator\">=</span> 1<span class=\"token punctuation\">;</span>\n        byte c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>运算时注意（一般的运算都有类型提升功能）：</strong></font><br>（1）在运算过程中，运算的结果至少是int型，即如果参与运算的两个数级别比int型低或是int型，则结果为<br>     int型；<br>（2）参与运算的数据如果有一个级别比int型高，则运算结果的类型与类型级别高的数相同；<br>（3）参与运算的两个数据如果类型不一样，会先把低级的数据转换成高级的类型的数据后再作运算，结果是高<br>     级的类型。<br></font></td></tr></table></div></div>\n\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"3-3-隐含强制类型转换\"><a href=\"#3-3-隐含强制类型转换\" class=\"headerlink\" title=\"3.3  隐含强制类型转换\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.3  隐含强制类型转换</font></h4><font face=\"Comic sans MS\">Java中允许把int类型的常量赋给byte、short变量时不需要强制类型转换<br>      byte b=123;//合法<br>      short s=123;//合法<br>      b=b+3; //不合法<br>&emsp;<br>但是把int类型的变量赋给byte、short类型的变量时必须强制转换，否则会出错<br>     int i=123;<br>     byte b=i;  //正确的做法是byte b=(byte)i;<br>    byte a = 1; byte c = (byte)(a + b);<br></font>\n\n<blockquote>\n<blockquote>\n<p>练习<br>设x,y,a分别为float,double,byte型变量，x=3.3,y=2.9,a=5, 则表达式x+ (int)y/ 3*a的值为多少？值的类型是什么？ </p>\n</blockquote>\n</blockquote>\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n","prev":{"title":"Java简单语句、复合语句、控制语句(3.7-3.8)","slug":"Java-Language-2-3"},"next":{"title":"Java-异常处理(5)","slug":"Java-Exception-Handling7"},"link":"Treecatee.gitgub.io/post/Java-Language-2-2/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一、 运算符及表达式 </font>","id":"一、-运算符及表达式","index":"1","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.1  算术运算符</font>","id":"1-1-算术运算符","index":"1.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.2  关系运算符</font>","id":"1-2-关系运算符","index":"1.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.3  逻辑运算符</font>","id":"1-3-逻辑运算符","index":"1.3"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.4  位运算符</font>","id":"1-4-位运算符","index":"1.4"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.5  赋值运算符</font>","id":"1-5-赋值运算符","index":"1.5"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.6  条件运算符</font>","id":"1-6-条件运算符","index":"1.6"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二、 运算符的优先级 </font>","id":"二、-运算符的优先级","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三、 数据类型转换  </font>","id":"三、-数据类型转换","index":"3","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.1  自动类型转换</font>","id":"3-1-自动类型转换","index":"3.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.2  手动强制类型转换</font>","id":"3-2-手动强制类型转换","index":"3.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.3  隐含强制类型转换</font>","id":"3-3-隐含强制类型转换","index":"3.3"}]}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Java-Language-2-2/\" title=\"Java运算符和数据类型转换(3.4-3.6)\">Treecatee.gitgub.io/post/Java-Language-2-2/</a>","published":"January 11, 2019"}}