{"title":"Java类、成员变量、static访问权限(4.1-4.4)","date":"2018-12-23T15:46:18.000Z","thumbnail":"https://i.loli.net/2018/12/24/5c20d0912e97e.jpg","slug":"Java-Access-Permissions-3","tags":["Java学习","Java访问权限"],"categories":["Java"],"updated":"2018-12-26T08:40:37.694Z","content":"<p>&ensp;<br>&ensp;</p>\n<h4 id=\"一、-Java中类的定义、类访问权限\"><a href=\"#一、-Java中类的定义、类访问权限\" class=\"headerlink\" title=\"一、 Java中类的定义、类访问权限\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java中类的定义、类访问权限</font></h4><h5 id=\"1-1-类的定义格式：\"><a href=\"#1-1-类的定义格式：\" class=\"headerlink\" title=\"1.1  类的定义格式：\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.1  类的定义格式：<font></font></font></h5><p><font color=\"red\"><strong>[修饰符] class 类名 [extends父类名] [implements接口名列表]</strong></font><br>&emsp;<br>&emsp;<br><img src=\"https://i.loli.net/2018/12/24/5c1fb67d13ec7.png\" alt=\"1\"></p>\n<p>&emsp;</p>\n<h5 id=\"1-2-类修饰符的访问权限：\"><a href=\"#1-2-类修饰符的访问权限：\" class=\"headerlink\" title=\"1.2  类修饰符的访问权限：\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.2  类修饰符的访问权限：<font></font></font></h5><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>类修饰符</th>\n<th>访问权限  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color=\"#EE3A8C\" face=\"Arial\">缺省(默认方式)</font></td>\n<td><font face=\"Comic sans MS\" color=\"#EE3A8C\">这种类只能被同一个包中的类访问；</font></td>\n</tr>\n<tr>\n<td><font color=\"#EE3A8C\" face=\"Arial\">public(公共)</font></td>\n<td><font face=\"Comic sans MS\" color=\"#EE3A8C\">它修饰的类能被所有的类访问；</font></td>\n</tr>\n<tr>\n<td><font color=\"#EE3A8C\" face=\"Arial\">abstract(抽象)</font></td>\n<td><font face=\"Comic sans MS\" color=\"#EE3A8C\"> 它修饰的类不能被实例化，它可能包含有未实现的方法。</font></td>\n</tr>\n<tr>\n<td><font color=\"#EE3A8C\" face=\"Arial\">extends(继承)</font></td>\n<td><font face=\"Comic sans MS\" color=\"#EE3A8C\">该保留字用来表明新创建的类继承哪个类, 被继承的类称为此类的父类。extends后面只能跟一个父类名称, 因为Java中一个类最多能继承一个类(单继承)。</font></td>\n</tr>\n<tr>\n<td><font color=\"#EE3A8C\" face=\"Arial\">final(最终)</font></td>\n<td><font face=\"Comic sans MS\" color=\"#EE3A8C\"> 它修饰的类不能被继承，即不能有子类。</font></td>\n</tr>\n<tr>\n<td><font color=\"#EE3A8C\" face=\"Arial\">implements (实现)</font></td>\n<td><font face=\"Comic sans MS\" color=\"#EE3A8C\">该保留字用来表明这个类实现了哪些接口，接口名可以有多个。</font></td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;</p>\n<h5 id=\"1-3-关于类访问权限的总结：\"><a href=\"#1-3-关于类访问权限的总结：\" class=\"headerlink\" title=\"1.3  关于类访问权限的总结：\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.3  关于类访问权限的总结：<font></font></font></h5><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\">1.    具有继承关系的子类可以继承父类的一些成员变量，即可以不创建对象就可以直接访问，如果是<br>      同一个包的子类可以继承到public、缺省和protected修饰的变量，如果是不同的包的子类就只能继承<br>      到public 和protected的；<br>2.    如果是其他类，不管是一个包还是不在一个包，都要创建该类的对象才能引用<br>3.    如果是main方法，不管是本类还是非本类，要访问实例变量都要创建对象，可以引申到其他所有<br>       的类方法中<br>4.    私有成员只能在本类中访问，如果在main方法中访问私有成员 必须创建对象</font></td></tr></table></div></div>\n\n<p>&ensp;<br>&ensp;</p>\n<h4 id=\"二、-成员变量访问权限\"><a href=\"#二、-成员变量访问权限\" class=\"headerlink\" title=\"二、 成员变量访问权限\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二、 成员变量访问权限</font></h4><p>&ensp;<br><img src=\"https://i.loli.net/2018/12/24/5c1fbf2618e79.png\" alt=\"2\"></p>\n<p>&ensp;<br>&emsp;</p>\n<h5 id=\"2-1-成员变量访问权限总结为：\"><a href=\"#2-1-成员变量访问权限总结为：\" class=\"headerlink\" title=\"2.1  成员变量访问权限总结为：\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.1  成员变量访问权限总结为：<font></font></font></h5><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><strong>(1) 访问修饰符缺省</strong><br>访问修饰符缺省时，成员变量只能被同一包(package) 中的所有类访问，所以也称为包(package)变量。<br>(缺省访问修饰符实际是friendly修饰符，但因为friendly不是Java语言的关键字，所以friendly修饰符<br>不能显式说明。）<br><strong>(2) public(公共)</strong><br>public修饰的成员变量可以被程序中的任何类所访问。由于public成员变量不受限制, 这易使类的对象引起<br>不希望的修改，建议成员变量尽量不要使用public修饰符。<br><strong>(3) protected (受保护)</strong><br>protected修饰的成员变量可以被本包及有继承关系的类自由访问。<br><strong>(4) private (私有)</strong><br>private修饰的成员变量只能在同一个类中使用。这种方式通常是最为安全的。<br></font></td></tr></table></div></div>\n\n<p>&ensp;<br>&ensp;</p>\n<h4 id=\"三、-static-静态-——静态变量访问权限\"><a href=\"#三、-static-静态-——静态变量访问权限\" class=\"headerlink\" title=\"三、 static(静态)——静态变量访问权限\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">三、 static(静态)——静态变量访问权限</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\">(1)<font color=\"green\"><strong>static修饰的成员变量称为</strong></font><font color=\"#1874CD\"><strong>类变量(静态变量)</strong></font>；<font color=\"green\"><strong>不用static修饰的成员变量又叫</strong></font><font color=\"#1874CD\"><strong>对象变量(实例变量)。</strong></font><br>(2)<font color=\"red\"><strong>区别：</strong></font>对象变量依附于具体的对象实例，它的值因具体对象实例的不同而不同，而类变量为该类的所有<br>对象所共享，它的值不因类的对象不同而不同。<br>(3)可以通过类来访问静态成员变量，也可以通过该类的对象访问静态成员变量。<br>&ensp;&ensp;<font color=\"red\"><strong>形式：类名.成员变量/对象名.成员变量</strong></font><br>(4)<font color=\"red\"><strong>反过来，非staic的对象方法可以直接使用static的类变量</strong></font><br>(5)类方法不能直接调用类中的对象方法（非static方法）。<br>(6)定义变量时必须当即赋值。<br></td></tr></table></div></div>\n\n<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n","prev":{"title":"对称密码-分组密码","slug":"Block-Cipher"},"next":{"title":"Java语言基础的字符常变量等(3.1-3.3)","slug":"Java-Language-2-1"},"link":"Treecatee.gitgub.io/post/Java-Access-Permissions-3/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java中类的定义、类访问权限</font>","id":"一、-Java中类的定义、类访问权限","index":"1","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.1  类的定义格式：<font></font></font>","id":"1-1-类的定义格式：","index":"1.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.2  类修饰符的访问权限：<font></font></font>","id":"1-2-类修饰符的访问权限：","index":"1.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.3  关于类访问权限的总结：<font></font></font>","id":"1-3-关于类访问权限的总结：","index":"1.3"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二、 成员变量访问权限</font>","id":"二、-成员变量访问权限","index":"2","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.1  成员变量访问权限总结为：<font></font></font>","id":"2-1-成员变量访问权限总结为：","index":"2.1"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三、 static(静态)——静态变量访问权限</font>","id":"三、-static-静态-——静态变量访问权限","index":"3"}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Java-Access-Permissions-3/\" title=\"Java类、成员变量、static访问权限(4.1-4.4)\">Treecatee.gitgub.io/post/Java-Access-Permissions-3/</a>","published":"December 23, 2018"}}