{"title":"Python-函数式编程","date":"2019-03-04T10:57:28.000Z","thumbnail":"https://s2.ax1x.com/2019/03/04/kOxQJS.jpg","slug":"Python-FunctionalProgramming","comments":true,"tags":["Python语言"],"categories":["Python"],"updated":"2019-03-06T07:04:37.689Z","content":"<p>装饰器还没搞懂，搞懂了再来继续写吧~<br>函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…<br>返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎*<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>函数式编程</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<center><font face=\"Comic sans MS\"><strong>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-高阶函数\"><font color=\"#FF6347\" face=\"Comic sans MS\">一. 高阶函数</font><a href=\"post/Python-FunctionalProgramming#一-高阶函数\"></a></h3><p><br></p>\n<blockquote>\n<ol>\n<li><font color=\"#FF7F00\"><strong>变量可以指向函数</strong></font>；</li>\n<li><font color=\"#FF7F00\"><strong>函数名也是变量</strong></font>；</li>\n<li><font color=\"#FF7F00\"><strong>函数可以作为return的返回值</strong></font>；</li>\n<li><font color=\"#FF7F00\"><strong>函数可以作为另一个函数的参数</strong></font>。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<h4 id=\"1-1-变量指向函数\"><font color=\"#3CB371\" face=\"Comic sans MS\">1.1 变量指向函数</font><a href=\"post/Python-FunctionalProgramming#1-1-变量指向函数\"></a></h4><p><br></p>\n<p>&emsp;&emsp; <font face=\"Microsoft YaHei\">在讲变量和字符串的时候我们讲过，变量就是一个对象，可以当作一个指针使用，而函数名也是一个变量，也就是一个对象。函数名其实就是指向函数的变量！注意，函数名是一个变量！变量！变量！当作指针用。</font></p>\n<p>&emsp;&emsp; <font face=\"Sans-serif\">既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。<br></font></p>\n<p><br></p>\n<hr>\n<hr>\n<font color=\"red\" face=\"Comic sans MS\"><strong>见过两种函数赋值给变量的形式</strong></font><font face=\"Comic sans MS\">，这两种形式是有区别的，分别总结一下。</font><br>一种是<br><br><strong><code>a = f</code></strong><br><br>另一种是<br><br><strong><code>a = f()</code></strong><br><br><br><br><font color=\"red\"><strong>1.</strong> <strong><code>a = f</code></strong> <strong>型属于将变量指向函数。</strong></font>\n\n<p>如下用示例说明：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">)</span>\n\n输出：\n<span class=\"token number\">10</span>\n<span class=\"token operator\">&lt;</span>built<span class=\"token operator\">-</span><span class=\"token keyword\">in</span> function abs<span class=\"token operator\">></span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>  \n可见，abs<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>是函数调用，而abs是函数本身。\n要获得函数调用结果，我们可以把结果赋值给变量：  \n\nx <span class=\"token operator\">=</span> abs<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n输出：\n<span class=\"token number\">10</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n但是，如果把函数本身赋值给变量呢？\n\nf <span class=\"token operator\">=</span> abs\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\n输出：\n<span class=\"token operator\">&lt;</span>built<span class=\"token operator\">-</span><span class=\"token keyword\">in</span> function abs<span class=\"token operator\">></span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n结论：函数本身也可以赋值给变量，即：变量可以指向函数。\n如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：\n\nf <span class=\"token operator\">=</span> abs\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n输出：\n<span class=\"token number\">10</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n成功！说明变量f现在已经指向了abs函数本身。直接调用abs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数和调用变量f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>完全相同。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p>说明变量f现在已经指向了abs函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。这是廖雪峰老师python教程上的例子，现在调用<code>f()</code>和调用<code>abs()</code>是一样的了。</p>\n<p><br></p>\n<p>再举一个工厂函数的例子：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maker</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n　　<span class=\"token keyword\">def</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n　　　　<span class=\"token keyword\">return</span> X<span class=\"token operator\">**</span>N\n\n　　<span class=\"token keyword\">return</span> action\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n这个嵌套函数的外层返回值为内层函数的函数名，注意没有括号，这里有无括号是有很大区别的。此时调用外部函数：\n\nf<span class=\"token operator\">=</span>maker<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>此时进入maker<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>，且定义了一个action<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>函数，然后返回action函数名（对象）给f\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n那么如上所述，f便指向了action函数，且限制条件为N<span class=\"token operator\">=</span><span class=\"token number\">2</span>，可以理解为f为N等于<span class=\"token number\">2</span>时的action函数。我们来调用它：\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>此时相当于调用了cation<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>函数，这也是在外部使用内部嵌套函数的方法，\n              <span class=\"token operator\">//</span>因为内部嵌套函数是不允许在外部访问的。\n\n输出：\n<span class=\"token number\">9</span>            <span class=\"token operator\">//</span>证明f和action函数是一样的。\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n如上的示例也可以用<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">=</span>maker<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>来输出结果一样，两个括号连在一起相当于执行了这两个函数。\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">maker</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> c<span class=\"token operator\">**</span>N \n    <span class=\"token keyword\">return</span> a\n\nf<span class=\"token operator\">=</span>maker<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\nOUTPUT<span class=\"token punctuation\">:</span> <span class=\"token number\">9</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"red\"><strong>2.</strong> <strong><code>a = f()</code></strong> <strong>型属于将f()的返回值赋值给a的过程</strong></font>\n\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">这里的a仅仅接收f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的返回值，如果f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>没有返回值，那么a即被赋值为None。这里值得注意的一点是，\n在a<span class=\"token operator\">=</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的执行过程中，f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>会运行一次，如：\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    z <span class=\"token operator\">=</span> x<span class=\"token operator\">+</span>y\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'******我是分隔符，嘿嘿嘿******'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\nOUTPUT<span class=\"token punctuation\">:</span> \n<span class=\"token number\">7</span>\n<span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span>我是分隔符，嘿嘿嘿<span class=\"token operator\">**</span><span class=\"token operator\">**</span><span class=\"token operator\">**</span>\nNone\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n这里在分隔符前输出了<span class=\"token number\">7</span>，说明赋值过程函数add执行了，然而a的值为None，且只能通过<span class=\"token keyword\">print</span>语句才可以显示。\n这是因为add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数没有<span class=\"token keyword\">return</span>语句。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h4 id=\"1-2-传入函数与返回函数名\"><font color=\"#3CB371\" face=\"Comic sans MS\">1.2 传入函数与返回函数名</font><a href=\"post/Python-FunctionalProgramming#1-2-传入函数与返回函数名\"></a></h4><p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、传入函数（把函数作为参数）</strong></font>\n\n\n\n<p>&emsp;&emsp;既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。</p>\n<p>一个最简单的高阶函数：</p>\n<pre class=\"line-numbers language-pyhton\"><code class=\"language-pyhton\">def add(x, y, f):\n    return f(x) + f(y)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>当我们调用<code>add(-5, 6, abs)</code>时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nf <span class=\"token operator\">=</span> abs\nf<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">></span> abs<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> abs<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">></span> <span class=\"token number\">11</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">11</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用代码验证一下：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nOUTPUT<span class=\"token punctuation\">:</span> <span class=\"token number\">11</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<blockquote>\n<p><strong>总结：</strong>编写高阶函数，就是让函数的参数能够接收别的函数。<font color=\"#FF7F00\"><strong>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</strong></font>。</p>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、返回函数名（把函数名作为返回值）</strong></font>\n\n<p>&emsp;&emsp;高阶函数除了可以接受函数作为参数外，还可以把函数名作为结果值返回。注意Python3<font color=\"#FF7F00\"><strong>返回的是迭代器对象</strong></font>。</p>\n<p><br></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc_sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'在函数的参数章节讲过，*传入元组，**传入字典'</span>\n    ax <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n        ax <span class=\"token operator\">=</span> ax <span class=\"token operator\">+</span> n\n    <span class=\"token keyword\">return</span> ax\n<span class=\"token triple-quoted-string string\">'''但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，\n而是返回求和的函数：'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lazy_sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ax <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n            ax <span class=\"token operator\">=</span> ax <span class=\"token operator\">+</span> n\n        <span class=\"token keyword\">return</span> ax\n    <span class=\"token keyword\">return</span> sum\n\n<span class=\"token triple-quoted-string string\">'''当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：'''</span>\n\nf <span class=\"token operator\">=</span> lazy_sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\nOUTPUT<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>function lazy_sum<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>sum at <span class=\"token number\">0x101c6ed90</span><span class=\"token operator\">></span>\n\n<span class=\"token triple-quoted-string string\">'''调用函数f时，才真正计算求和的结果：'''</span>\n\nf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nOUTPUT<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span>\n\n<span class=\"token triple-quoted-string string\">'''\n在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum\n的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为\n“闭包（Closure）”的程序结构拥有极大的威力。\n\n请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：\n'''</span>\n\nf1 <span class=\"token operator\">=</span> lazy_sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nf2 <span class=\"token operator\">=</span> lazy_sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nf1<span class=\"token operator\">==</span>f2\nOUTPUT<span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span>\n<span class=\"token string\">'f1()和f2()的调用结果互不影响。'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>三、闭包</strong></font>\n\n<p>&emsp;&emsp;注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。\n    我们来看一个例子：'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n             <span class=\"token keyword\">return</span> i<span class=\"token operator\">*</span>i\n        fs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> fs\n\nf1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3 <span class=\"token operator\">=</span> count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。\n你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：'''</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span>\n\n<span class=\"token triple-quoted-string string\">'''\n全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变\n量i已经变成了3，因此最终结果为9。\n\n返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该\n循环变量后续如何更改，已绑定到函数参数的值不变：\n'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> j<span class=\"token operator\">*</span>j\n        <span class=\"token keyword\">return</span> g\n    fs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># f(i)立刻被执行，因此i的当前值被传入f()</span>\n    <span class=\"token keyword\">return</span> fs\n\n<span class=\"token string\">'再看看结果：'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3 <span class=\"token operator\">=</span> count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span>\n<span class=\"token triple-quoted-string string\">'''缺点是代码较长，可利用lambda函数缩短代码。'''</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-装饰器\"><font color=\"#FF6347\" face=\"Comic sans MS\">二. 装饰器</font><a href=\"post/Python-FunctionalProgramming#二-装饰器\"></a></h3>","prev":{"title":"Markdown","slug":"MarkdownUsage"},"next":{"title":"Python-模块和包","slug":"Python-Modules-Packages"},"link":"Treecatee.gitgub.io/post/Python-FunctionalProgramming/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 高阶函数</font>","id":"一-高阶函数","index":"1","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.1 变量指向函数</font>","id":"1-1-变量指向函数","index":"1.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.2 传入函数与返回函数名</font>","id":"1-2-传入函数与返回函数名","index":"1.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 装饰器</font>","id":"二-装饰器","index":"2"}],"copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/Python-FunctionalProgramming/\" title=\"Python-函数式编程\">Treecatee.gitgub.io/post/Python-FunctionalProgramming/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}