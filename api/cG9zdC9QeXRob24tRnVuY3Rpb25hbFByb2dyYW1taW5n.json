{"title":"Python-函数式编程","date":"2019-03-04T10:57:28.000Z","thumbnail":"https://s2.ax1x.com/2019/03/04/kOxQJS.jpg","slug":"Python-FunctionalProgramming","tags":["Python语言"],"categories":["Python"],"updated":"2019-03-06T07:04:37.689Z","content":"<p>装饰器还没搞懂，搞懂了再来继续写吧~<br>函数既可作为返回值也可作为函数的参数…一切都是对象，一切都是指针，一切都是东西…<br>返回函数（引用）和返回函数值是不一样滴….  ◡̈⃝︎⋆︎*<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>函数式编程</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<center><font face=\"Comic sans MS\"><strong>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</strong></font> </center>\n\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-高阶函数\"><a href=\"#一-高阶函数\" class=\"headerlink\" title=\"一. 高阶函数\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一. 高阶函数</font></h3><p><br></p>\n<blockquote>\n<ol>\n<li><font color=\"#FF7F00\"><strong>变量可以指向函数</strong></font>；</li>\n<li><font color=\"#FF7F00\"><strong>函数名也是变量</strong></font>；</li>\n<li><font color=\"#FF7F00\"><strong>函数可以作为return的返回值</strong></font>；</li>\n<li><font color=\"#FF7F00\"><strong>函数可以作为另一个函数的参数</strong></font>。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<h4 id=\"1-1-变量指向函数\"><a href=\"#1-1-变量指向函数\" class=\"headerlink\" title=\"1.1 变量指向函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.1 变量指向函数</font></h4><p><br></p>\n<p>&emsp;&emsp; <font face=\"Microsoft YaHei\">在讲变量和字符串的时候我们讲过，变量就是一个对象，可以当作一个指针使用，而函数名也是一个变量，也就是一个对象。函数名其实就是指向函数的变量！注意，函数名是一个变量！变量！变量！当作指针用。</font></p>\n<p>&emsp;&emsp; <font face=\"Sans-serif\">既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。<br></font></p>\n<p><br></p>\n<hr>\n<hr>\n<font color=\"red\" face=\"Comic sans MS\"><strong>见过两种函数赋值给变量的形式</strong></font><font face=\"Comic sans MS\">，这两种形式是有区别的，分别总结一下。</font><br>一种是<br><br><strong><code>a = f</code></strong><br><br>另一种是<br><br><strong><code>a = f()</code></strong><br><br><br><br><font color=\"red\"><strong>1.</strong> <strong><code>a = f</code></strong> <strong>型属于将变量指向函数。</strong></font>\n\n<p>如下用示例说明：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(abs(<span class=\"number\">-10</span>))</span><br><span class=\"line\">print(abs)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">&lt;built-<span class=\"keyword\">in</span> function abs&gt;</span><br><span class=\"line\">------------------------------------------------------------------------------------------  </span><br><span class=\"line\">可见，abs(<span class=\"number\">-10</span>)是函数调用，而abs是函数本身。</span><br><span class=\"line\">要获得函数调用结果，我们可以把结果赋值给变量：  </span><br><span class=\"line\"></span><br><span class=\"line\">x = abs(<span class=\"number\">-10</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">但是，如果把函数本身赋值给变量呢？</span><br><span class=\"line\"></span><br><span class=\"line\">f = abs</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">&lt;built-<span class=\"keyword\">in</span> function abs&gt;</span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">结论：函数本身也可以赋值给变量，即：变量可以指向函数。</span><br><span class=\"line\">如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</span><br><span class=\"line\"></span><br><span class=\"line\">f = abs</span><br><span class=\"line\">print(f(<span class=\"number\">-10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">成功！说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>说明变量f现在已经指向了abs函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。这是廖雪峰老师python教程上的例子，现在调用<code>f()</code>和调用<code>abs()</code>是一样的了。</p>\n<p><br></p>\n<p>再举一个工厂函数的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maker</span><span class=\"params\">(N)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">action</span><span class=\"params\">(X)</span>:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> X**N</span><br><span class=\"line\"> </span><br><span class=\"line\">　　<span class=\"keyword\">return</span> action</span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">这个嵌套函数的外层返回值为内层函数的函数名，注意没有括号，这里有无括号是有很大区别的。此时调用外部函数：</span><br><span class=\"line\"></span><br><span class=\"line\">f=maker(<span class=\"number\">2</span>)   //此时进入maker(<span class=\"number\">2</span>)，且定义了一个action(X)函数，然后返回action函数名（对象）给f</span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">那么如上所述，f便指向了action函数，且限制条件为N=<span class=\"number\">2</span>，可以理解为f为N等于<span class=\"number\">2</span>时的action函数。我们来调用它：</span><br><span class=\"line\"></span><br><span class=\"line\">print(f(<span class=\"number\">3</span>))   //此时相当于调用了cation(<span class=\"number\">3</span>)函数，这也是在外部使用内部嵌套函数的方法，</span><br><span class=\"line\">              //因为内部嵌套函数是不允许在外部访问的。</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">9</span>            //证明f和action函数是一样的。</span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">如上的示例也可以用print(f=maker(<span class=\"number\">2</span>)(<span class=\"number\">3</span>))来输出结果一样，两个括号连在一起相当于执行了这两个函数。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maker</span><span class=\"params\">(N)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">(c)</span>:</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c**N </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">f=maker(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT: <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"red\"><strong>2.</strong> <strong><code>a = f()</code></strong> <strong>型属于将f()的返回值赋值给a的过程</strong></font>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里的a仅仅接收f()的返回值，如果f()没有返回值，那么a即被赋值为<span class=\"literal\">None</span>。这里值得注意的一点是，</span><br><span class=\"line\">在a=f()的执行过程中，f()会运行一次，如：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">\tz = x+y</span><br><span class=\"line\">\tprint(z)</span><br><span class=\"line\">a = add(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">print(<span class=\"string\">'******我是分隔符，嘿嘿嘿******'</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT: </span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\">******我是分隔符，嘿嘿嘿******</span><br><span class=\"line\"><span class=\"literal\">None</span></span><br><span class=\"line\">------------------------------------------------------------------------------------------</span><br><span class=\"line\">这里在分隔符前输出了<span class=\"number\">7</span>，说明赋值过程函数add执行了，然而a的值为<span class=\"literal\">None</span>，且只能通过<span class=\"keyword\">print</span>语句才可以显示。</span><br><span class=\"line\">这是因为add()函数没有<span class=\"keyword\">return</span>语句。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h4 id=\"1-2-传入函数与返回函数名\"><a href=\"#1-2-传入函数与返回函数名\" class=\"headerlink\" title=\"1.2 传入函数与返回函数名\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.2 传入函数与返回函数名</font></h4><p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>一、传入函数（把函数作为参数）</strong></font>\n\n\n\n<p>&emsp;&emsp;既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<strong>高阶函数</strong>。</p>\n<p>一个最简单的高阶函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(x, y, f):</span><br><span class=\"line\">    return f(x) + f(y)</span><br></pre></td></tr></table></figure>\n<p>当我们调用<code>add(-5, 6, abs)</code>时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">-5</span></span><br><span class=\"line\">y = <span class=\"number\">6</span></span><br><span class=\"line\">f = abs</span><br><span class=\"line\">f(x) + f(y) ==&gt; abs(-5) + abs(6) ==&gt; 11</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<p>用代码验证一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y, f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</span><br><span class=\"line\"></span><br><span class=\"line\">print(add(<span class=\"number\">-5</span>, <span class=\"number\">6</span>, abs))</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT: <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<blockquote>\n<p><strong>总结：</strong>编写高阶函数，就是让函数的参数能够接收别的函数。<font color=\"#FF7F00\"><strong>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</strong></font>。</p>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>二、返回函数名（把函数名作为返回值）</strong></font>\n\n<p>&emsp;&emsp;高阶函数除了可以接受函数作为参数外，还可以把函数名作为结果值返回。注意Python3<font color=\"#FF7F00\"><strong>返回的是迭代器对象</strong></font>。</p>\n<p><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_sum</span><span class=\"params\">(*args)</span>:</span>   <span class=\"string\">'在函数的参数章节讲过，*传入元组，**传入字典'</span></span><br><span class=\"line\">    ax = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        ax = ax + n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax</span><br><span class=\"line\"><span class=\"string\">'''但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，</span></span><br><span class=\"line\"><span class=\"string\">而是返回求和的函数：'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lazy_sum</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        ax = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            ax = ax + n</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = lazy_sum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\">OUTPUT: &lt;function lazy_sum.&lt;locals&gt;.sum at <span class=\"number\">0x101c6ed90</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''调用函数f时，才真正计算求和的结果：'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\">OUTPUT: <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum</span></span><br><span class=\"line\"><span class=\"string\">的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为</span></span><br><span class=\"line\"><span class=\"string\">“闭包（Closure）”的程序结构拥有极大的威力。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">f1 = lazy_sum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">f2 = lazy_sum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">f1==f2</span><br><span class=\"line\">OUTPUT: <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">'f1()和f2()的调用结果互不影响。'</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>三、闭包</strong></font>\n\n<p>&emsp;&emsp;注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。</span></span><br><span class=\"line\"><span class=\"string\">\t我们来看一个例子：'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    fs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> i*i</span><br><span class=\"line\">        fs.append(f)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fs</span><br><span class=\"line\"></span><br><span class=\"line\">f1, f2, f3 = count()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。</span></span><br><span class=\"line\"><span class=\"string\">你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1()</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2()</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3()</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变</span></span><br><span class=\"line\"><span class=\"string\">量i已经变成了3，因此最终结果为9。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</span></span><br><span class=\"line\"><span class=\"string\">如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该</span></span><br><span class=\"line\"><span class=\"string\">循环变量后续如何更改，已绑定到函数参数的值不变：</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(j)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> j*j</span><br><span class=\"line\">        <span class=\"keyword\">return</span> g</span><br><span class=\"line\">    fs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">        fs.append(f(i)) <span class=\"comment\"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'再看看结果：'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1, f2, f3 = count()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2()</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3()</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"string\">'''缺点是代码较长，可利用lambda函数缩短代码。'''</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-装饰器\"><a href=\"#二-装饰器\" class=\"headerlink\" title=\"二. 装饰器\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二. 装饰器</font></h3>","prev":{"title":"Markdown","slug":"MarkdownUsage"},"next":{"title":"Python-模块和包","slug":"Python-Modules-Packages"},"link":"Treecatee.gitgub.io/post/Python-FunctionalProgramming/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 高阶函数</font>","id":"一-高阶函数","index":"1","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.1 变量指向函数</font>","id":"1-1-变量指向函数","index":"1.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.2 传入函数与返回函数名</font>","id":"1-2-传入函数与返回函数名","index":"1.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 装饰器</font>","id":"二-装饰器","index":"2"}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Python-FunctionalProgramming/\" title=\"Python-函数式编程\">Treecatee.gitgub.io/post/Python-FunctionalProgramming/</a>","published":"March 4, 2019"}}