{"title":"Java-异常处理(5)","date":"2018-12-28T01:47:07.000Z","thumbnail":"https://i.loli.net/2018/12/28/5c2580ec2bc8a.jpg","slug":"Java-Exception-Handling7","tags":["Java学习"],"categories":["Java"],"updated":"2019-03-05T11:33:14.739Z","content":"<p>&emsp;<br>&emsp;</p>\n<center><font color=\"#3CB371\" face=\"Comic sans MS\" size=\"5\"><strong>异常处理</strong></font></center>\n\n<p><a href=\"https://i.loli.net/2018/12/28/5c25dfcbaa09b.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2018/12/28/5c25dfcbaa09b.png\" alt=\"程序错误.png\"></a><br><a href=\"https://i.loli.net/2018/12/28/5c25e36859c86.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://i.loli.net/2018/12/28/5c25e36859c86.png\" alt=\"程序错误1.png\"></a></p>\n<p>&emsp;</p>\n<h3 id=\"一、-Java异常基础\"><a href=\"#一、-Java异常基础\" class=\"headerlink\" title=\"一、 Java异常基础\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java异常基础</font></h3><h4 id=\"1-1-为什么要引入异常处理机制？\"><a href=\"#1-1-为什么要引入异常处理机制？\" class=\"headerlink\" title=\"1.1  为什么要引入异常处理机制？\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  为什么要引入异常处理机制？</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>程序的错误分为：</strong></font><br><strong>编译错误：</strong>程序员编写程序时语法上出现的错误；<br><strong>运行错误：</strong>程序员编写的程序在语法上没有错误，但是程序在运行时出现错误，本章就主要针对该类错误讲解 -&ensp;- 即异常、异常类和异常处理机制。</font>\n\n<p>&emsp;</p>\n<h4 id=\"1-2-以往的错误处理方法\"><a href=\"#1-2-以往的错误处理方法\" class=\"headerlink\" title=\"1.2  以往的错误处理方法\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  以往的错误处理方法</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><strong>主要缺陷：</strong><br>&emsp;程序复杂<br>&emsp;可靠性差<br>&emsp;返回信息有限<br>&emsp;返回代码标准化困难　<br>以往的程序开发过程中，常常采用<font color=\"#00B2EE\"><strong>返回值</strong></font>进行处理。例如，在编写一个方法，可以返回一个状态代码，调用者<br>根据状态代码判断出错与否。若状态代码表示一个错误，则调用该错误的处理程序进行相应的处理，或显示一<br>个错误页面或错误信息。<br></font></td></tr></table></div></div>\n\n<p><em>举例</em> <strong><em>以往的错误处理方法：采用返回值进行处理</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例：实现将一个文件从硬盘加载近来，导致加载可能失败的运行错误有硬盘错误、文件无法找到等</span><br><span class=\"line\"><span class=\"keyword\">int</span> status=loadTextfile();</span><br><span class=\"line\">If (status!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//something unusual happened, describe it</span></span><br><span class=\"line\"> <span class=\"keyword\">switch</span>(status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: </span><br><span class=\"line\">       <span class=\"comment\">//file not found</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">       <span class=\"comment\">//disk error</span></span><br><span class=\"line\">   <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"comment\">//other error&#125;</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//file loaded OK, continue with program&#125; </span></span><br><span class=\"line\">```      </span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">#### &lt;font color=\"#20B2AA\" face=\"Comic sans MS\"&gt;1.3  Java异常处理方法&lt;/font&gt;</span><br><span class=\"line\">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#ADD8E6&gt;&lt;font face=\"Comic sans MS\"&gt;Java异常处理方法：Java为运行错误引入了异常、异常类和异常处理机制。</span><br><span class=\"line\">  **异常：**特殊的运行错误，是在程序运行过程中发生的、会打断程序正常执行的错误</span><br><span class=\"line\">　例如：</span><br><span class=\"line\">　除<span class=\"number\">0</span>溢出</span><br><span class=\"line\">　文件找不到</span><br><span class=\"line\">  数组元素下标越界　</span><br><span class=\"line\"></span><br><span class=\"line\">**异常类：**Java用面向对象的方法处理异常，Java的异常类是处理运行时错误的特殊类，每一种异常类对应一种</span><br><span class=\"line\">特定的运行错误，每一个异常事件由一个异常类的对象来代表。</span><br><span class=\"line\"> *例如：除<span class=\"number\">0</span>溢出（ArithmeticException）</span><br><span class=\"line\">　　　文件找不到（FileNotFoundException）</span><br><span class=\"line\">　　　数组元素下标越界（ArrayIndexOutofBoundsException）*</span><br><span class=\"line\"></span><br><span class=\"line\">**异常处理机制：抛出异常——捕捉异常：**</span><br><span class=\"line\"> 1.  当出现了一些错误，方法都会产生一个&lt;font color=\"red\"&gt;异常对象&lt;/font&gt;，这个异常对象将交由运行系统来处理。此过程就称为抛出</span><br><span class=\"line\">     &lt;font color=\"red\"&gt;(throwing)异常&lt;/font&gt;。**包括：系统抛出、用户自定义抛出。**</span><br><span class=\"line\"> <span class=\"number\">2</span>.  接着，运行系统开始寻找合适的处理方法，来处理这个异常。如果系统找到了一个适合的处理该异常方法，</span><br><span class=\"line\">     这一过程就叫&lt;font color=\"red\"&gt;捕获异常&lt;/font&gt;。</span><br><span class=\"line\">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">#### &lt;font color=\"#20B2AA\" face=\"Comic sans MS\"&gt;1.4  异常处理的语法支持&lt;/font&gt;</span><br><span class=\"line\">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#ADD8E6&gt;&lt;font face=\"Comic sans MS\"&gt;       **－try,catch,throws,throw,finally**</span><br><span class=\"line\">(<span class=\"number\">1</span>) <span class=\"keyword\">try</span>包含可能出现异常的语句块；</span><br><span class=\"line\">(<span class=\"number\">2</span>) 一个或多个<span class=\"keyword\">catch</span>块紧随<span class=\"keyword\">try</span>&#123;&#125;块，每个<span class=\"keyword\">catch</span>块通常处理指定类型的异常；</span><br><span class=\"line\">(<span class=\"number\">3</span>) <span class=\"keyword\">finally</span>引导块紧随<span class=\"keyword\">catch</span>块后，主要用于清理现场（可有可无）。</span><br><span class=\"line\">格式：</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123; ......</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>( ExceptionName1 e )</span><br><span class=\"line\">&#123; ......&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>( ExceptionName2 e )</span><br><span class=\"line\">&#123; ......&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123; ......&#125;</span><br><span class=\"line\">注意：<span class=\"keyword\">finally</span>总是执行，<span class=\"keyword\">catch</span>块不一定执行</span><br><span class=\"line\">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">#### &lt;font color=\"#20B2AA\" face=\"Comic sans MS\"&gt;1.5  总结&lt;/font&gt;</span><br><span class=\"line\">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#EEE0E5&gt;&lt;font face=\"Comic sans MS\"&gt; (1) Java的异常处理把错误集中起来统一处理。程序员只需要说明何处可能出现异常，如何处理即可；</span><br><span class=\"line\"> (<span class=\"number\">2</span>) 采用面向对象的思想标准化了各种错误的类型；</span><br><span class=\"line\"> (<span class=\"number\">3</span>) Java把程序运行过程中可能遇到的问题分为两类，一类是致命性的，即程序遇到了非常严重的不正常状</span><br><span class=\"line\"> 态，不能简单地恢复执行，这就是&lt;font color=\"red\"&gt;**错误(对应Error类)**&lt;/font&gt;，如程序运行过程中内存耗尽。另一类是非致命性的，</span><br><span class=\"line\"> 通过某种处理后程序还能继续运行，这就是&lt;font color=\"red\"&gt;**异常(对应Exception类)**&lt;/font&gt;。</span><br><span class=\"line\">&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">### &lt;font color=\"#FF6347\" face=\"Comic sans MS\"&gt;二、 异常类的层次&lt;/font&gt;</span><br><span class=\"line\">#### &lt;font color=\"#20B2AA\" face=\"Comic sans MS\"&gt;2.1  异常分类&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font face=\"Comic sans MS\"&gt;&lt;font color=\"red\"&gt;**☕异常类：**&lt;/font&gt;异常在Java中都是作为类的实例(对象)的形式出现的。</span><br><span class=\"line\">&amp;emsp;     如 Throwable类, Exception类, Error类……</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=\"red\"&gt;**☕Java中异常分类：**&lt;/font&gt;</span><br><span class=\"line\"> (1)  &lt;font color=\"#00B2EE\"&gt;**Error类及其子类：**&lt;/font&gt;描述Java运行时刻系统内部的错误或资源枯竭导致的错误，无法恢复和抛出，发生几率小；</span><br><span class=\"line\"> (2)  &lt;font color=\"#00B2EE\"&gt;**Exception类及其子类：**&lt;/font&gt;普通程序可以从中恢复，分为&lt;font color=\"red\"&gt;**运行时异常**&lt;/font&gt;和&lt;font color=\"red\"&gt;**非运行时异常**&lt;/font&gt;。</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;异常在Java中也是作为类的实例的形式出现的。Java中的所有的异常类都是从Throwable类派生出来的。&lt;font color=\"red\"&gt;**Throwable类有两个直接子类：**&lt;/font&gt;&lt;font color=\"#00B2EE\"&gt;**java.lang.Error**&lt;/font&gt; 和 &lt;font color=\"#00B2EE\"&gt;**java.lang.Exception**&lt;/font&gt;。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">异常类的层次结构如下图所示。</span><br><span class=\"line\">![<span class=\"number\">58</span>.png](https:<span class=\"comment\">//i.loli.net/2018/12/28/5c2621a200c43.png)</span></span><br><span class=\"line\">**(<span class=\"number\">1</span>) 🔺Error类及其子类主要用来描述一些Java运行时刻系统内部的错误或资源枯竭导致的错误。**普通的程序不能从这类错误中恢复，也无法抛出这种类型的错误，这类错误出现的几率是很小的。</span><br><span class=\"line\">**(<span class=\"number\">2</span>) 🔺另一个异常类的子类是Exception类和它的子类。**在编程中错误的处理主要是对这类错误的处理，如除数为零、数组下标越界等。类Exception是普通程序可以从中恢复的所有规范了的异常的父类。</span><br><span class=\"line\">&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">&amp;emsp;</span><br><span class=\"line\">#### &lt;font color=\"#20B2AA\" face=\"Comic sans MS\"&gt;2.2  Exception类的子类&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font face=\"Comic sans MS\"&gt;&lt;font color=\"red\"&gt;**☕Exception类子类有两种：**&lt;/font&gt;</span><br><span class=\"line\">**运行时异常**和**非运行时异常（一般异常）**　&amp;emsp;&amp;emsp;&amp;emsp;　*区别？？？*</span><br><span class=\"line\">&lt;font color=\"#00B2EE\"&gt;**（1）运行时异常：**&lt;/font&gt;RuntimeException类及其所有子类。      运行时异常是程序员编写程序不正确所导致的异常，理论上，程序员经过检查和测试可以查出这类错误。如**除数为零等，错误的强制类型转换、数组越界访问、空引用**。</span><br><span class=\"line\">&lt;font color=\"#00B2EE\"&gt;**（2）非运行时异常（一般异常）：**&lt;/font&gt;指可以由编译器在编译时检测到的、可能会发生在方法执行过程中的异常，如找不到指定的文件等，这不是程序本身的错误，如果这些异常情况没有发生，程序本身仍然是完好的。　　</span><br><span class=\"line\">&lt;font color=\"red\"&gt;**注意：**&lt;/font&gt;**编译器强制要求Java程序必须**&lt;font color=\"#00B2EE\"&gt;**捕获**&lt;/font&gt;**或**&lt;font color=\"#00B2EE\"&gt;**声明抛出**&lt;/font&gt;**所有非运行时异常，但对运行时异常不作要求。运行时异常编译可以通过但是运行时出现异常；非运行时异常编译的时候就通不过。**</span><br><span class=\"line\"></span><br><span class=\"line\">*例如：格式不正确的URL、试图为一个不存在的类找到一个代表它的类的对象。除了runtimeexception及其子类以外，其他exception类的子类都是非运行时异常。*</span><br><span class=\"line\">&lt;/font&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">//运行时异常和非运行时异常区别举例  </span></span><br><span class=\"line\">[例<span class=\"number\">5</span>-<span class=\"number\">1</span>] RuntimeExceptionDemo1.java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RuntimeExceptionDemo1</span></span>&#123;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">System.out.println(<span class=\"number\">2</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">该程序能编译通过，而在运行时，出现如下提示：</span><br><span class=\"line\">&gt; javac RuntimeExceptionDemo1.java</span><br><span class=\"line\">&gt; java RuntimeExceptionDemo1</span><br><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.ArithmeticException: / by zero at </span><br><span class=\"line\">RuntimeExceptionDemo1.main(RuntimeExceptionDemo1.java:<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//这里的\"ArithmeticException\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[例<span class=\"number\">5</span>-<span class=\"number\">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonRuntimeExceptionDemo1</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">       FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"text.txt\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((s=in.read())!=-<span class=\"number\">1</span>) System.out.print(s);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">会出现如下的错误提示：</span><br><span class=\"line\">javac NonRuntimeExceptionDemo1.java</span><br><span class=\"line\">NonRuntimeExceptionDemo1.java:<span class=\"number\">5</span>: unreported exception java.io.FileNotFoundException; must</span><br><span class=\"line\"> be caught or declared to be thrown</span><br><span class=\"line\">FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"text.txt\"</span>);</span><br><span class=\"line\">                   ^</span><br><span class=\"line\">NonRuntimeExceptionDemo1.java:<span class=\"number\">7</span>: unreported exception java.io.IOException; mustbe</span><br><span class=\"line\"> caught or declared to be thrown</span><br><span class=\"line\"><span class=\"keyword\">while</span>((s=in.read())!=-<span class=\"number\">1</span>) System.out.print(s);</span><br><span class=\"line\">                ^</span><br><span class=\"line\">NonRuntimeExceptionDemo1.java:<span class=\"number\">8</span>: unreported exception java.io.IOException; mustbe caught </span><br><span class=\"line\">or declared to be thrown</span><br><span class=\"line\">in.close();</span><br></pre></td></tr></table></figure>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>☕对运行时异常的说明：</strong></font>由于运行时异常可能会出现在程序的任何地方，而且出现的可能性非常大，因而由程序本身去检测运行异常出现与否，将会使程序的开销过大，所以<br>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置<br><font color=\"#00B2EE\"><strong>建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程的希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误。</strong></font><br>&emsp;<br><font color=\"red\"><br><strong>☕对运行时异常和非运行时异常的总结：</strong></font><br>(1) 当出现java.lang.ArithmeticException运行时异常时，不需要用户在程序中对其进行处理，而直接由Java运行时系统进行处理；<br>(2) 对于非运行时异常，Java编译器对程序进行编译的时候，便指出用户需要<font color=\"#00B2EE\">①捕获该类异常</font>或者<font color=\"#00B2EE\">②声明抛出</font>。即对于非运行时异常，用户需要在程序中进行处理，否则编译时无法通过。<br></font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 捕获该类异常</span><br><span class=\"line\">[例<span class=\"number\">5</span>-<span class=\"number\">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonRuntimeExceptionDemo1</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">             FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"text.txt\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((s=in.read())!=-<span class=\"number\">1</span>) System.out.print(s);</span><br><span class=\"line\">           in.close();</span><br><span class=\"line\">              &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;…&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">② 声明抛出</span><br><span class=\"line\">[例<span class=\"number\">5</span>-<span class=\"number\">2</span>] NonRuntimeExceptionDemo1.java</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonRuntimeExceptionDemo1</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">      FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"text.txt\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((s=in.read())!=-<span class=\"number\">1</span>) System.out.print(s);</span><br><span class=\"line\">      in.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-3-对于运行时异常和非运行时异常的一些说明\"><a href=\"#2-3-对于运行时异常和非运行时异常的一些说明\" class=\"headerlink\" title=\"2.3  对于运行时异常和非运行时异常的一些说明\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  对于运行时异常和非运行时异常的一些说明</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. ☕编译器和异常：</strong></font>编译器强制要求程序员捕获或声明抛出非运行时异常<br>   <em>到底为什么要这么做呢？？？</em><br>对于运行时异常，编译器不强制要求，但用户也可以自己去捕获<br>   <em>这个时候会出现什么效果呢？？？</em><br><br><font color=\"red\"><strong>2. ☕运行时系统和异常：</strong></font><br>(1) 异常都有抛出的轨迹；<br>(2) 对于所有异常，某个方法产生的异常 ，如果没有被捕获，就会自动抛给方法的调用者（但是对非运行时异常一定要声明抛出），如果调用者还没有捕获，再抛给调用者的调用者，以此类推，直到main方法里发现还没有捕获，那么运行时系统就会来处理这个异常，把异常信息和异常的轨迹信息打印给用户。<br><br><font color=\"red\"><strong>3. ☕两点建议：</strong></font><br>(1) 建议对于运行时异常用户不要去捕获，捕获就是承认这个错误，但是一般我们编程者希望是发生错误能改正就尽量改正，除非不是由程序员自己意愿决定的错误；<br>(2) 建议对于非运行时异常，用户应该去捕获，以交代程序员的处理该错误的代码，实在不行，就声明抛出给方法的调用者。<br><br><font color=\"red\"><strong>3. ☕异常类常用的方法：</strong></font><br><font color=\"#00B2EE\"><strong>public Exception()</strong></font><br><font color=\"#00B2EE\"><strong>public Exception(String s)</strong></font>&emsp; :该参数一般表示该异常对应的错误的描述<br><font color=\"#00B2EE\"><strong>public String toString()</strong></font>&emsp;:返回描述当前异常对象信息的字符串<br><font color=\"#00B2EE\"><strong>public String getMessage()</strong></font>&emsp;:返回描述当前异常对象信息的详细信息。<br><font color=\"#00B2EE\"><strong>public void printStackTrace()</strong></font>&emsp;:打印当前异常对象使用堆栈的轨迹。<br></font>\n\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2018/12/29/5c2656f46e0d4.png\" alt=\"5S.png\"></p></div>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2018/12/29/5c2656f96a129.png\" alt=\"4DI6.png\"></p></div>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"三、-try-catch-finally异常处理\"><a href=\"#三、-try-catch-finally异常处理\" class=\"headerlink\" title=\"三、 try-catch-finally异常处理\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">三、 try-catch-finally异常处理</font></h3><h4 id=\"3-1-概括try-catch-finally语句\"><a href=\"#3-1-概括try-catch-finally语句\" class=\"headerlink\" title=\"3.1  概括try-catch-finally语句\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">3.1  概括try-catch-finally语句</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>用户处理异常的三种方法:</strong></font><br>       (1)用户可以用try-catch-finally语句进行<font color=\"#00B2EE\"><strong>抛出</strong></font>和<font color=\"#00B2EE\"><strong>捕获处理</strong></font>；<br>       (2)如果不想捕获和处理异常，可以通过throws语句<font color=\"#00B2EE\"><strong>声明要抛出的异常</strong></font>；<br>       (3) 用户可以定义自己的异常类,并用throw语句来抛出。<br><br>运行时异常是由Java运行时系统在程序的运行过程中检测到的,它可能在程序中任意部位发生,而且其数目可能很大,因此Java编译器允许程序不对它进行处理。这时，java运行时系统会把生成的运行时异常对象交给默认的异常处理，在标准输出设备上显示异常的内容以及发生异常的位置。即：<font color=\"red\"><strong>运行时异常：会输出到设备显示哪里存在错误，请更正；非运行时异常：编译报错时提示必须添加非运行时异常处理，比如加try{}…catch(类名 对象){}或者使用throws来抛出异常</strong></font>。<br></font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>-<span class=\"keyword\">catch</span>-<span class=\"keyword\">finally</span>语句对程序运行进行监控，捕获和处理异常通常形式： </span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">调用可能产生异常的方法及其它java语句；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(异常类名<span class=\"number\">1</span> 异常对象名e)&#123;</span><br><span class=\"line\">异常处理语句块；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(异常类名<span class=\"number\">2</span> 异常对象名e)&#123;</span><br><span class=\"line\">异常处理语句块；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">最终处理；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[例<span class=\"number\">5</span>-<span class=\"number\">3</span>]访问文本文件text.txt，并将其在屏幕上打印出来。</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TryCatchFinally</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123; </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"text.txt\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((s=in.read())!=-<span class=\"number\">1</span>) System.out.print(s);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">catch</span>(FileNotFoundException e)&#123;</span><br><span class=\"line\">          System.out.println(“捕获异常：”+e);   <span class=\"comment\">//e会调用toString()方法回显异常信息给程序员</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">catch</span>(IOException e)&#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"捕获异常：\"</span>+e);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"finally块总是执行！\"</span>);</span><br><span class=\"line\">       &#125; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">捕获异常：java.io.FileNotFoundException: text.txt (系统找不到指定的文件。)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>块总是执行！</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"3-2-try语句\"><a href=\"#3-2-try语句\" class=\"headerlink\" title=\"3.2  try语句\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">3.2  try语句</font></h4><font face=\"Comic sans MS\">☕<font color=\"red\"><strong>try{}</strong></font>：将可能抛出一个或者若干个异常的代码放入try语句块中。<br><font color=\"red\"><strong>注意：</strong></font>应当尽量<strong>减小</strong>try代码块的大小，不要将整个程序代码全部放入try语句块中，而是应当仔细分析代码，在可能出现异常情况的地方用try进行监控。<br><br>因为当发生异常时，程序控制由try块转到catch块，Java将跳过try中后面的语句，且永远不会从catch块返回到try块。因此若将整个程序代码都放在try中，若一开始发生异常，则后面的语句将永远不会被执行，从而影响了程序的实现。<br></font>\n\n<p>&emsp;</p>\n<h4 id=\"3-3-catch语句\"><a href=\"#3-3-catch语句\" class=\"headerlink\" title=\"3.3  catch语句\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">3.3  catch语句</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><strong>📒(1)</strong> <font color=\"red\"><strong>try语句后面必须跟有一个或多个catch语句来处理try中产生的异常事件</strong></font>。如果try语句中未产生异常，<br>  那么catch语句将不执行。<br><strong>📒(2)catch语句需要一个参数：</strong><font color=\"red\"><strong>一个异常类名和该异常类的对象。注意该异常类必须是Throwable类的子类</strong></font>.<br><strong>📒(3)</strong> try块中发生了一个异常，try-catch语句就会自动在try块后面的各个catch块中，找出与该异常类相<br>        匹配的参数。当参数符合以下3个条件之一时，就认为这个参数与产生的异常相匹配：<br>        （1）参数与产生的异常属于一个类；<br>        （2）参数是产生的异常的父类；<br>        （3）参数是一个接口时，产生的异常实现了这一接口。<br><font color=\"red\"><strong>📒(4) 注意：</strong></font><br>(1) 当产生的异常找到了第一个与之相匹配的参数时，就执行包含这一参数的catch语句中的Java代码，执<br>行完catch语句后，程序恢复执行，但不会回到异常发生处继续执行，而是执行try-catch结构后面的代码。<br>(2) 可以用一个catch块来处理多个异常类型，此时catch的参数应该是这多个异常的父类。<br>(3) 有多个catch块时，要细心安排catch块的顺序。<font color=\"red\">  <strong>将子类的catch块放在前面，父类的catch块放在后面。</strong></font><br></font></td></tr></table></div></div>\n\n<p>&emsp;</p>\n<h4 id=\"3-4-finally子句\"><a href=\"#3-4-finally子句\" class=\"headerlink\" title=\"3.4  finally子句\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">3.4  finally子句</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>1.finally语句：</strong></font> 无论在try块中是否产生异常，也不管产生的异常是否会被捕获，finally中的语句最终都会<br>                           被执行。<br><font color=\"red\"><strong>2.作用：</strong></font> 为异常处理事件提供一个清理机制,例如清理打开文件、Socket、JDBC连接之类的资源。<br><br>  如果程序用到了文件、Socket、JDBC连接之类的资源，即使遇到了异常，也要正确释放占用的资源。<br>&ensp;<strong>finally语句可以说是为异常处理事件提供的一个清理机制. 一般是用来关闭文件或释放其他的系统资源，作<br>  为try-catch-finally结构的一部分，可以没有finally语句，如果存在finally语句，不论try块中是否发生<br>  了异常，是否执行过catch语句，都要执行finally语句。</strong><br><br><font color=\"red\"><strong>3. 带有finally子句的try-catch-finally语句的形式如下：</strong></font></font></td></tr></table></div></div>  \n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123; … &#125;           <span class=\"comment\">//…是正常执行的代码, 可能产生异常</span></span><br><span class=\"line\">       <span class=\"keyword\">catch</span> (异常类<span class=\"number\">1</span> e) &#123; … &#125;    <span class=\"comment\">//…是异常类1的处理代码</span></span><br><span class=\"line\">       <span class=\"keyword\">catch</span> (异常类<span class=\"number\">2</span> e) &#123; … &#125;    <span class=\"comment\">//…是异常类1的处理代码</span></span><br><span class=\"line\">        ……</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (异常类n e) &#123; … &#125;   <span class=\"comment\">//…是异常类2的处理代码</span></span><br><span class=\"line\">      <span class=\"keyword\">finally</span> &#123; … &#125;                   <span class=\"comment\">//…是执行清除工作的语句</span></span><br></pre></td></tr></table></figure>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>4.执行过程：</strong></font><br><strong>(1) try块中的语句没有产生异常。</strong>在这种情况下，Java首先执行try块中的所有的语句，然后执行finally子句<br>    中的代码，最后执行try…catch..finally块后面的语句；<br><strong>(2) try块中的语句产生了异常，而且此异常在方法内被捕获(有catch匹配)。</strong> 在这种情况下，Java首先执行try<br>    块中的语句，直到产生异常处，然后跳过此try块中剩下的语句，执行捕获此异常的catch子句的处理代码；<br>    然后执行finally子句中的代码；<br><strong>(3) 如果在catch子句又重新抛出了异常。</strong>也会执行finally，然后将这个异常抛出给方法的调用者；<br><strong>(4) try块中产生了异常，而此异常在方法内没有被捕获(没有catch匹配) 。</strong>在这种情况下，Java将执行try块<br>    中的代码直到产生异常，然后跳过try块中的代码而转去执行finally子句中的代码，最后将异常抛出给方法<br>    的调用者。<br></font></td></tr></table></div></div>  \n\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"四、-throws-throw抛出异常\"><a href=\"#四、-throws-throw抛出异常\" class=\"headerlink\" title=\"四、 throws-throw抛出异常\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">四、 throws-throw抛出异常</font></h3><h4 id=\"4-1-throws抛出异常\"><a href=\"#4-1-throws抛出异常\" class=\"headerlink\" title=\"4.1  throws抛出异常\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">4.1  throws抛出异常</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>📒throws说明：</strong></font><br><strong>在设计可能会抛出异常的方法时，可以有两个选择：</strong><br><font color=\"#00B2EE\"><strong>(1) 使用try-catch-finally处理方法中的异常</strong></font>；<br><font color=\"#00B2EE\"><strong>(2) 声明抛出异常：</strong></font>不捕获异常(<font color=\"red\">没有throws方法的创建异常类的实例和抛出异常。是个空语句。</font>)，而是将异常交由上一层处理，在其他地方捕获异常。如果使用后者，那么应该（在某些情况下）向编译器表明：此方法可能会抛出异常，但方法本身不会捕获它。可以在方法头中用throws子句来实现此功能。<br><br>(2.1)带throws异常说明的方法说明形式如下：<br>       <font color=\"#00B2EE\"> …  方法名(…) [throws 异常类列表]<br>        { 方法体  }<br></font><br>&emsp;<br><font color=\"red\"><strong>📒注意：</strong></font><br> （１）方法抛出的异常类是throws子句中指定的异常类或其子类。<br> （２）并不是所有可能发生的异常都要在方法的说明中指定，从Error类中派生出的异常和从RuntimeException类中派生的异常就不用在方法声明中指定。<br><br><font color=\"red\"><strong>📒在下列情况下Java方法可以声明抛出异常：</strong></font><br> （１）调用的方法抛出了异常；<br> （２）检测到了错误并使用throw语句抛出异常；<br></font> \n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例<span class=\"number\">1</span>：调用的方法抛出了异常 </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;……</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInput</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;……</span><br><span class=\"line\">    System.in.read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">2</span>：检测到了错误并使用<span class=\"keyword\">throw</span>语句抛出异常</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;……</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInput</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;……</span><br><span class=\"line\">     IOException ae =<span class=\"keyword\">new</span> IOException(<span class=\"string\">\"buffer is full\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ae; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例<span class=\"number\">3</span>： <span class=\"keyword\">throws</span>多个异常</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;                                                   </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Image <span class=\"title\">loadImage</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span>  </span></span><br><span class=\"line\"><span class=\"function\">                 EOFException, MalformURLException  </span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">  ……</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"4-2-throw抛出异常\"><a href=\"#4-2-throw抛出异常\" class=\"headerlink\" title=\"4.2  throw抛出异常\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">4.2  throw抛出异常</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>📒throw说明：</strong></font><br><strong>要使用throw，则必须在方法名后面指出throws；但是使用throws，抛出可以是空语句不用写，交给上一层处理！！</strong><br>在捕获一个异常前，必须有一段Java代码来生成和抛出一个异常对象。Java用throw语句抛出异常。throw语句的格式如下：<br>                <font color=\"red\">throw ThrowableObject；<br></font><br>&emsp;<br><font color=\"#00B2EE\"><strong>异常对象的生成和抛出可以有以下三种情况：</strong></font><br>　　　（１）Java运行时系统<br>　　　（２）JDK中某个类<br>　　　（３）在程序中创建异常对象抛出<br><br><font color=\"#00B2EE\"><strong>使用throw语句应注意：</strong></font><br>（１）一般这种抛出异常的语句应该在满足一定条件执行，例如把throw语句if分支中<br>（２）含有throw语句的方法，应该在方法头定义中用throws语句声明所有可能抛出的异常<br><br><br><font color=\"#00B2EE\"><strong>抛出异常有这样三步：</strong></font><br>    （1）确定异常类；<br>    （2）创建异常类的实例；<br>    （3）抛出异常。<br></font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">getInput</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span>[] buffer =<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">20</span>];</span><br><span class=\"line\">   <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">true</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(flag) &#123;</span><br><span class=\"line\">       buffer[counter] =(<span class=\"keyword\">char</span>)System.in.read(); </span><br><span class=\"line\">         </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(buffer[counter]==<span class=\"string\">'\\n'</span>) flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      counter++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(counter&gt;=<span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">&#125; IOException ae =<span class=\"keyword\">new</span> IOException(<span class=\"string\">\"buffer is full\"</span>); </span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ae; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(buffer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">\"//IOException ae =new IOException(\"</span><span class=\"string\">\"buffer is full\"</span><span class=\"string\">\");  throw ae;\"</span>使用<span class=\"keyword\">throw</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"五、-正确地使用异常\"><a href=\"#五、-正确地使用异常\" class=\"headerlink\" title=\"五、 正确地使用异常\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">五、 正确地使用异常</font></h3><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\">由于异常使用起来非常方便，以至于在很多情况下可能会滥用异常。但是，使用异常处理会降低程序运行的<br>速度，几点建议：<br><br><font color=\"red\"><strong>（1） 在可以使用简单的测试就能完成的检查中，不要使用异常来代替它。</strong></font>例如：<br>      if (ins!=null)       //使用ins引用对象<br>       {  …   }<br><br><font color=\"red\"><strong>（2） 不要过细地使用异常。</strong></font>最好不要到处使用异常，更不要在循环体内使用异常处理, 可以将它包裹在循环<br>体外面。<br><font color=\"red\"><strong>（3）不要捕获了一个异常而又不对它做任何的处理。</strong></font><br>   try<br>   {<br>     …… //正常执行的代码<br>   }<br>   catch(Exception e) {  }<br><br><font color=\"red\"><strong>(4) 将异常保留给方法的调用者并非不好的做法。</strong></font><br>     对于有些异常，将其交给方法的调用者去处理是一种更好的处理办法。没有类似这样if(counter&gt;=20){<br>      IOException ae =new IOException(“buffer is full”);<br>      throw ae; }的语句，是个空语句。<br></font></td></tr></table></div></div>  \n\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n","prev":{"title":"Java运算符和数据类型转换(3.4-3.6)","slug":"Java-Language-2-2"},"next":{"title":"Java变量及其传递、内部类(4.9-4.10)","slug":"Java-Variable-InnerClass6"},"link":"Treecatee.gitgub.io/post/Java-Exception-Handling7/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java异常基础</font>","id":"一、-Java异常基础","index":"1","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  为什么要引入异常处理机制？</font>","id":"1-1-为什么要引入异常处理机制？","index":"1.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  以往的错误处理方法</font>","id":"1-2-以往的错误处理方法","index":"1.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  对于运行时异常和非运行时异常的一些说明</font>","id":"2-3-对于运行时异常和非运行时异常的一些说明","index":"1.3"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三、 try-catch-finally异常处理</font>","id":"三、-try-catch-finally异常处理","index":"2","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">3.1  概括try-catch-finally语句</font>","id":"3-1-概括try-catch-finally语句","index":"2.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">3.2  try语句</font>","id":"3-2-try语句","index":"2.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">3.3  catch语句</font>","id":"3-3-catch语句","index":"2.3"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">3.4  finally子句</font>","id":"3-4-finally子句","index":"2.4"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">四、 throws-throw抛出异常</font>","id":"四、-throws-throw抛出异常","index":"3","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">4.1  throws抛出异常</font>","id":"4-1-throws抛出异常","index":"3.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">4.2  throw抛出异常</font>","id":"4-2-throw抛出异常","index":"3.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">五、 正确地使用异常</font>","id":"五、-正确地使用异常","index":"4"}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Java-Exception-Handling7/\" title=\"Java-异常处理(5)\">Treecatee.gitgub.io/post/Java-Exception-Handling7/</a>","published":"December 28, 2018"}}