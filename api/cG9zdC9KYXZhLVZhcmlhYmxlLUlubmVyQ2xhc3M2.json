{"title":"Java变量及其传递、内部类(4.9-4.10)","date":"2018-12-27T15:27:04.000Z","thumbnail":"https://i.loli.net/2018/12/27/5c24f015bda37.jpg","slug":"Java-Variable-InnerClass6","tags":["Java学习"],"categories":["Java"],"updated":"2019-01-08T13:26:59.985Z","content":"<p>&emsp;<br>&emsp;</p>\n<center><font color=\"#3CB371\" face=\"Comic sans MS\" size=\"5\"><strong>变量及其传递 &amp; 内部类</strong></font></center>\n\n<p>&emsp;</p>\n<h3 id=\"一、-Java变量及其传递\"><a href=\"#一、-Java变量及其传递\" class=\"headerlink\" title=\"一、 Java变量及其传递\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java变量及其传递</font></h3><h4 id=\"1-1-基本数据变量与引用型变量\"><a href=\"#1-1-基本数据变量与引用型变量\" class=\"headerlink\" title=\"1.1  基本数据变量与引用型变量\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  基本数据变量与引用型变量</font></h4><font face=\"Comic sans MS\"><strong>1.  📒Java变量:</strong><br>&emsp;<font color=\"red\"><strong>(1). 基本型变量(8种)</strong></font><br>&emsp;&emsp; <strong>char,byte,short,int,long,float,double,boolean</strong><br>&emsp;<font color=\"red\"><strong>(2). 引用型变量：</strong></font><strong>对象,接口,数组</strong></font>            \n\n<p><img src=\"https://i.loli.net/2018/12/27/5c24f23dc321f.png\" alt=\"T2.png\"><br><img src=\"https://i.loli.net/2018/12/27/5c24f4379eed2.png\" alt=\"N.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例：</span><br><span class=\"line\">    public class MyDate&#123;</span><br><span class=\"line\">\tprivate int day=12;</span><br><span class=\"line\">\tprivate int month=6;</span><br><span class=\"line\">\tprivate int year=1900;</span><br><span class=\"line\">\tpublic MyDate(int y,int m,int d)&#123;</span><br><span class=\"line\">\t\tyear=y;</span><br><span class=\"line\">\t\tmonth=m;</span><br><span class=\"line\">\t\tday=d;&#125;</span><br><span class=\"line\">          void addYear()</span><br><span class=\"line\">\t&#123;   year++;&#125;</span><br><span class=\"line\">         public void <span class=\"function\"><span class=\"title\">display</span></span>()&#123;</span><br><span class=\"line\">\tSystem.out.println(year+<span class=\"string\">\"-\"</span>+month</span><br><span class=\"line\">             +<span class=\"string\">\"-\"</span>+day);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">       MyDate m,n;</span><br><span class=\"line\">       m=new MyDate(2003,9,22);</span><br><span class=\"line\">       n=m;     <span class=\"string\">\"//n和m指向同一个地址\"</span></span><br><span class=\"line\">       n.addYear();</span><br><span class=\"line\">       m.display();</span><br><span class=\"line\">       n.display();</span><br><span class=\"line\">       System.out.println(m.toString());</span><br><span class=\"line\">       System.out.println(n.toString());\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      /*运行结果</span><br><span class=\"line\">       2004-9-22</span><br><span class=\"line\">       2004-9-22</span><br><span class=\"line\">       MyDate@11a698a</span><br><span class=\"line\">       MyDate@11a698a</span><br><span class=\"line\">      */</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-2-成员变量与局部变量\"><a href=\"#1-2-成员变量与局部变量\" class=\"headerlink\" title=\"1.2  成员变量与局部变量\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  成员变量与局部变量</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>成员变量与局部变量有没有区别?</strong></font><br>  成员变量若为static的称为类变量，否则称为成员变量，而局部变量是在方法体内的变量。<br> (1) 📒从语法形式上看，成员变量是属于类或接口的，而局部变量是在方法中定义的变量或方法的参变量；<br> 成员变量可以被public，private，static等修饰，而局部变量则不能被访问控制符及static修饰；成员<br> 变量及局部变量都可以被final修饰。<br>(2) 📒从变量在内存中的存储方式看，成员变量是对象的一部分，而对象是存在于堆中的，而局部变量是<br>     存在于栈中的。<br>(3) 📒从变量在内存中的存在时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变<br>     量随着方法的调用而产生，随着方法调用结束而自动消失。<br>(4) 📒成员变量如果没有赋初值，则会自动以该类型的默认值（0,false,null等）赋值；而局部变量则不会<br>     自动赋值，必须显示地赋值后才能使用。<br></font></td></tr></table></div></div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">         int a;</span><br><span class=\"line\">         void <span class=\"function\"><span class=\"title\">m</span></span>()&#123;</span><br><span class=\"line\">            int b;</span><br><span class=\"line\">            System.out.println(a);  //合法的，a的值为0</span><br><span class=\"line\">            System.out.println(b);  //不合法，编译不通过</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-3-变量的传递\"><a href=\"#1-3-变量的传递\" class=\"headerlink\" title=\"1.3  变量的传递\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.3  变量的传递</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. 📒按值传递:</strong></font>当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。(传递8种基本型变量)<br><font color=\"red\"><strong>2. 📒按引用传递:</strong></font>当将一个参数传递给一个函数时，函数接收的原始值的内存地址，而不是值的副本，因此，如果修改了该参数，调用代码中的原始值也随之改变。(传递对象,接口,数组)<br><font color=\"#00B2EE\"><em>Java中的参数传递比C++简单,按值传递所有参数,制作所有参数的副本,而不管它们的类型。</em></font><br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例1：</span><br><span class=\"line\">class TestTransOfValue</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public static void main(String args[])</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    StringBuffer sb1, sb2;</span><br><span class=\"line\">    val = 10;</span><br><span class=\"line\">    sb1 = new StringBuffer(<span class=\"string\">\"apples\"</span>);</span><br><span class=\"line\">    sb2 = new StringBuffer(<span class=\"string\">\"pears\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"val is \"</span> + val);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"sb1 is \"</span> + sb1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"sb2 is \"</span> + sb2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"calling modify\"</span>);</span><br><span class=\"line\">    //按值传递所有参数</span><br><span class=\"line\">    modify(val, sb1, sb2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"returned from modify\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"val is \"</span> + val);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"sb1 is \"</span> + sb1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"sb2 is \"</span> + sb2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void modify(int a, StringBuffer r1,</span><br><span class=\"line\">                         StringBuffer r2)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"in modify...\"</span>);</span><br><span class=\"line\">    //在方法中修改基本类型变量的值</span><br><span class=\"line\">    a = 0;  </span><br><span class=\"line\">    //在方法中修改对象引用值的副本</span><br><span class=\"line\">    r1 = null;  //1</span><br><span class=\"line\">    //在方法中修改副本的对象实体值</span><br><span class=\"line\">    r2.append(<span class=\"string\">\" taste good\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a is \"</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"r1 is \"</span> + r1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"r2 is \"</span> + r2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行后输出：</span><br><span class=\"line\">val is 10</span><br><span class=\"line\">sb1 is apples</span><br><span class=\"line\">sb2 is pears</span><br><span class=\"line\">calling modify <span class=\"keyword\">in</span> modify...</span><br><span class=\"line\">a is 0</span><br><span class=\"line\">r1 is null</span><br><span class=\"line\">r2 is pears taste good </span><br><span class=\"line\">returned from modify</span><br><span class=\"line\">val is 10</span><br><span class=\"line\">sb1 is apples</span><br><span class=\"line\">sb2 is pears taste good </span><br><span class=\"line\">/*关于这里的sb1和r1：</span><br><span class=\"line\">当参数传到modify后，r1和sb1指向同一个地址，若改变了r1指向的地址，并不会更改sb1指向的地址。这个时候就</span><br><span class=\"line\">相当于看作两个指针了。</span><br><span class=\"line\">关于sb2和r2：</span><br><span class=\"line\">sb2和r2指向同一个地址，这个地址指向的值(实体值)被改变了，则结束后sb2和r2的实体值也就相应的改变了。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2018/12/28/5c2500f374fbd.png\" alt=\"FX.png\"></p></div>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例2：</span><br><span class=\"line\">class Swap</span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> public static void main(String args[])</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Integer a, b;</span><br><span class=\"line\">    a = new Integer(10);</span><br><span class=\"line\">    b = new Integer(50);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"before swap...\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a is \"</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"b is \"</span> + b);</span><br><span class=\"line\">    swap(a, b);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"after swap...\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a is \"</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"b is \"</span> + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void swap(Integer a, Integer b)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Integer temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"in swap...\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a is \"</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"b is \"</span> + b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*</span><br><span class=\"line\">运行后输出：</span><br><span class=\"line\">before swap...</span><br><span class=\"line\">a is 10</span><br><span class=\"line\">b is 50</span><br><span class=\"line\"><span class=\"keyword\">in</span> swap…</span><br><span class=\"line\">a is 50</span><br><span class=\"line\">b is 10</span><br><span class=\"line\">after swap...</span><br><span class=\"line\">a is 10</span><br><span class=\"line\">b is 50 </span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>参数传递总结：</strong></font><br> (1) Java按值传递所有参数,制作所有参数的副本,而不管它们的类型<br> (2) 对于基本类型的变量形参修改了并不能反映到函数外面的实参<br> (3) 对于引用类型的变量，在形参中修改了对象实体值可以反映到实参，在形参中修改了对象引用值，<br>     不能反映到实参<br></font></td></tr></table></div></div>\n\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-4-引用型变量的实体值、引用值比较\"><a href=\"#1-4-引用型变量的实体值、引用值比较\" class=\"headerlink\" title=\"1.4  引用型变量的实体值、引用值比较\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.4  引用型变量的实体值、引用值比较</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. 📒参数传递总结：</strong></font><br> (1) 比较基本类型的数据: ==和!=<br> (2) 如果要比较引用型变量是否相同,可以直接用==和!=吗?<font color=\"red\">  <strong>答：不能</strong><br><br><strong>==和!=用来比较引用型变量时（只能比较引用值（地址）是不是相等）,只能判断运算符两边引用的是不是同一个对象,即对象的地址值（或对象引用值）！！！！！</strong></font><br><font color=\"#00B2EE\"><strong>如何比较两个对象的内容(对象实体值)是否相同?<br>用equls()方法：</strong></font><br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>2. 📒引用型变量比较总结：</strong></font><br> (1) 比较两个变量是否同一个对象（即对象引用值是否相同），用==和!=<br> (2) 比较两个变量的内容是否相同用equals方法<br> (3) <strong>自己定义的类如果要支持equals方法必须重写从Object类继承来的equals方法(比如前面的String类<br> 是java自己的类就不需要重写equals，但是Employee类就是自己定义的类则需要重写equals)</strong><br><br><strong>Object类中的equals方法：</strong><br> <em>public boolean equals(Object obj){<br>   return (this==obj);<br> }</em><br></font></td></tr></table></div></div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">equals示例1:</span><br><span class=\"line\">class EqualsTest&#123;</span><br><span class=\"line\">  public static void main(String[] arguments)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     String str1,str2;</span><br><span class=\"line\">     str1=<span class=\"string\">\"Free the bound periodicals.\"</span>;</span><br><span class=\"line\">     str2=str1;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String1: \"</span>+str1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String2: \"</span>+str2);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same object? \"</span>+(str1==str2));      //<span class=\"literal\">true</span></span><br><span class=\"line\">     str2=new String(str1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String1: \"</span>+str1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String2: \"</span>+str2);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same object? \"</span>+(str1==str2));      //<span class=\"literal\">false</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same value? \"</span>+str1.equals(str2));  //<span class=\"literal\">true</span></span><br><span class=\"line\">     String str3,str4;</span><br><span class=\"line\">     str3=<span class=\"string\">\"busy\"</span>;</span><br><span class=\"line\">     str4=<span class=\"string\">\"busy\"</span>; //str4=new String(<span class=\"string\">\"busy\"</span>)或str4=new String(str3) </span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String3: \"</span>+str3);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String4: \"</span>+str4);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same object? \"</span>+(str3==str4));       //<span class=\"literal\">true</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same value? \"</span>+str3.equals(str4));   //<span class=\"literal\">true</span> </span><br><span class=\"line\">     String str5,str6;</span><br><span class=\"line\">     str5=<span class=\"string\">\"str5busy\"</span>;</span><br><span class=\"line\">     str6=<span class=\"string\">\"str6busy\"</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String5: \"</span>+str5);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"String6: \"</span>+str6);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same object? \"</span>+(str5==str6));      //<span class=\"literal\">false</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Same value? \"</span>+str5.equals(str6));  //<span class=\"literal\">false</span> \t</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">equals示例2：</span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\">public class EqualsTest &#123;</span><br><span class=\"line\">     public <span class=\"function\"><span class=\"title\">EqualsTest</span></span>() &#123;    &#125;    </span><br><span class=\"line\">     public static void main(String[] args)&#123;</span><br><span class=\"line\">     Employee alice1=new Employee(<span class=\"string\">\"Alice\"</span>,75000,1987,12,15);</span><br><span class=\"line\">     Employee alice2=alice1;</span><br><span class=\"line\">     Employee alice3=new Employee(<span class=\"string\">\"Alice\"</span>,75000,1987,12,15);</span><br><span class=\"line\">     Employee bob=new Employee(<span class=\"string\">\"Bob\"</span>,50000,1989,10,1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"alice1==alice2: \"</span>+(alice1==alice2));    //<span class=\"literal\">true</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"alice1==alice3: \"</span>+(alice1==alice3));    //<span class=\"literal\">false</span> </span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"alice1.equals(alice3): \"</span>+alice1.equals(alice3));  //<span class=\"literal\">true</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"alice1.equals(bob): \"</span>+alice1.equals(bob));   //<span class=\"literal\">false</span> </span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"bob.toString(): \"</span>+bob);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Employee&#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private double salary;</span><br><span class=\"line\">    private Date hireDay; </span><br><span class=\"line\">    public Employee(String n,double s,int year,int month,int day)&#123;</span><br><span class=\"line\">            name=n;</span><br><span class=\"line\">            salary=s</span><br><span class=\"line\">        hireDay=new Date(year,month,day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">getName</span></span>()&#123;     <span class=\"built_in\">return</span> name;     &#125;</span><br><span class=\"line\">    public double <span class=\"function\"><span class=\"title\">getSalary</span></span>()&#123;   <span class=\"built_in\">return</span> salary;    &#125;</span><br><span class=\"line\">    public Date <span class=\"function\"><span class=\"title\">getHireDay</span></span>()&#123;   <span class=\"built_in\">return</span> hireDay; &#125;</span><br><span class=\"line\">    public void raiseSalary(double byPercent)&#123;</span><br><span class=\"line\">            double raise=salary*byPercent/100;</span><br><span class=\"line\">            salary+=raise;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean equals(Object otherObject)&#123;     //子类覆盖了Object的equals方法</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(this==otherObject) <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(otherObject==null) <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(getClass()!=otherObject.getClass())</span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  Employee other=(Employee)otherObject;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> name.equals(other.name)&amp;&amp;</span><br><span class=\"line\">              salary==other.salary&amp;&amp;hireDay.equals(other.hireDay); </span><br><span class=\"line\">                        //子类覆盖了Object的toString方法</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> public String <span class=\"function\"><span class=\"title\">toString</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> getClass().getName()+</span><br><span class=\"line\">           <span class=\"string\">\"[name=\"</span>+name+<span class=\"string\">\",salary=\"</span>+salary+<span class=\"string\">\",hireDay=\"</span>+hireDay+<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> private String name;</span><br><span class=\"line\"> private double salary;</span><br><span class=\"line\"> private Date hireDay;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"二、-内部类\"><a href=\"#二、-内部类\" class=\"headerlink\" title=\"二、 内部类\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二、 内部类</font></h3><h4 id=\"2-1-内部类的定义与使用\"><a href=\"#2-1-内部类的定义与使用\" class=\"headerlink\" title=\"2.1  内部类的定义与使用\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.1  内部类的定义与使用</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. 📒内部类的定义：</strong></font>将类的定义置入一个用于封装它的类（外部类）里。<br>    <font color=\"#00B2EE\"><strong>注意：</strong></font><br>    内部类不能与外部类同名（否则，编译器无法区分内部类与外部类），如果内部类还有内部类，内部类的内部类不能与它的任何一层外部类同名。<br>    <font color=\"#00B2EE\"><strong>作用：</strong></font><br>    逻辑分组, 隐藏细节<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*内部类结合多态可以很方便的隐藏类的细节(包括类名)</span><br><span class=\"line\">*/</span><br><span class=\"line\">interface Contents&#123;</span><br><span class=\"line\">  int value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Destination &#123;</span><br><span class=\"line\">  String readLabel();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Goods&#123;</span><br><span class=\"line\">    private class Content implements Contents&#123;  //<span class=\"string\">\"private class Contentimplements Contents\"</span> </span><br><span class=\"line\">        private int i=11;</span><br><span class=\"line\">        public int <span class=\"function\"><span class=\"title\">value</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    protected class GDestination    //<span class=\"string\">\"protected class GDestination implements Destination\"</span></span><br><span class=\"line\">    implements Destination&#123;</span><br><span class=\"line\">      private String label;</span><br><span class=\"line\">  private GDestination(String whereTo)&#123;</span><br><span class=\"line\">    label=whereTo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">public String <span class=\"function\"><span class=\"title\">readLabel</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> label;&#125;&#125;</span><br><span class=\"line\">public Contents <span class=\"function\"><span class=\"title\">cont</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Content();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">public Destination dest(String s)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new GDestination(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">public class TestGoods &#123;   //<span class=\"string\">\"public class TestGoods\"</span></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">         Goods g=new Goods();</span><br><span class=\"line\">         Contents c=g.cont();</span><br><span class=\"line\">         Destination d=g.dest(<span class=\"string\">\"Beijing\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>2. 📒内部类对象的创建：</strong></font>创建非静态内部类的对象时一定要确保已经有一个外部类对象。<br>(1) 利用外部类的方法创建并返回，因为方法是由外部类对象调用的，那创建该内部类对象时，一定已经拥有了所属的外部类对象了<br>public Contents cont(){  &emsp;&emsp;&emsp;&emsp;       Goods g=new Goods();<br>  return new Content();  &emsp;&emsp;&emsp;&emsp;&ensp;        Contents c=g.cont();<br>}<br><br>(2) 创建内部类还可以在除外部类中的其它类中，但是要确保该类具有访问内部类的权限，并且已经创建了一个外部类对象。格式如下：<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outerObject=new outerClass(Constructor Parameters);</span><br><span class=\"line\">outerClass.innerClass innerObject = outerObject.new InnerClass(Constructor Parameters);</span><br><span class=\"line\"></span><br><span class=\"line\"> Goods g1=new Goods();</span><br><span class=\"line\"> Goods.Content c1=g.new Content(); </span><br><span class=\"line\">OR</span><br><span class=\"line\"> Goods g1=new Goods();</span><br><span class=\"line\"> Goods.GDestination d1=g1.new GDestionation();</span><br></pre></td></tr></table></figure>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>3. 📒内部类的修饰符：</strong></font><br>（1）<font color=\"red\"><strong>public、protected、private和缺省：</strong></font>访问权限修饰符，用来限定内部类的访问权限，<br>  &emsp;&emsp;一般的外部类是不能用protected和private修饰的。访问权限修饰符的限定和成员变量的限定一样。<br>（2）<font color=\"red\"><strong>final:</strong></font>表明内部类不能继承。<br>（3）<font color=\"red\"><strong>abstract：</strong></font>抽象内部类，不能被实例化。<br>（4）<font color=\"red\"><strong>static：</strong></font>表明一个静态内部类。<br><br><font face=\"Comic sans MS\"><font color=\"red\"><strong>4. 📒静态内部类：</strong></font><br><strong>和普通的非静态内部类有较大的不同，使用时要遵循如下原则：</strong><br>（1）实例化static内部类时，在new前面不需要用对象变量；<br><font color=\"red\"><strong>（2）static内部类中不能访问其外部类的非static属性及方法，即只能访问static成员；<br>（3）static方法中不能访问非static的属性及方法，也不能不带前缀地new一个非static的内部类。</strong></font><br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      private int x;</span><br><span class=\"line\">      void <span class=\"function\"><span class=\"title\">m</span></span>()&#123;</span><br><span class=\"line\">  new B();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     static void <span class=\"function\"><span class=\"title\">sm</span></span>()&#123;</span><br><span class=\"line\">      //在外部类的静态方法中</span><br><span class=\"line\">     //不能直接创建内部类对象</span><br><span class=\"line\">     //new B();//!!error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">class B</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">B</span></span>()&#123;x=5;&#125;</span><br><span class=\"line\">  &#125;//B类结束</span><br><span class=\"line\">&#125;//A类结束</span><br><span class=\"line\">class Outer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  static class Inner</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestInnerStatic</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public static void main(String[] args)  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    //创建非静态内部类B的对象a_b和ab</span><br><span class=\"line\">    A.B a_b=new A().new B();</span><br><span class=\"line\">    A a=new A();</span><br><span class=\"line\">    A.B ab=a.new B();</span><br><span class=\"line\">    </span><br><span class=\"line\">    //创建静态内部类Inner的对象oi，不需要外部类Outer的对象</span><br><span class=\"line\">    Outer.Inner oi=new Outer.Inner();</span><br><span class=\"line\">    //Outer.Inner oi2=Outer.new Inner();//!!error</span><br><span class=\"line\">    //Outer.Inner oi3=new Outer().new Inner();//!!error</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>5. 📒内部类中访问外部类的成员：</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> \n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-2-方法和作用域中的内部类\"><a href=\"#2-2-方法和作用域中的内部类\" class=\"headerlink\" title=\"2.2  方法和作用域中的内部类\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.2  方法和作用域中的内部类</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>内部类也可以是局部的，它可以定义在一个方法甚至一个代码块之内。</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> \n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例1: 方法中的内部类:</span><br><span class=\"line\">interface Destination &#123;</span><br><span class=\"line\">  String readLabel();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Goods2 &#123;</span><br><span class=\"line\">  String a=<span class=\"string\">\"Goods2\"</span>;</span><br><span class=\"line\">     public Destination dest(String s) &#123;</span><br><span class=\"line\">          class GDestination implements Destination &#123;</span><br><span class=\"line\">            private String label;</span><br><span class=\"line\">            private GDestination(String whereTo) &#123;</span><br><span class=\"line\">             label = whereTo;</span><br><span class=\"line\">             System.out.println(<span class=\"string\">\"access outer class:\"</span>+a);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               public String <span class=\"function\"><span class=\"title\">readLabel</span></span>() &#123; <span class=\"built_in\">return</span> label; &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">return</span> new GDestination(s);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">          Goods2 g= new Goods2();</span><br><span class=\"line\">          Destination d = g.dest(<span class=\"string\">\"Beijing\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*在方法dest（）中定义了一个内部类，最后由这个方法返回这个内部类的对象。如果在用一个内部类的时候仅需要创建它的一个对象并传给外部，就可以这样做。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>方法中定义内部类的注意点:</strong></font><br> (1) 方法中定义的类，在其它地方使用时，没有类的名字，一般用其父类来引用这样的变量。<br> (2) 同局部变量一样，方法中的内部类前面不能用public，private，protected修饰，也不能用static修饰，但可以被final或abstract修饰。<br> (3) 方法中的内部类，可以访问其外部类的成员;若是static方法中的内部类，可以访问外部类的static成员。<br> (4) 方法中的内部类中，不能访问该方法的局部变量，除非是final的局部变量。<br></font>\n\n<p>&emsp;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例2: 作用域中的内部类:</span><br><span class=\"line\">public class Goods3&#123;</span><br><span class=\"line\">     private void internalTracking(boolean b) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(b) &#123;</span><br><span class=\"line\">               class TrackingSlip &#123;</span><br><span class=\"line\">                    private String id;</span><br><span class=\"line\">                    TrackingSlip(String s) &#123;</span><br><span class=\"line\">                         id = s;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    String <span class=\"function\"><span class=\"title\">getSlip</span></span>() &#123; <span class=\"built_in\">return</span> id; &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">              TrackingSlip ts = new TrackingSlip(<span class=\"string\">\"slip\"</span>);</span><br><span class=\"line\">               String s = ts.getSlip();</span><br><span class=\"line\">          &#125; </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> public void <span class=\"function\"><span class=\"title\">track</span></span>() &#123; internalTracking(<span class=\"literal\">true</span>); &#125;</span><br><span class=\"line\">     public static void main(String[] args) &#123;</span><br><span class=\"line\">          Goods3 g= new Goods3();</span><br><span class=\"line\">          g.track();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-3-匿名内部类\"><a href=\"#2-3-匿名内部类\" class=\"headerlink\" title=\"2.3  匿名内部类 \"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  匿名内部类 </font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>匿名类：</strong></font> 类或方法中定义的一种没有类名的特殊内部类。<br><font color=\"red\"><strong>作用：</strong></font>当需要创建一个类的对象而且用不上它的名字时，使用内部类可以使代码看上去简洁清楚。<br><font color=\"red\"><strong>语法规则如下：</strong></font><br>       new interfacename(){……};<br>      或new superclassname(){……};<br><br><font color=\"red\"><strong>注意：</strong></font><br> (1) 这种类不取名字，而直接用其父类的名字或者它所实现的接口的名字；<br> (2) 类的定义与创建该类的一个对象同时进行，即类的定义前面有一个new，没有类的首部，对象的创建和类体共同构成一个匿名类表达式，后面以“;”结束；<br> (3) 类中不能定义构造方法，因为它没有名字。<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Contents&#123;</span><br><span class=\"line\">  int value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Goods4 &#123;</span><br><span class=\"line\">     public Contents <span class=\"function\"><span class=\"title\">cont</span></span>()&#123;</span><br><span class=\"line\">          //返回匿名类对象，该匿名类继承了Contents接口</span><br><span class=\"line\">          <span class=\"built_in\">return</span> new <span class=\"function\"><span class=\"title\">Contents</span></span>()&#123;</span><br><span class=\"line\">               private int i = 11;</span><br><span class=\"line\">               public int <span class=\"function\"><span class=\"title\">value</span></span>() &#123; </span><br><span class=\"line\">                    <span class=\"built_in\">return</span> i; </span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> public static void main(String[] args)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      Goods4 g=new Goods4();</span><br><span class=\"line\">      Contents c=g.cont();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n</font>","prev":{"title":"Java-异常处理(5)","slug":"Java-Exception-Handling7"},"next":{"title":"Java接口、包(4.7-4.8)","slug":"Java-Interface-Package5"},"link":"Treecatee.gitgub.io/post/Java-Variable-InnerClass6/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java变量及其传递</font>","id":"一、-Java变量及其传递","index":"1","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  基本数据变量与引用型变量</font>","id":"1-1-基本数据变量与引用型变量","index":"1.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  成员变量与局部变量</font>","id":"1-2-成员变量与局部变量","index":"1.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.3  变量的传递</font>","id":"1-3-变量的传递","index":"1.3"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.4  引用型变量的实体值、引用值比较</font>","id":"1-4-引用型变量的实体值、引用值比较","index":"1.4"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二、 内部类</font>","id":"二、-内部类","index":"2","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.1  内部类的定义与使用</font>","id":"2-1-内部类的定义与使用","index":"2.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.2  方法和作用域中的内部类</font>","id":"2-2-方法和作用域中的内部类","index":"2.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  匿名内部类 </font>","id":"2-3-匿名内部类","index":"2.3"}]}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Java-Variable-InnerClass6/\" title=\"Java变量及其传递、内部类(4.9-4.10)\">Treecatee.gitgub.io/post/Java-Variable-InnerClass6/</a>","published":"December 27, 2018"}}