{"title":"Java变量及其传递、内部类(4.9-4.10)","date":"2018-12-27T15:27:04.000Z","thumbnail":"https://i.loli.net/2018/12/27/5c24f015bda37.jpg","slug":"Java-Variable-InnerClass6","tags":["Java学习"],"categories":["Java"],"updated":"2019-01-08T13:26:59.985Z","content":"<p>&emsp;<br>&emsp;</p>\n<center><font color=\"#3CB371\" face=\"Comic sans MS\" size=\"5\"><strong>变量及其传递 &amp; 内部类</strong></font></center>\n\n<p>&emsp;</p>\n<h3 id=\"一、-Java变量及其传递\"><a href=\"#一、-Java变量及其传递\" class=\"headerlink\" title=\"一、 Java变量及其传递\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java变量及其传递</font></h3><h4 id=\"1-1-基本数据变量与引用型变量\"><a href=\"#1-1-基本数据变量与引用型变量\" class=\"headerlink\" title=\"1.1  基本数据变量与引用型变量\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  基本数据变量与引用型变量</font></h4><font face=\"Comic sans MS\"><strong>1.  📒Java变量:</strong><br>&emsp;<font color=\"red\"><strong>(1). 基本型变量(8种)</strong></font><br>&emsp;&emsp; <strong>char,byte,short,int,long,float,double,boolean</strong><br>&emsp;<font color=\"red\"><strong>(2). 引用型变量：</strong></font><strong>对象,接口,数组</strong></font>            \n\n<p><img src=\"https://i.loli.net/2018/12/27/5c24f23dc321f.png\" alt=\"T2.png\"><br><img src=\"https://i.loli.net/2018/12/27/5c24f4379eed2.png\" alt=\"N.png\"></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">举例：\n    public class MyDate<span class=\"token punctuation\">{</span>\n    private int day<span class=\"token operator\">=</span>12<span class=\"token punctuation\">;</span>\n    private int month<span class=\"token operator\">=</span>6<span class=\"token punctuation\">;</span>\n    private int year<span class=\"token operator\">=</span>1900<span class=\"token punctuation\">;</span>\n    public MyDate<span class=\"token punctuation\">(</span>int y,int m,int d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        year<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n        month<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>\n        day<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n          void addYear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>   year++<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n         public void display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    System.out.println<span class=\"token punctuation\">(</span>year+<span class=\"token string\">\"-\"</span>+month\n             +<span class=\"token string\">\"-\"</span>+day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       MyDate m,n<span class=\"token punctuation\">;</span>\n       m<span class=\"token operator\">=</span>new MyDate<span class=\"token punctuation\">(</span>2003,9,22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       n<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>     <span class=\"token string\">\"//n和m指向同一个地址\"</span>\n       n.addYear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       m.display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       n.display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       System.out.println<span class=\"token punctuation\">(</span>m.toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n       System.out.println<span class=\"token punctuation\">(</span>n.toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n      /*运行结果\n       2004-9-22\n       2004-9-22\n       MyDate@11a698a\n       MyDate@11a698a\n      */\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-2-成员变量与局部变量\"><a href=\"#1-2-成员变量与局部变量\" class=\"headerlink\" title=\"1.2  成员变量与局部变量\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  成员变量与局部变量</font></h4><div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>成员变量与局部变量有没有区别?</strong></font><br>  成员变量若为static的称为类变量，否则称为成员变量，而局部变量是在方法体内的变量。<br> (1) 📒从语法形式上看，成员变量是属于类或接口的，而局部变量是在方法中定义的变量或方法的参变量；<br> 成员变量可以被public，private，static等修饰，而局部变量则不能被访问控制符及static修饰；成员<br> 变量及局部变量都可以被final修饰。<br>(2) 📒从变量在内存中的存储方式看，成员变量是对象的一部分，而对象是存在于堆中的，而局部变量是<br>     存在于栈中的。<br>(3) 📒从变量在内存中的存在时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变<br>     量随着方法的调用而产生，随着方法调用结束而自动消失。<br>(4) 📒成员变量如果没有赋初值，则会自动以该类型的默认值（0,false,null等）赋值；而局部变量则不会<br>     自动赋值，必须显示地赋值后才能使用。<br></font></td></tr></table></div></div>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">class A<span class=\"token punctuation\">{</span>\n         int a<span class=\"token punctuation\">;</span>\n         void m<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            int b<span class=\"token punctuation\">;</span>\n            System.out.println<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //合法的，a的值为0\n            System.out.println<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //不合法，编译不通过\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-3-变量的传递\"><a href=\"#1-3-变量的传递\" class=\"headerlink\" title=\"1.3  变量的传递\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.3  变量的传递</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. 📒按值传递:</strong></font>当将一个参数传递给一个函数时，函数接收的是原始值的一个副本。因此，如果函数修改了该参数，仅改变副本，而原始值保持不变。(传递8种基本型变量)<br><font color=\"red\"><strong>2. 📒按引用传递:</strong></font>当将一个参数传递给一个函数时，函数接收的原始值的内存地址，而不是值的副本，因此，如果修改了该参数，调用代码中的原始值也随之改变。(传递对象,接口,数组)<br><font color=\"#00B2EE\"><em>Java中的参数传递比C++简单,按值传递所有参数,制作所有参数的副本,而不管它们的类型。</em></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例1：\nclass TestTransOfValue\n<span class=\"token punctuation\">{</span>\n  public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    int val<span class=\"token punctuation\">;</span>\n    StringBuffer sb1, sb2<span class=\"token punctuation\">;</span>\n    val <span class=\"token operator\">=</span> 10<span class=\"token punctuation\">;</span>\n    sb1 <span class=\"token operator\">=</span> new StringBuffer<span class=\"token punctuation\">(</span><span class=\"token string\">\"apples\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sb2 <span class=\"token operator\">=</span> new StringBuffer<span class=\"token punctuation\">(</span><span class=\"token string\">\"pears\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"val is \"</span> + val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"sb1 is \"</span> + sb1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"sb2 is \"</span> + sb2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSystem.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"calling modify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    //按值传递所有参数\n    modify<span class=\"token punctuation\">(</span>val, sb1, sb2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"returned from modify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"val is \"</span> + val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"sb1 is \"</span> + sb1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"sb2 is \"</span> + sb2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\npublic static void modify<span class=\"token punctuation\">(</span>int a, StringBuffer r1,\n                         StringBuffer r2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"in modify...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    //在方法中修改基本类型变量的值\n    a <span class=\"token operator\">=</span> 0<span class=\"token punctuation\">;</span>  \n    //在方法中修改对象引用值的副本\n    r1 <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>  //1\n    //在方法中修改副本的对象实体值\n    r2.append<span class=\"token punctuation\">(</span><span class=\"token string\">\" taste good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"a is \"</span> + a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"r1 is \"</span> + r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"r2 is \"</span> + r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n运行后输出：\nval is 10\nsb1 is apples\nsb2 is pears\ncalling modify <span class=\"token keyword\">in</span> modify<span class=\"token punctuation\">..</span>.\na is 0\nr1 is null\nr2 is pears taste good \nreturned from modify\nval is 10\nsb1 is apples\nsb2 is pears taste good \n/*关于这里的sb1和r1：\n当参数传到modify后，r1和sb1指向同一个地址，若改变了r1指向的地址，并不会更改sb1指向的地址。这个时候就\n相当于看作两个指针了。\n关于sb2和r2：\nsb2和r2指向同一个地址，这个地址指向的值<span class=\"token punctuation\">(</span>实体值<span class=\"token punctuation\">)</span>被改变了，则结束后sb2和r2的实体值也就相应的改变了。\n*/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2018/12/28/5c2500f374fbd.png\" alt=\"FX.png\"></p></div>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例2：\nclass Swap\n<span class=\"token punctuation\">{</span> \n public static void main<span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Integer a, b<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> new Integer<span class=\"token punctuation\">(</span>10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> new Integer<span class=\"token punctuation\">(</span>50<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"before swap...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"a is \"</span> + a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"b is \"</span> + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    swap<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"after swap...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"a is \"</span> + a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"b is \"</span> + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n public static void swap<span class=\"token punctuation\">(</span>Integer a, Integer b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Integer temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"in swap...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"a is \"</span> + a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"b is \"</span> + b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n/*\n运行后输出：\nbefore swap<span class=\"token punctuation\">..</span>.\na is 10\nb is 50\n<span class=\"token keyword\">in</span> swap…\na is 50\nb is 10\nafter swap<span class=\"token punctuation\">..</span>.\na is 10\nb is 50 \n*/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>参数传递总结：</strong></font><br> (1) Java按值传递所有参数,制作所有参数的副本,而不管它们的类型<br> (2) 对于基本类型的变量形参修改了并不能反映到函数外面的实参<br> (3) 对于引用类型的变量，在形参中修改了对象实体值可以反映到实参，在形参中修改了对象引用值，<br>     不能反映到实参<br></font></td></tr></table></div></div>\n\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-4-引用型变量的实体值、引用值比较\"><a href=\"#1-4-引用型变量的实体值、引用值比较\" class=\"headerlink\" title=\"1.4  引用型变量的实体值、引用值比较\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">1.4  引用型变量的实体值、引用值比较</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. 📒参数传递总结：</strong></font><br> (1) 比较基本类型的数据: ==和!=<br> (2) 如果要比较引用型变量是否相同,可以直接用==和!=吗?<font color=\"red\">  <strong>答：不能</strong><br><br><strong>==和!=用来比较引用型变量时（只能比较引用值（地址）是不是相等）,只能判断运算符两边引用的是不是同一个对象,即对象的地址值（或对象引用值）！！！！！</strong></font><br><font color=\"#00B2EE\"><strong>如何比较两个对象的内容(对象实体值)是否相同?<br>用equls()方法：</strong></font><br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>2. 📒引用型变量比较总结：</strong></font><br> (1) 比较两个变量是否同一个对象（即对象引用值是否相同），用==和!=<br> (2) 比较两个变量的内容是否相同用equals方法<br> (3) <strong>自己定义的类如果要支持equals方法必须重写从Object类继承来的equals方法(比如前面的String类<br> 是java自己的类就不需要重写equals，但是Employee类就是自己定义的类则需要重写equals)</strong><br><br><strong>Object类中的equals方法：</strong><br> <em>public boolean equals(Object obj){<br>   return (this==obj);<br> }</em><br></font></td></tr></table></div></div>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">equals示例1:\nclass EqualsTest<span class=\"token punctuation\">{</span>\n  public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n     String str1,str2<span class=\"token punctuation\">;</span>\n     str1<span class=\"token operator\">=</span><span class=\"token string\">\"Free the bound periodicals.\"</span><span class=\"token punctuation\">;</span>\n     str2<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String1: \"</span>+str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String2: \"</span>+str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same object? \"</span>+<span class=\"token punctuation\">(</span>str1<span class=\"token operator\">==</span>str2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>      //true\n     str2<span class=\"token operator\">=</span>new String<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String1: \"</span>+str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String2: \"</span>+str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same object? \"</span>+<span class=\"token punctuation\">(</span>str1<span class=\"token operator\">==</span>str2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>      //false\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same value? \"</span>+str1.equals<span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>  //true\n     String str3,str4<span class=\"token punctuation\">;</span>\n     str3<span class=\"token operator\">=</span><span class=\"token string\">\"busy\"</span><span class=\"token punctuation\">;</span>\n     str4<span class=\"token operator\">=</span><span class=\"token string\">\"busy\"</span><span class=\"token punctuation\">;</span> //str4<span class=\"token operator\">=</span>new String<span class=\"token punctuation\">(</span><span class=\"token string\">\"busy\"</span><span class=\"token punctuation\">)</span>或str4<span class=\"token operator\">=</span>new String<span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span> \n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String3: \"</span>+str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String4: \"</span>+str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same object? \"</span>+<span class=\"token punctuation\">(</span>str3<span class=\"token operator\">==</span>str4<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>       //true\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same value? \"</span>+str3.equals<span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>   //true \n     String str5,str6<span class=\"token punctuation\">;</span>\n     str5<span class=\"token operator\">=</span><span class=\"token string\">\"str5busy\"</span><span class=\"token punctuation\">;</span>\n     str6<span class=\"token operator\">=</span><span class=\"token string\">\"str6busy\"</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String5: \"</span>+str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"String6: \"</span>+str6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same object? \"</span>+<span class=\"token punctuation\">(</span>str5<span class=\"token operator\">==</span>str6<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>      //false\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Same value? \"</span>+str5.equals<span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>  //false     \n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">equals示例2：\n<span class=\"token function\">import</span> java.util.*<span class=\"token punctuation\">;</span>\npublic class EqualsTest <span class=\"token punctuation\">{</span>\n     public EqualsTest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token punctuation\">}</span>    \n     public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     Employee alice1<span class=\"token operator\">=</span>new Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span>,75000,1987,12,15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     Employee alice2<span class=\"token operator\">=</span>alice1<span class=\"token punctuation\">;</span>\n     Employee alice3<span class=\"token operator\">=</span>new Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span>,75000,1987,12,15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     Employee bob<span class=\"token operator\">=</span>new Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span>,50000,1989,10,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"alice1==alice2: \"</span>+<span class=\"token punctuation\">(</span>alice1<span class=\"token operator\">==</span>alice2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>    //true\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"alice1==alice3: \"</span>+<span class=\"token punctuation\">(</span>alice1<span class=\"token operator\">==</span>alice3<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>    //false \n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"alice1.equals(alice3): \"</span>+alice1.equals<span class=\"token punctuation\">(</span>alice3<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>  //true\n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"alice1.equals(bob): \"</span>+alice1.equals<span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>   //false \n     System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"bob.toString(): \"</span>+bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nclass Employee<span class=\"token punctuation\">{</span>\n    private String name<span class=\"token punctuation\">;</span>\n    private double salary<span class=\"token punctuation\">;</span>\n    private Date hireDay<span class=\"token punctuation\">;</span> \n    public Employee<span class=\"token punctuation\">(</span>String n,double s,int year,int month,int day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n            salary<span class=\"token operator\">=</span>s\n        hireDay<span class=\"token operator\">=</span>new Date<span class=\"token punctuation\">(</span>year,month,day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    public String getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>     <span class=\"token punctuation\">}</span>\n    public double getSalary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token keyword\">return</span> salary<span class=\"token punctuation\">;</span>    <span class=\"token punctuation\">}</span>\n    public Date getHireDay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token keyword\">return</span> hireDay<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    public void raiseSalary<span class=\"token punctuation\">(</span>double byPercent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            double raise<span class=\"token operator\">=</span>salary*byPercent/100<span class=\"token punctuation\">;</span>\n            salary+<span class=\"token operator\">=</span>raise<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\npublic boolean equals<span class=\"token punctuation\">(</span>Object otherObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     //子类覆盖了Object的equals方法\n  if<span class=\"token punctuation\">(</span>this<span class=\"token operator\">==</span>otherObject<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  if<span class=\"token punctuation\">(</span>otherObject<span class=\"token operator\">==</span>null<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  if<span class=\"token punctuation\">(</span>getClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>otherObject.getClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  Employee other<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Employee<span class=\"token punctuation\">)</span>otherObject<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> name.equals<span class=\"token punctuation\">(</span>other.name<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>\n              salary<span class=\"token operator\">==</span>other.salary<span class=\"token operator\">&amp;&amp;</span>hireDay.equals<span class=\"token punctuation\">(</span>other.hireDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                        //子类覆盖了Object的toString方法\n <span class=\"token punctuation\">}</span>\n public String toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> getClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>+\n           <span class=\"token string\">\"[name=\"</span>+name+<span class=\"token string\">\",salary=\"</span>+salary+<span class=\"token string\">\",hireDay=\"</span>+hireDay+<span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n private String name<span class=\"token punctuation\">;</span>\n private double salary<span class=\"token punctuation\">;</span>\n private Date hireDay<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"二、-内部类\"><a href=\"#二、-内部类\" class=\"headerlink\" title=\"二、 内部类\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二、 内部类</font></h3><h4 id=\"2-1-内部类的定义与使用\"><a href=\"#2-1-内部类的定义与使用\" class=\"headerlink\" title=\"2.1  内部类的定义与使用\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.1  内部类的定义与使用</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>1. 📒内部类的定义：</strong></font>将类的定义置入一个用于封装它的类（外部类）里。<br>    <font color=\"#00B2EE\"><strong>注意：</strong></font><br>    内部类不能与外部类同名（否则，编译器无法区分内部类与外部类），如果内部类还有内部类，内部类的内部类不能与它的任何一层外部类同名。<br>    <font color=\"#00B2EE\"><strong>作用：</strong></font><br>    逻辑分组, 隐藏细节<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">/*内部类结合多态可以很方便的隐藏类的细节<span class=\"token punctuation\">(</span>包括类名<span class=\"token punctuation\">)</span>\n*/\ninterface Contents<span class=\"token punctuation\">{</span>\n  int value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ninterface Destination <span class=\"token punctuation\">{</span>\n  String readLabel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nclass Goods<span class=\"token punctuation\">{</span>\n    private class Content implements Contents<span class=\"token punctuation\">{</span>  //<span class=\"token string\">\"private class Contentimplements Contents\"</span> \n        private int i<span class=\"token operator\">=</span>11<span class=\"token punctuation\">;</span>\n        public int value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n    protected class GDestination    //<span class=\"token string\">\"protected class GDestination implements Destination\"</span>\n    implements Destination<span class=\"token punctuation\">{</span>\n      private String label<span class=\"token punctuation\">;</span>\n  private GDestination<span class=\"token punctuation\">(</span>String whereTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    label<span class=\"token operator\">=</span>whereTo<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\npublic String readLabel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> label<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\npublic Contents cont<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> new Content<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\npublic Destination dest<span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> new GDestination<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\npublic class TestGoods <span class=\"token punctuation\">{</span>   //<span class=\"token string\">\"public class TestGoods\"</span>\n    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         Goods g<span class=\"token operator\">=</span>new Goods<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Contents c<span class=\"token operator\">=</span>g.cont<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         Destination d<span class=\"token operator\">=</span>g.dest<span class=\"token punctuation\">(</span><span class=\"token string\">\"Beijing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>2. 📒内部类对象的创建：</strong></font>创建非静态内部类的对象时一定要确保已经有一个外部类对象。<br>(1) 利用外部类的方法创建并返回，因为方法是由外部类对象调用的，那创建该内部类对象时，一定已经拥有了所属的外部类对象了<br>public Contents cont(){  &emsp;&emsp;&emsp;&emsp;       Goods g=new Goods();<br>  return new Content();  &emsp;&emsp;&emsp;&emsp;&ensp;        Contents c=g.cont();<br>}<br><br>(2) 创建内部类还可以在除外部类中的其它类中，但是要确保该类具有访问内部类的权限，并且已经创建了一个外部类对象。格式如下：<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">outerObject<span class=\"token operator\">=</span>new outerClass<span class=\"token punctuation\">(</span>Constructor Parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nouterClass.innerClass innerObject <span class=\"token operator\">=</span> outerObject.new InnerClass<span class=\"token punctuation\">(</span>Constructor Parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n Goods g1<span class=\"token operator\">=</span>new Goods<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Goods.Content c1<span class=\"token operator\">=</span>g.new Content<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nOR\n Goods g1<span class=\"token operator\">=</span>new Goods<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Goods.GDestination d1<span class=\"token operator\">=</span>g1.new GDestionation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>3. 📒内部类的修饰符：</strong></font><br>（1）<font color=\"red\"><strong>public、protected、private和缺省：</strong></font>访问权限修饰符，用来限定内部类的访问权限，<br>  &emsp;&emsp;一般的外部类是不能用protected和private修饰的。访问权限修饰符的限定和成员变量的限定一样。<br>（2）<font color=\"red\"><strong>final:</strong></font>表明内部类不能继承。<br>（3）<font color=\"red\"><strong>abstract：</strong></font>抽象内部类，不能被实例化。<br>（4）<font color=\"red\"><strong>static：</strong></font>表明一个静态内部类。<br><br><font face=\"Comic sans MS\"><font color=\"red\"><strong>4. 📒静态内部类：</strong></font><br><strong>和普通的非静态内部类有较大的不同，使用时要遵循如下原则：</strong><br>（1）实例化static内部类时，在new前面不需要用对象变量；<br><font color=\"red\"><strong>（2）static内部类中不能访问其外部类的非static属性及方法，即只能访问static成员；<br>（3）static方法中不能访问非static的属性及方法，也不能不带前缀地new一个非static的内部类。</strong></font><br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">class A\n<span class=\"token punctuation\">{</span>\n      private int x<span class=\"token punctuation\">;</span>\n      void m<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  new B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n     static void sm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      //在外部类的静态方法中\n     //不能直接创建内部类对象\n     //new B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token operator\">!</span><span class=\"token operator\">!</span>error\n    <span class=\"token punctuation\">}</span>\nclass B\n<span class=\"token punctuation\">{</span>\n      B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span>5<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>//B类结束\n<span class=\"token punctuation\">}</span>//A类结束\nclass Outer\n<span class=\"token punctuation\">{</span>\n  static class Inner\n  <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nclass TestInnerStatic\n<span class=\"token punctuation\">{</span>\n  public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">{</span>\n    //创建非静态内部类B的对象a_b和ab\n    A.B a_b<span class=\"token operator\">=</span>new A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.new B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    A a<span class=\"token operator\">=</span>new A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    A.B ab<span class=\"token operator\">=</span>a.new B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    //创建静态内部类Inner的对象oi，不需要外部类Outer的对象\n    Outer.Inner oi<span class=\"token operator\">=</span>new Outer.Inner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    //Outer.Inner oi2<span class=\"token operator\">=</span>Outer.new Inner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token operator\">!</span><span class=\"token operator\">!</span>error\n    //Outer.Inner oi3<span class=\"token operator\">=</span>new Outer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.new Inner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token operator\">!</span><span class=\"token operator\">!</span>error\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>5. 📒内部类中访问外部类的成员：</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> \n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-2-方法和作用域中的内部类\"><a href=\"#2-2-方法和作用域中的内部类\" class=\"headerlink\" title=\"2.2  方法和作用域中的内部类\"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.2  方法和作用域中的内部类</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>内部类也可以是局部的，它可以定义在一个方法甚至一个代码块之内。</strong></font><br>(1) 内部类中是可以直接访问外部类的其他属性与方法的，即使它们是private的。<br>(2) 如果内部类中有与外部类同名的属性与方法，可以使用下面的格式来表达外部类的引用，从而区分外部类和内部类的同名的属性与方法：<br>                       outerClass.this<br></font> \n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例1: 方法中的内部类:\ninterface Destination <span class=\"token punctuation\">{</span>\n  String readLabel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npublic class Goods2 <span class=\"token punctuation\">{</span>\n  String a<span class=\"token operator\">=</span><span class=\"token string\">\"Goods2\"</span><span class=\"token punctuation\">;</span>\n     public Destination dest<span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          class GDestination implements Destination <span class=\"token punctuation\">{</span>\n            private String label<span class=\"token punctuation\">;</span>\n            private GDestination<span class=\"token punctuation\">(</span>String whereTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             label <span class=\"token operator\">=</span> whereTo<span class=\"token punctuation\">;</span>\n             System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"access outer class:\"</span>+a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n               public String readLabel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> label<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> new GDestination<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\npublic static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Goods2 g<span class=\"token operator\">=</span> new Goods2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          Destination d <span class=\"token operator\">=</span> g.dest<span class=\"token punctuation\">(</span><span class=\"token string\">\"Beijing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n/*在方法dest（）中定义了一个内部类，最后由这个方法返回这个内部类的对象。如果在用一个内部类的时候仅需要创建它的一个对象并传给外部，就可以这样做。\n*/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>方法中定义内部类的注意点:</strong></font><br> (1) 方法中定义的类，在其它地方使用时，没有类的名字，一般用其父类来引用这样的变量。<br> (2) 同局部变量一样，方法中的内部类前面不能用public，private，protected修饰，也不能用static修饰，但可以被final或abstract修饰。<br> (3) 方法中的内部类，可以访问其外部类的成员;若是static方法中的内部类，可以访问外部类的static成员。<br> (4) 方法中的内部类中，不能访问该方法的局部变量，除非是final的局部变量。<br></font>\n\n<p>&emsp;</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">例2: 作用域中的内部类:\npublic class Goods3<span class=\"token punctuation\">{</span>\n     private void internalTracking<span class=\"token punctuation\">(</span>boolean b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          if<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               class TrackingSlip <span class=\"token punctuation\">{</span>\n                    private String <span class=\"token function\">id</span><span class=\"token punctuation\">;</span>\n                    TrackingSlip<span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                         <span class=\"token function\">id</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    String getSlip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">id</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span>\n              TrackingSlip ts <span class=\"token operator\">=</span> new TrackingSlip<span class=\"token punctuation\">(</span><span class=\"token string\">\"slip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               String s <span class=\"token operator\">=</span> ts.getSlip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> \n     <span class=\"token punctuation\">}</span>\n public void track<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> internalTracking<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n     public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Goods3 g<span class=\"token operator\">=</span> new Goods3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          g.track<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-3-匿名内部类\"><a href=\"#2-3-匿名内部类\" class=\"headerlink\" title=\"2.3  匿名内部类 \"></a><font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  匿名内部类 </font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>匿名类：</strong></font> 类或方法中定义的一种没有类名的特殊内部类。<br><font color=\"red\"><strong>作用：</strong></font>当需要创建一个类的对象而且用不上它的名字时，使用内部类可以使代码看上去简洁清楚。<br><font color=\"red\"><strong>语法规则如下：</strong></font><br>       new interfacename(){……};<br>      或new superclassname(){……};<br><br><font color=\"red\"><strong>注意：</strong></font><br> (1) 这种类不取名字，而直接用其父类的名字或者它所实现的接口的名字；<br> (2) 类的定义与创建该类的一个对象同时进行，即类的定义前面有一个new，没有类的首部，对象的创建和类体共同构成一个匿名类表达式，后面以“;”结束；<br> (3) 类中不能定义构造方法，因为它没有名字。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">interface Contents<span class=\"token punctuation\">{</span>\n  int value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\npublic class Goods4 <span class=\"token punctuation\">{</span>\n     public Contents cont<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          //返回匿名类对象，该匿名类继承了Contents接口\n          <span class=\"token keyword\">return</span> new Contents<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n               private int i <span class=\"token operator\">=</span> 11<span class=\"token punctuation\">;</span>\n               public int value<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> \n               <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n      Goods4 g<span class=\"token operator\">=</span>new Goods4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Contents c<span class=\"token operator\">=</span>g.cont<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n</font>","prev":{"title":"Java-异常处理(5)","slug":"Java-Exception-Handling7"},"next":{"title":"Java接口、包(4.7-4.8)","slug":"Java-Interface-Package5"},"link":"Treecatee.gitgub.io/post/Java-Variable-InnerClass6/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一、 Java变量及其传递</font>","id":"一、-Java变量及其传递","index":"1","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.1  基本数据变量与引用型变量</font>","id":"1-1-基本数据变量与引用型变量","index":"1.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.2  成员变量与局部变量</font>","id":"1-2-成员变量与局部变量","index":"1.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.3  变量的传递</font>","id":"1-3-变量的传递","index":"1.3"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">1.4  引用型变量的实体值、引用值比较</font>","id":"1-4-引用型变量的实体值、引用值比较","index":"1.4"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二、 内部类</font>","id":"二、-内部类","index":"2","children":[{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.1  内部类的定义与使用</font>","id":"2-1-内部类的定义与使用","index":"2.1"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.2  方法和作用域中的内部类</font>","id":"2-2-方法和作用域中的内部类","index":"2.2"},{"title":"<font color=\"#20B2AA\" face=\"Comic sans MS\">2.3  匿名内部类 </font>","id":"2-3-匿名内部类","index":"2.3"}]}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Java-Variable-InnerClass6/\" title=\"Java变量及其传递、内部类(4.9-4.10)\">Treecatee.gitgub.io/post/Java-Variable-InnerClass6/</a>","published":"December 27, 2018"}}