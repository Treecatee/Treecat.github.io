{"title":"PHP-命名空间","date":"2019-02-14T02:09:57.000Z","thumbnail":"https://i.loli.net/2019/02/15/5c6651eebdaec.jpg","slug":"PHP-namespace","comments":true,"tags":["PHP语言"],"categories":["PHP"],"updated":"2019-02-26T08:25:51.253Z","content":"<p>(oﾟvﾟ)ノ<br><a id=\"more\"></a></p>\n<blockquote>\n<blockquote>\n<p><font color=\"red\">如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间</font>，与 PHP 引入命名空间概念前一样。在名称前加上前缀 \\ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此。对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p><font color=\"#00B2EE\"><strong>名称解析遵循下列规则：</strong></font></p>\n<ol>\n<li>对完全限定名称的函数，类和常量的调用在编译时解析。例如 new \\A\\B 解析为类 A\\B。</li>\n<li>所有的非限定名称和限定名称（非完全限定名称）根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\\B\\C 被导入为 C，那么对 C\\D\\e() 的调用就会被转换为 A\\B\\C\\D\\e()。</li>\n<li>在命名空间内部，所有的没有根据导入规则转换的限定名称均会在其前面加上当前的命名空间名称。例如，在命名空间 A\\B 内部调用C\\D\\e()，则 C\\D\\e() 会被转换为 A\\B\\C\\D\\e() 。</li>\n<li>非限定类名根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\\B\\C 导入为C，则 new C() 被转换为 new A\\B\\C() 。</li>\n<li>在命名空间内部（例如A\\B），对非限定名称的函数调用是在运行时解析的。例如对函数 foo() 的调用是这样解析的：<br>(1). 在当前命名空间中查找名为 A\\B\\foo() 的函数<br>(2). 尝试查找并调用 全局(global) 空间中的函数 foo()。</li>\n<li>在命名空间（例如A\\B）内部对非限定名称或限定名称类（非完全限定名称）的调用是在运行时解析的。下面是调用 new C() 及 new D\\E() 的解析过程： new C()的解析:<br>(1). 在当前命名空间中查找A\\B\\C类。<br>(2). 尝试自动装载类A\\B\\C。<br><font color=\"red\">new D\\E()的解析:</font><br>(1). 在类名称前面加上当前命名空间名称变成：A\\B\\D\\E，然后查找该类。<br>(2). 尝试自动装载类 A\\B\\D\\E。<br>为了引用全局命名空间中的全局类，必须使用完全限定名称 new \\C()。</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<hr>\n<p>&emsp;<br>&emsp;</p>\n<font face=\"Comic sans MS\">对于命名空间，官方文档已经说得很详细<font color=\"red\">[<a href=\"http://www.php.net/manual/zh/language.namespaces.rationale.php\" target=\"_blank\" rel=\"noopener\">查看</a>]</font>，我在这里做了一下实践和总结。<br><font color=\"red\">命名空间一个最明确的目的就是解决<strong>重名问题</strong></font>，PHP中不允许两个函数或者类出现相同的名字，否则会产生一个致命的错误。这种情况下只要避免命名重复就可以解决，<font color=\"red\">最常见的一种做法是约定一个前缀</font>。<br><br>例：项目中有两个模块：article和message board，它们各自有一个处理用户留言的类Comment。之后我可能想要增加对所有用户留言的一些信息统计功能，比如说我想得到所有留言的数量。这时候调用它们Comment提供的方法是很好的做法，但是同时引入各自的Comment类显然是不行的，代码会出错，在另一个地方重写任何一个Comment也会降低维护性。那这时只能重构类名，我约定了一个命名规则，在类名前面加上模块名，像这样：Article_Comment、MessageBoard_Comment<br><br>可以看到，名字变得很长，那意味着以后使用Comment的时候会写上更多的代码（至少字符多了）。并且，以后如果要对各个模块增加更多的一些整合功能，或者是互相调用，发生重名的时候就需要重构名字。当然在项目开始的时候就注意到这个问题，并规定命名规则就能很好的避免这个问题。<font color=\"red\">另一个解决方法可以考虑使用命名空间。</font>\n\n<p>&emsp;</p>\n<font color=\"#00B2EE\"><strong>注明：</strong></font><br>本文提到的常量：PHP5.3开始const关键字可以用在类的外部。const和define都是用来声明常量的（它们的区别不详述），<font color=\"red\">但是在命名空间里，define的作用是全局的，而const则作用于当前空间。</font>我在文中提到的常量是指使用const声明的常量。<br><br><br><font color=\"#00B2EE\"><strong>基础：</strong></font><br>命名空间将代码划分出不同的空间（区域），每个空间的常量、函数、类（为了偷懒，我下边都将它们称为元素）的名字互不影响， 这个有点类似我们常常提到的‘封装’的概念。<br>创建一个命名空间需要使用namespace关键字，这样：<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//创建一个名为<span class=\"token string\">'Article'</span>的命名空间\nnamespace Article<span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font color=\"red\"><strong>要注意的是，当前脚本文件的第一个命名空间前面不能有任何代码，下面的写法都是错误的：</strong></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">//例一\n//在脚本前面写了一些逻辑代码\n<span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">;</span>\nclass Comment <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\nnamespace Article<span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">//例二\n//在脚本前面输出了一些字符\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>?php\nnamespace Article<span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为什么要说第一个命名空间呢？<font color=\"red\">因为同一脚本文件中可以创建多个命名空间。</font><br>下面我创建了两个命名空间，顺便为这两个空间各自添加了一个Comment类元素：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">//创建一个名为'Article'的命名空间</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//此Comment属于Article空间的元素</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//创建一个名为'MessageBoard'的命名空间</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">MessageBoard</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//此Comment属于MessageBoard空间的元素</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br><strong>在不同空间之间不可以直接调用其它元素，需要使用命名空间的语法：</strong></p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">MessageBoard</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用当前空间（MessageBoard）的Comment类</span>\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用Article空间的Comment类</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Article<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<blockquote>\n<p>可以看到，在MessageBoard空间中调用article空间里的Comment类时，使用了一种像文件路径的语法： \\空间名\\元素名<br>除了类之外，对函数和常量的用法是一样的，下面我为两个空间创建了新的元素，并在MessageBoard空间中输出了它们的值。</p>\n</blockquote>\n</blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\nnamespace Article<span class=\"token punctuation\">;</span>\nconst PATH <span class=\"token operator\">=</span> <span class=\"token string\">'/article'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> getCommentTotal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> 100<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nclass Comment <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\nnamespace MessageBoard<span class=\"token punctuation\">;</span>\nconst PATH <span class=\"token operator\">=</span> <span class=\"token string\">'/message_board'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> getCommentTotal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> 300<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nclass Comment <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n//调用当前空间的常量、函数和类\n<span class=\"token keyword\">echo</span> PATH<span class=\"token punctuation\">;</span> ///message_board\n<span class=\"token keyword\">echo</span> getCommentTotal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //300\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> new Comment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//调用Article空间的常量、函数和类\n<span class=\"token keyword\">echo</span> \\Article\\PATH<span class=\"token punctuation\">;</span> ///article\n<span class=\"token keyword\">echo</span> \\Article\\getCommentTotal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //100\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> new \\Article\\Comment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后我的确得到了Article空间的元素数据。<br>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>子空间</strong></font><br>命名空间的调用语法像文件路径一样是有道理的，它允许我们自定义子空间来描述各个空间之间的关系。<br>抱歉我忘了说，article和message board这两个模块其实都是处于同一个blog项目内。如果用命名空间来表达它们的关系，是这样：<br></font>\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">//我用这样的命名空间表示处于blog下的article模块</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//我用这样的命名空间表示处于blog下的message board模块</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>MessageBoard</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用当前空间的类</span>\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用Blog\\Article空间的类</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Blog<span class=\"token punctuation\">\\</span>Article<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而且，子空间还可以定义很多层次，比如说 Blog\\Article\\Archives\\Date</p>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>公共空间</strong></font><br>我有一个common_inc.php脚本文件，里面有一些好用的函数和类：</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token keyword\">function</span> getIP<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\nclass FilterXSS <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\">在一个命名空间里引入这个脚本，脚本里的元素不会归属到这个命名空间。如果这个脚本里没有定义其它命名空间，它的元素就始终处于公共空间中：<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\nnamespace Blog\\Article<span class=\"token punctuation\">;</span>\n//引入脚本文件\ninclude <span class=\"token string\">'./common_inc.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$filter_XSS</span> <span class=\"token operator\">=</span> new FilterXSS<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //出现致命错误：找不到Blog\\Article\\FilterXSS类\n<span class=\"token variable\">$filter_XSS</span> <span class=\"token operator\">=</span> new \\FilterXSS<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //正确\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><br>调用公共空间的方式是直接在元素名称前加 \\ 就可以了，否则PHP解析器会认为我想调用当前空间下的元素。除了自定义的元素，还包括PHP自带的元素，都属于公共空间。<br>要提一下，其实公共空间的函数和常量不用加 \\ 也可以正常调用（不明白PHP为什么要这样做），但是为了正确区分元素，还是建议调用函数的时候加上 \\<br><br><strong>名称术语</strong><br>在说别名和导入之前，需要知道关于空间三种名称的术语，以及PHP是怎样解析它们的。官方文档说得非常好，我就直接拿来套了。<br><br>1.非限定名称，或不包含前缀的类名称，例如 $comment = new Comment();。如果当前命名空间是Blog\\Article，Comment将被解析为Blog\\Article\\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。<br><br>2.限定名称，或包含前缀的名称，例如 $comment = new Article\\Comment();。如果当前的命名空间是Blog，则Comment会被解析为Blog\\Article\\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。<br><br>3.完全限定名称，或包含了全局前缀操作符的名称，例如 $comment = new \\Article\\Comment();。在这种情况下，Comment总是被解析为代码中的文字名(literal name)Article\\Comment。<br><br>其实可以把这三种名称类比为文件名（例如 comment.php）、相对路径名（例如 ./article/comment.php）、绝对路径名（例如 /blog/article/comment.php），这样可能会更容易理解。<br><br>我用了几个示例来表示它们：<br></font>\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">//创建空间Blog</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//非限定名称，表示当前Blog空间</span>\n<span class=\"token comment\" spellcheck=\"true\">//这个调用将被解析成 Blog\\Comment();</span>\n<span class=\"token variable\">$blog_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//限定名称，表示相对于Blog空间</span>\n<span class=\"token comment\" spellcheck=\"true\">//这个调用将被解析成 Blog\\Article\\Comment();</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Article<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//类前面没有反斜杆\\</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//完全限定名称，表示绝对于Blog空间</span>\n<span class=\"token comment\" spellcheck=\"true\">//这个调用将被解析成 Blog\\Comment();</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Blog<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//类前面有反斜杆\\</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//完全限定名称，表示绝对于Blog空间</span>\n<span class=\"token comment\" spellcheck=\"true\">//这个调用将被解析成 Blog\\Article\\Comment();</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Blog<span class=\"token punctuation\">\\</span>Article<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//类前面有反斜杆\\</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//创建Blog的子空间Article</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\">其实之前我就一直在使用非限定名称和完全限定名称，现在它们终于可以叫出它们的名称了。<br><strong>别名和导入</strong><br>别名和导入可以看作是调用命名空间元素的一种快捷方式。PHP并不支持导入函数或常量。<br>它们都是通过使用use操作符来实现：<br></font>\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//创建一个BBS空间（我有打算开个论坛）</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">BBS</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//导入一个命名空间</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//导入命名空间后可使用限定名称调用元素</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Article<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//为命名空间使用别名</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span> <span class=\"token keyword\">as</span> Arte<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//使用别名代替空间名</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Arte<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//导入一个类</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//导入类后可使用非限定名称调用元素</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//为类使用别名</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article<span class=\"token punctuation\">\\</span>Comment</span> <span class=\"token keyword\">as</span> Comt<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//使用别名代替空间名</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我注意到，如果导入元素的时候，当前空间有相同的名字元素将会怎样？显然结果会发生致命错误。<br>例：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\nnamespace Blog\\Article<span class=\"token punctuation\">;</span>\nclass Comment <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\nnamespace BBS<span class=\"token punctuation\">;</span>\nclass Comment <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\nClass Comt <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n//导入一个类\nuse Blog\\Article\\Comment<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> new Comment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //与当前空间的Comment发生冲突，程序产生致命错误\n\n//为类使用别名\nuse Blog\\Article\\Comment as Comt<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$article_comment</span> <span class=\"token operator\">=</span> new Comt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //与当前空间的Comt发生冲突，程序产生致命错误\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br><strong>动态调用</strong><br>PHP提供了namespace关键字和__NAMESPACE__魔法常量动态的访问元素，__NAMESPACE__可以通过组合字符串的形式来动态访问：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PATH</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/Blog/article'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//namespace关键字表示当前空间</span>\n<span class=\"token keyword\">echo</span> <span class=\"token keyword\">namespace</span>\\<span class=\"token package\">PATH</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///Blog/article</span>\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">namespace<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//魔法常量__NAMESPACE__的值是当前空间名称</span>\n<span class=\"token keyword\">echo</span> <span class=\"token constant\">__NAMESPACE__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Blog\\Article</span>\n<span class=\"token comment\" spellcheck=\"true\">//可以组合成字符串并调用</span>\n<span class=\"token variable\">$comment_class_name</span> <span class=\"token operator\">=</span> <span class=\"token constant\">__NAMESPACE__</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">'\\Comment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$comment_class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>字符串形式调用问题<br>上面的动态调用的例子中，我们看到了字符串形式的动态调用方式，如果要使用这种方式要注意两个问题。</p>\n<font color=\"red\"><strong>1. 使用双引号的时候特殊字符可能被转义</strong></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\nnamespace Blog\\Article<span class=\"token punctuation\">;</span>\nclass name <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n//我是想调用Blog\\Article\\name\n<span class=\"token variable\">$class_name</span> <span class=\"token operator\">=</span> __NAMESPACE__ <span class=\"token keyword\">.</span> <span class=\"token string\">\"\\name\"</span><span class=\"token punctuation\">;</span> //但是\\n将被转义为换行符\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> new <span class=\"token variable\">$class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //发生致命错误\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<p><font color=\"red\"><strong>2. 不会认为是限定名称</strong></font><br>PHP在编译脚本的时候就确定了元素所在的空间，以及导入的情况。而在解析脚本时字符串形式调用只能认为是非限定名称和完全限定名称，而永远不可能是限定名称。</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//导入Common类</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article<span class=\"token punctuation\">\\</span>Common</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//我想使用非限定名称调用Blog\\Article\\Common</span>\n<span class=\"token variable\">$common_class_name</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//实际会被当作非限定名称，也就表示当前空间的Common类，但我当前类没有创建Common类</span>\n<span class=\"token variable\">$common</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$common_class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//发生致命错误：Common类不存在</span>\n<span class=\"token comment\" spellcheck=\"true\">//我想使用限定名称调用Blog\\Article\\Common</span>\n<span class=\"token variable\">$common_class_name</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Article\\Common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//实际会被当作完全限定名称，也就表示Article空间下的Common类，但我下面只定义了Blog\\Article空间而不是Article空间</span>\n<span class=\"token variable\">$common</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token variable\">$common_class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//发生致命错误：Article\\Common类不存在</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Blog<span class=\"token punctuation\">\\</span>Article</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Common</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","prev":{"title":"PHP-正则表达式","slug":"PHP-Regular-Expression"},"next":{"title":"PHP基础语法","slug":"PHP-1"},"link":"Treecatee.gitgub.io/post/PHP-namespace/","copyright":{"author":"Treecatee","link":"<a href=\"Treecatee.gitgub.io/post/PHP-namespace/\" title=\"PHP-命名空间\">Treecatee.gitgub.io/post/PHP-namespace/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}