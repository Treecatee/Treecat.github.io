{"title":"PHP-函数","date":"2019-02-15T12:25:45.000Z","thumbnail":"https://i.loli.net/2019/02/21/5c6e422e83744.jpg","slug":"PHP-function","tags":["PHP语言"],"categories":["PHP"],"updated":"2019-02-26T08:22:37.627Z","content":"<p>PHP函数分为<font color=\"red\"><strong>自定义函数</strong></font>和<font color=\"red\"><strong>系统函数</strong></font> (oﾟvﾟ)ノ</p>\n<a id=\"more\"></a>\n<p>&ensp;<br>&ensp;</p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>PHP 函数</strong></font></center>\n\n<p>&emsp;<br>&emsp;</p>\n<p>&emsp;<br>&emsp;</p>\n<h3 id=\"一-自定义函数\"><a href=\"#一-自定义函数\" class=\"headerlink\" title=\"一. 自定义函数\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一. 自定义函数</font></h3><h4 id=\"1-1-自定义函数函数基本概念\"><a href=\"#1-1-自定义函数函数基本概念\" class=\"headerlink\" title=\"1.1 自定义函数函数基本概念\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.1 自定义函数函数基本概念</font></h4><font face=\"Comic sans MS\">我们在实际开发过程当中需要有很多功能都需要反复使用到，而这些反复需要使用到的功能，我们能定义成功能（函数），就尽可能定义成功能（函数）。使用的时候，吼一下它的名字即可。<br>  那我们来学一下自定义函数的语法规定，语法规定如下：<br><font color=\"red\"><br>  function 函数名([参数名1[=值1], 参数名2[=值2], 参数名n[=值n]])<br>{<br>       函数中的功能体<br>    [return 返回值]<br>}<br></font><br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>上面的语法规定中发现了如下特点，产生如下语未能规定：</strong></font><br>1. 函数以<font color=\"red\"><strong>function</strong></font>开始<br>2. function后面接空格，空格后接函数名<br>3. 函数名与变量命名规则基本一样，但是不同的是：<font color=\"red\"><strong>函数名不区分大小写</strong></font><br>4. 所谓参数其实就是变量<br>5. 函数名后接括号，括号内跟参数，参数全都有[]（中括号）括起来了，代表参数可填可不填<br>6. 如果有参数的话，参数后可以接(＝)等号，等号接默认值。参数值也是用<a href=\"中括号\"></a>括起来的，代表选填<br>7. 函数后的参数变量，主要功能是把函数体外的变量值，传入函数体内来使用，函数体的变量和函数体外的<br>   变量通常是两个不同的变量。<br>8. 函数中的具体功能（功能体）用大括号括起来，代表这是一个函数的功能区间<br>9. 函数可以有返回值也可以没有返回值，用[]（中括号）括起来的，代表选填。<br>10. return后接空格，空格后接返回值，若有return,return后的代码均不执行。(<font color=\"red\"><strong>return可用可不用</strong></font>)<br>11. 函数的执行没有顺序关系，可以在定义处之前的位置调用<br>12. 函数不能被定义两次，即函数不能被重载<br></font></td></tr></table></div></div>\n\n<p>&emsp;</p>\n<blockquote>\n<font color=\"#00B2EE\"><strong>1. 函数是条狗，哪里调用哪里哪，它就跟着你走</strong></font><br><font color=\"#00B2EE\"><strong>2. 函数名只能是字母，数字，下划线的组合，并且之间不能包含空格，数字不能放在变量名首位。</strong></font><br><font color=\"#00B2EE\"><strong>3. 函数名与变量命名规则一样，但是不同的是：</strong><font color=\"red\"><strong>函数名不区分大小写</strong></font> </font><br><font color=\"#00B2EE\"><strong>4. 函数体的参数若是定义了，未传参数，代码会报错</strong></font><br><font color=\"#00B2EE\"><strong>5. 函数的参数如果有默认值，参数可以不填，代码也不会报错</strong></font><br><font color=\"#00B2EE\"><strong>6. 函数的参数可以写多个</strong></font><br><font color=\"#00B2EE\"><strong>7. 函数如果有默认值和无默认值的参数，通常把无默认值的参数写在最前面</strong></font><br><font color=\"#00B2EE\"><strong>8. 函数体的变量与函数体外的变量没有关系</strong></font><br><font color=\"#00B2EE\"><strong>9. 函数体中若有return,return 后的代码不执行</strong></font><br><font color=\"#00B2EE\"><strong>10. 函数执行完后,return 可把函数体内的值，带带函数体外</strong></font><br><font color=\"#00B2EE\"><strong>11. 函数的执行没有顺序关系，可以在定义处之前的位置调用</strong></font><br><font color=\"#00B2EE\"><strong>12. 函数不能重载</strong></font>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-2-回调函数\"><a href=\"#1-2-回调函数\" class=\"headerlink\" title=\"1.2 回调函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.2 回调函数</font></h4><p><strong>一个函数作为另外一个函数的</strong><font color=\"red\"><strong>参数</strong></font>。</p>\n<font face=\"Comic sans MS\">回调函数，可以配合匿名函数和变量函数实现更加优美、复杂的一种函数结构。<br>回调函数，就是在处理一个功能的时候，我让让这个功能自定义能力再强一些，我准许调用这个函数的时候，还可以传入一个函数配合、协助进行处理。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token keyword\">function</span> woziji<span class=\"token punctuation\">(</span><span class=\"token variable\">$one</span>,<span class=\"token variable\">$two</span>,<span class=\"token variable\">$func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       //我规定：检查<span class=\"token variable\">$func</span>是否是函数，如果不是函数停止执行本段代码，返回false\n       if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>is_callable<span class=\"token punctuation\">(</span><span class=\"token variable\">$func</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\n       //我把<span class=\"token variable\">$one</span>、<span class=\"token variable\">$two</span>相加，再把<span class=\"token variable\">$one</span>和<span class=\"token variable\">$two</span>传入<span class=\"token variable\">$func</span>这个函数中处理一次\n       //<span class=\"token variable\">$func</span>是一个变量函数，参见变量函数这一章\n       <span class=\"token keyword\">echo</span> <span class=\"token variable\">$one</span> + <span class=\"token variable\">$two</span> + <span class=\"token variable\">$func</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$one</span>,<span class=\"token variable\">$two</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n//我们定义几个函数试试\n<span class=\"token keyword\">function</span> plusx2<span class=\"token punctuation\">(</span> <span class=\"token variable\">$foo</span> , <span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$foo</span>+<span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span>*2<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> jian<span class=\"token punctuation\">(</span> <span class=\"token variable\">$x</span> , <span class=\"token variable\">$y</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$x</span> - <span class=\"token variable\">$y</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n//调用一下函数，woziji，向里面传入参数试试\n<span class=\"token keyword\">echo</span> woziji<span class=\"token punctuation\">(</span>20,10,<span class=\"token string\">'plusx2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//将plusx2改成jian试试结果\n<span class=\"token keyword\">echo</span> woziji<span class=\"token punctuation\">(</span>20,10,<span class=\"token string\">'jian'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>处理过程是这样的:</strong><br>    1.将20赋值给形参$one,10赋值给了$two，而plusx2或者jian这两个变量函数，赋值给了$func<br>    2.在woziji这个函数中判断plusx2或者jian是否为函数，不是函数就return false 停止执行了<br>    3.显示plusx2或者jian是函数。因此$one = 20, $two =10相加了，相加后，$one和$two又带入到了了$func($one,$two)中。<br>    4.带入至里面后而$func，是可变的，可以为plusx2或者jian。如果为plusx2的话，$one = 20,$two = 10 的这个两个结果又给        了plusx2函数里面的$foo和$bar<br>    5.$foo + $bar 乘以2后将结果返回至woziji这个函数功能体的运算处：$one + $two + $func($one,$two);<br>    6.这样得到了运算结果<br>现在我们明白了回调函数：在一个调数里面，再传入一个函数名，将函数名加上()括号。识为变量函数，配合执行。</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-3-变量函数\"><a href=\"#1-3-变量函数\" class=\"headerlink\" title=\"1.3 变量函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.3 变量函数</font></h4><font color=\"red\"><strong>function demo(){}<br>$fu = ‘demo’;<br>$fu();</strong><br></font>\n\n<p>&emsp;</p>\n<font face=\"Comic sans MS\">在之前的变量部份，我们学习了可变变量。可变函数仅仅是可变变量的一个变种、变形表达。<br><font color=\"#00B2EE\"><strong>可变函数</strong></font>，我们也会称呼为变量函数。简单回顾一下之前的知识点：<br></font>\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> \n<span class=\"token variable\">$hello</span> <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$world</span> <span class=\"token operator\">=</span> <span class=\"token string\">'你好'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//输出的结果为：你好</span>\n<span class=\"token keyword\">echo</span> $<span class=\"token variable\">$hello</span><span class=\"token punctuation\">;</span> \n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>因为$hello先被解释成了world，再world前加上$符就输出了：你好。</p>\n</blockquote>\n<p>&emsp;<br>而<font color=\"#00B2EE\"><strong>变量函数</strong></font>的用法是这样的：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">'天王盖地虎'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">'小鸡炖蘑菇'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$fu</span> <span class=\"token operator\">=</span> <span class=\"token string\">'demo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//把$fu变为了demo,把demo后加上了一个括号，就执行函数了</span>\n<span class=\"token variable\">$fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//把$fu的值改为test字符串再试试？</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-4-匿名函数\"><a href=\"#1-4-匿名函数\" class=\"headerlink\" title=\"1.4 匿名函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.4 匿名函数</font></h4><p><strong>匿名函数，也就是</strong><font color=\"red\"><strong>没有函数名的函数。</strong></font></p>\n<p>匿名函数的第一种用法，直接把赋数赋值给变量，调用变量即为调用函数。<br>匿名函数的写法比较灵活。</p>\n<font color=\"#00B2EE\"><strong>1.变量函数式的匿名函数</strong></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$greet</span> <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">echo</span> <span class=\"token variable\">$name</span><span class=\"token keyword\">.</span><span class=\"token string\">'，你好'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'明天'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PHP中文网'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上例中的函数体没有函数名，通过$greent加上括号来调用的，这就是匿名函数。</p>\n</blockquote>\n<p>&emsp;</p>\n<font color=\"#00B2EE\"><strong>2.回调式的匿名函数</strong></font><br>实际使用场景中，我们要通过一个函数实现更多的功能。但是，我又不想专门定义一个函数。我们回顾一下，我们回调函数的例子：<br><br><font face=\"Comic sans MS\"></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token keyword\">function</span> woziji<span class=\"token punctuation\">(</span><span class=\"token variable\">$one</span>,<span class=\"token variable\">$two</span>,<span class=\"token variable\">$func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       //我规定：检查<span class=\"token variable\">$func</span>是否是函数，如果不是函数停止执行本段代码，返回false\n       if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>is_callable<span class=\"token punctuation\">(</span><span class=\"token variable\">$func</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n       //我把<span class=\"token variable\">$one</span>、<span class=\"token variable\">$two</span>相加，再把<span class=\"token variable\">$one</span>和<span class=\"token variable\">$two</span>传入<span class=\"token variable\">$func</span>这个函数中处理一次\n       //<span class=\"token variable\">$func</span>是一个变量函数，参见变量函数这一章\n       <span class=\"token keyword\">echo</span> <span class=\"token variable\">$one</span> + <span class=\"token variable\">$two</span> + <span class=\"token variable\">$func</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$one</span>,<span class=\"token variable\">$two</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nwoziji<span class=\"token punctuation\">(</span>20,30,function<span class=\"token punctuation\">(</span> <span class=\"token variable\">$foo</span> , <span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n               <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$foo</span>+<span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span>*2<span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>仔细推理一下过程哟。只不过在之前的章节当中，plusx2换成了我们的匿名函数：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\nfunction<span class=\"token punctuation\">(</span> <span class=\"token variable\">$foo</span> , <span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n       <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$foo</span>+<span class=\"token variable\">$bar</span><span class=\"token punctuation\">)</span>*2<span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>因此，函名函数在调用的时候没有函数名。我们可以采用以上的一些方法来使用匿名函数。</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-5-内部函数\"><a href=\"#1-5-内部函数\" class=\"headerlink\" title=\"1.5 内部函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.5 内部函数</font></h4><p><strong>内部函数，是指</strong><font color=\"red\"><strong>在函数内部又声明了一个函数。</strong></font></p>\n<font face=\"Comic sans MS\"><strong>注意事项：</strong><br>1. 内部函数名，不能是已存在的函数名<br>2. 假设在函数a里面定义了一个内部函数，不能定用两次函数a。<br></font>\n\n<p>我们下面来看代码，你将很快的学习会：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token keyword\">function</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'我是函数foo哟，调一下我才会执行定义函数bar的过程&lt;br />'</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">function</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">echo</span> <span class=\"token string\">'在foo函数内部有个函数叫bar函数&lt;br />'</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n//现在还不能调用bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数，因为它还不存在\n//bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //如果现在调用会报错\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//现在可以调用bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数了，因为foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数的执行使得bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数变为已定义的函数\nbar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n//再调一次foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>看看是不是会报错？  会报错\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>仔细观察和实验后你会得出如下的结论：<br>   1.foo()调用两次会报错<br>   2.如果不调foo()函数无法执行bar函数，因为bar是在foo的内部</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-6-参数的引用\"><a href=\"#1-6-参数的引用\" class=\"headerlink\" title=\"1.6 参数的引用\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.6 参数的引用</font></h4><p>在变量这个函数中，我们学习了变量的引用，我们来回顾一下知识：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">.</span><span class=\"token string\">'---------'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上述知识点的在变量章节中，变量引用有讲述，是指变量$a和$b指向到了同一个存储位置，来存值。</p>\n</blockquote>\n<p>&emsp;</p>\n<font color=\"#FF7F00\"><strong>而函数的参数引用，也是这个意思，将形参和实参指向到同一个位置。如果形参在函数体内发生变化，那么实参的值也发生变化。我们来通过实验来看看：</strong></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token variable\">$foo</span> <span class=\"token operator\">=</span> 100<span class=\"token punctuation\">;</span>\n\n//注意：在<span class=\"token variable\">$n</span>前面加上了<span class=\"token operator\">&amp;</span>符\n<span class=\"token keyword\">function</span> demo<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n       <span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> 10<span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">return</span> <span class=\"token variable\">$n</span> + <span class=\"token variable\">$n</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">echo</span>  demo<span class=\"token punctuation\">(</span><span class=\"token variable\">$foo</span><span class=\"token punctuation\">)</span>.<span class=\"token string\">'&lt;br />'</span><span class=\"token punctuation\">;</span>\n\n//你会发生<span class=\"token variable\">$foo</span>的值变为了10\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$foo</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>通过上例，我们发现实参为$foo，在调用demo的时候，<font color=\"red\"><strong>让$foo和$n指向到了同一个存储区域</strong></font>，当$n的值发生变化的时候。那么$foo的值也发生变化。</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-7-递归函数\"><a href=\"#1-7-递归函数\" class=\"headerlink\" title=\"1.7 递归函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.7 递归函数</font></h4><p>递归函数，递归只是一个名字，而递归函数的规定：<font color=\"red\"><strong>函数体内调用函数自己</strong></font>。<br>递归在实际工作中主要是用在：<font color=\"red\"><strong>文件和文件夹操作</strong></font>的时候有使用到。</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>几个思维上的盲区：</strong></font><br>  1.代码是从上到下执行的，所有代码没有exit等停止符，函数必须执行完。<br>  2.如果函数从函数A跳至函数B后，必须把函数B执行完成再执行函数A余下的代码。<br>  3.递归函数必须要能执行完有结束条件，不然函数就会限入死循环。函数会永远的自我执行下去。<br></font>\n\n<p>我们来写一代码码来理解一下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$num</span> <span class=\"token operator\">=</span> 10<span class=\"token punctuation\">;</span>\n//调用一次函数A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nA<span class=\"token punctuation\">(</span><span class=\"token variable\">$num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> A<span class=\"token punctuation\">(</span> <span class=\"token variable\">$arg</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$arg</span><span class=\"token punctuation\">;</span>\n   //在函数A里面去，跑去执行函数B去了\n   B<span class=\"token punctuation\">(</span><span class=\"token variable\">$arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'我们需要不断的努力，努力到上天都为我们感动'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$arg</span><span class=\"token keyword\">.</span><span class=\"token string\">'&lt;br />'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> B<span class=\"token punctuation\">(</span> <span class=\"token variable\">$number</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">echo</span> <span class=\"token variable\">$number</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">echo</span> <span class=\"token string\">'俺是狗蛋，执行完了&lt;br />'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>结论：</strong><br>1.执行函数A到一半的时候，跑去执行了函数B<br>2.执行完函数B，先显示出来的是：“俺是狗蛋，执行完了”，接着显示的才是：“我们需要不断的努力，努力到上天都为我们感动”<br>3.也就是证明了我们所说思维盲区里面的内容，代码从上到下执行，代码必须执行完。</p>\n</blockquote>\n<p>&emsp;<br>  我们来写一个简单的递归代码,让函数自己调用自己。</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dg</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$n</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$n</span><span class=\"token punctuation\">.</span><span class=\"token string\">'&lt;br />'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$n</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token comment\" spellcheck=\"true\">//在函数体内调用了dg自己哟</span>\n       <span class=\"token function\">dg</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">echo</span> <span class=\"token string\">'--------------'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'俺是狗蛋，俺还没执行'</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$n</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">'&lt;br />'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>我们来仔细推理一次：<br>   1.第一次调用dg()，将数字$n = 2传到dg中，先显示出来了2<br>   2.然后将$n - 1 $n的值为了1<br>   3.接着判断$n 是否大于0,肯定是大于0的，所以调用递归自己，再把自己执行一次。<br>   4.而第二次在执行自己dg()的时候，而最下面的 echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘; 还没有执行到。等待执行完成后再来执行<br>   5.$n此时等于1 ，所以显示出来1。<br>   6.$n把自己减了一次，$n的结果为0<br>   7.$n大于0肯定不成立的，所以显示了一条:”————–”<br>   8.而这个时候该执行：echo ‘俺是狗蛋，俺还没执行’ . $n . ‘<br>‘;<br>   9.第二次执行dg()执行完成。第一次dg()的代码还没执行完，将第4点中的余下代码执行完。</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"1-8-静态变量\"><a href=\"#1-8-静态变量\" class=\"headerlink\" title=\"1.8 静态变量\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">1.8 静态变量</font></h4><font face=\"Comic sans MS\"><font color=\"red\"><strong>静态变量的特点是：</strong></font>声明一个静态变量，第二次调用函数的时候，静态变量不会再初始化变量，会在原值的基础上读取执行。<br>实际上:全局变量本身就是静态存储方式,<font color=\"red\"><strong>所有的全局变量都是静态变量</strong></font><br></font>\n\n<font color=\"#FF7F00\"><strong>以下讲述局部静态变量和全局静态变量：</strong></font>\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------如何理解static静态变量-----------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/** 普通局部变量 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token variable\">$loc</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//这样，如果直接不给初值0是错误的。</span>\n <span class=\"token operator\">++</span><span class=\"token variable\">$loc</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">echo</span> <span class=\"token variable\">$loc</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//1</span>\n<span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//1</span>\n<span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//1</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'===================================&lt;br/>'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/** static静态局部变量 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">static_local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">static</span> <span class=\"token variable\">$local</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//此处可以不赋0值</span>\n <span class=\"token variable\">$local</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">echo</span> <span class=\"token variable\">$local</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">static_local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//1</span>\n<span class=\"token function\">static_local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//2</span>\n<span class=\"token function\">static_local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//3</span>\n<span class=\"token comment\" spellcheck=\"true\">//echo $local; 注意虽然静态变量，但是它仍然是局部的，在外不能直接访问的。</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'=======================================&lt;br>'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/** static静态全局变量(实际上:全局变量本身就是静态存储方式,所有的全局变量都是静态变量) */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">static_global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">global</span> <span class=\"token variable\">$glo</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//此处，可以不赋值0，当然赋值0，后每次调用时其值都为0，每次调用函数得到的值都会是1，</span>\n <span class=\"token comment\" spellcheck=\"true\">//但是不能想当然的写上\"static\"加以修饰，那样是错误的.</span>\n <span class=\"token variable\">$glo</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">echo</span> <span class=\"token variable\">$glo</span> <span class=\"token punctuation\">.</span> <span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">static_global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//1</span>\n<span class=\"token function\">static_global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//2</span>\n<span class=\"token function\">static_global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//3</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>\n<h3 id=\"二-系统函数\"><a href=\"#二-系统函数\" class=\"headerlink\" title=\"二. 系统函数\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二. 系统函数</font></h3><h4 id=\"2-1-使用介绍\"><a href=\"#2-1-使用介绍\" class=\"headerlink\" title=\"2.1 使用介绍\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.1 使用介绍</font></h4><font color=\"#00B2EE\">[<a href=\"http://www.php.cn\" target=\"_blank\" rel=\"noopener\">PHP手册下载</a>]</font><br>1. 如果代码能赚钱，帮你赚钱最多的是基本语法<br>2. 如果你还在当程序员，你看手册的时间可能比你看老婆的时间还长<br><br><font face=\"Comic sans MS\">使用函数的重点是三块：<br>    1.了解函数的<font color=\"red\">功能</font>，特别是常用函数的功能<br>    2.了解函数的<font color=\"red\">参数</font><br>    3.了解函数的<font color=\"red\">返回值</font><br></font>\n\n<blockquote>\n<p>我们针对上面的三块，讲解6个函数，这6个函数，概况了函数的基本用法的全部注意事项：</p>\n<font color=\"#00B2EE\"><strong>1. 直接返回布尔型，如bool copy ()<br>2. 带有MIXED参数的函数如何调用。Mixed表示任何类型的数据。如Array_unshift()<br>3. 参数中带有&amp;符的参数，一定要传一个变量做为参数。函数里面改变了他的值。<br>4. 带有[]的参数，表示可选项。<br>5. 带有…的参数，表示可以传任意多个参数。<br>6. 带有callback的参数，表示回调函数。需要传一个函数进来。Array_map()<br>7. 函数支持的版本要了解。</strong><br></font>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1. 直接返回布尔型</strong></font><br><font color=\"red\"><strong>bool</strong></font> <strong>copy ( string $source , string $dest [, resource $context ] )</strong><br></font>\n\n<blockquote>\n<p><strong>这个函数的功能为：</strong> 拷备一个文件<br><strong>返回值为为：</strong> bool型值，就是成功返回true，失败返回false<br><strong>参数为：</strong> 两个字符串的值，一个是copy的源文件，一个为目标文件。第三个参数可选的，不常用，我们不管它。</p>\n</blockquote>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bcd.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'复制成功'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'复制失败'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>2. Mixed表示任何类型的数据。如Array_unshift()</strong></font> </font><br><font color=\"red\"><strong>int</strong></font> array_unshift ( array &amp;$array , <font color=\"red\"><strong>mixed</strong></font>  $value1 [, mixed $… ] )<br><br><font face=\"Comic sans MS\"></font>\n\n<blockquote>\n<p><strong>功能：</strong> 操作一个数组，向数组中之前插入其他类型的参数。<br><strong>返回值：</strong> <font color=\"#FF7F00\"><strong>int 类型</strong></font>，可能就是插入成功最后的个数<br><strong>参数：</strong> <font color=\"#FF7F00\"><br><strong>第一个参数为&amp;符</strong></font>，也就是在操作的过程中，改变了第一个参数的值。引用传参。也就是操作这个数组，向这个数组中传入参数。会直接改变这个数组的值。<font color=\"#FF7F00\"><br><strong>第二个参数为mixed</strong></font>，因为数组可以存入多个不同的类型.mixed是指混合的意思。因此，mixed是指可传入任意类型<font color=\"#FF7F00\"><br><strong>第三个数数加了中括号[ ]</strong></font>，我们所有遇到中括号的。都是指后面的参数可传，也可以不传。<br>第四，最后还看到了三个…(省略号)。代表可以传入任意多个参数。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$queue</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">(</span><span class=\"token string\">\"凤姐\"</span>, <span class=\"token string\">\"芙蓉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray_unshift<span class=\"token punctuation\">(</span><span class=\"token variable\">$queue</span>, <span class=\"token string\">\"杨幂\"</span>, <span class=\"token string\">\"姚晨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprint_r<span class=\"token punctuation\">(</span><span class=\"token variable\">$queue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\nArray <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 杨幂 <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 姚晨 <span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 凤姐 <span class=\"token punctuation\">[</span>3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> 芙蓉 <span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>3. 遇到callback的传函数或者匿名函数进去协助处理，让功能更强大。</strong></font><br></font><br>bool array_walk ( array &amp;$array , <font color=\"red\"><strong>callable</strong></font> $callback [, mixed $userdata = NULL ] )<br><br><font face=\"Comic sans MS\"></font>\n\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>功能：</strong></font><br>传入一个回调函数，将数组的原来的组操作，并且发生变化。<font color=\"#FF7F00\"><br><strong>返回值：</strong></font><br>bool 值 也就是意味着，提示成功或者失败<font color=\"#FF7F00\"><br><strong>参数：</strong></font><br>第一个参数是要操作的数组。<br>第二个参数是callback 代表着可以传入函数或者匿名函数。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n<span class=\"token variable\">$shuaige</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"wuyanzhu\"</span>, <span class=\"token string\">\"b\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"huangxiaoming\"</span>, <span class=\"token string\">\"c\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"ninzetao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> test_print<span class=\"token punctuation\">(</span><span class=\"token variable\">$item2</span>, <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$key</span> <span class=\"token keyword\">.</span><span class=\"token string\">\" ---\"</span><span class=\"token keyword\">.</span> strtoupper<span class=\"token punctuation\">(</span><span class=\"token variable\">$item2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">.</span> <span class=\"token string\">\"&lt;br />\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'&lt;pre>'</span><span class=\"token punctuation\">;</span>\nvar_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$shuaige</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'&lt;/pre>'</span><span class=\"token punctuation\">;</span>\n\n\narray_walk<span class=\"token punctuation\">(</span><span class=\"token variable\">$shuaige</span>, <span class=\"token string\">'test_print'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'用自定义函数test_print执行后的效果：'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'&lt;pre>'</span><span class=\"token punctuation\">;</span>\nvar_dump<span class=\"token punctuation\">(</span><span class=\"token variable\">$shuaige</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'&lt;/pre>'</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\narray<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  string<span class=\"token punctuation\">(</span>8<span class=\"token punctuation\">)</span> <span class=\"token string\">\"wuyanzhu\"</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  string<span class=\"token punctuation\">(</span>13<span class=\"token punctuation\">)</span> <span class=\"token string\">\"huangxiaoming\"</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  string<span class=\"token punctuation\">(</span>8<span class=\"token punctuation\">)</span> <span class=\"token string\">\"ninzetao\"</span>\n<span class=\"token punctuation\">}</span>\na ---WUYANZHU\nb ---HUANGXIAOMING\nc ---NINZETAO\n用自定义函数test_print执行后的效果：\narray<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  string<span class=\"token punctuation\">(</span>8<span class=\"token punctuation\">)</span> <span class=\"token string\">\"wuyanzhu\"</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  string<span class=\"token punctuation\">(</span>13<span class=\"token punctuation\">)</span> <span class=\"token string\">\"huangxiaoming\"</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  string<span class=\"token punctuation\">(</span>8<span class=\"token punctuation\">)</span> <span class=\"token string\">\"ninzetao\"</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>通过上例，我们发现数组中的每个参数和值都被修改了。上例大家只需要理解看见传callback的，需要传入函数协助处理就可以。不用理解。我们在下一章的数组部份，学习完数组，大家可以再看看。<br>函数支持的版本号很重要。</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-2-文件包含函数\"><a href=\"#2-2-文件包含函数\" class=\"headerlink\" title=\"2.2 文件包含函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.2 文件包含函数</font></h4><font face=\"Comic sans MS\">在实际开发中，常常需要把程序中的公用代码放到一个文件中，使用这些代码的文件只需要包含这个文件即可。这种方法有助于提高代码的重用性，给代码的编写与维护带来很大的便利。在PHP中， 有<br><font color=\"#00B2EE\"><strong>include</strong></font><br><font color=\"#00B2EE\"><strong>include_once</strong></font><br><font color=\"#00B2EE\"><strong>require</strong></font><br><font color=\"#00B2EE\"><strong>require_once</strong></font><br>四种方法包含一个文件。<br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">包含失败</th>\n<th style=\"text-align:left\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Inlcude</td>\n<td style=\"text-align:center\">返回一条警告</td>\n<td style=\"text-align:left\">文件继续向下执行。通常用于动态包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Require</td>\n<td style=\"text-align:center\">一个致命的错</td>\n<td style=\"text-align:left\">代码就不会继续向下执行。通常包含极为重要的文件，整个代码甭想执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Include_once</td>\n<td style=\"text-align:center\">返回一条警告</td>\n<td style=\"text-align:left\">除了原有include的功能以外，它还会做once检测，如果文件曾经已经被被包含过，不再包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Require_once</td>\n<td style=\"text-align:center\">一个致命的错</td>\n<td style=\"text-align:left\">除了原的功能一外，会做一次once</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table><tr><td bgcolor=\"#ADD8E6\"><font face=\"Comic sans MS\"><font color=\"red\"><strong>注意：</strong></font><br>1，少用_once带once，因为它会消耗更多的资源去做检测的工作。<br>2，特高级<br>Include文件只需要编译一次，因为每次包含include都会再执行一次对应的代码，如何减少include再次执行<br>时，需要重新解析的过程。<br></font></td></tr></table></div></div>\n\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1. include包含函数的功能。</strong></font><br></font><br>创建一个functions.php文件，里面写上两个函数：<font color=\"#FF6347\">(1)↓↓</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//functions.php文件\n\n<span class=\"token keyword\">function</span> demo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token string\">'cccdddd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>在functions.php的同级目录下，我再创建一个user.php文件把functions.php文件包含进来。这样我的函数就可以专门放在functions.php里面，哪儿需要用到这些函数的时候，我就从哪儿包含进来：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n//user.php\n\ninclude <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\n\n//可以直接调用\ndemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br><strong>接下来我们对比include和require：</strong><font color=\"#FF6347\">(2)↓↓</font><br>代码中，我们先用include来<strong>包含不存在</strong>的test.php文件，</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n//user.php\n\ninclude <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\ninclude <span class=\"token string\">'test.php'</span><span class=\"token punctuation\">;</span>\n\n//可以直接调用\ndemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再用require包含 不存在的test.php文件：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n//user.php\n\ninclude <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\nrequire <span class=\"token string\">'test.php'</span><span class=\"token punctuation\">;</span>\n\n//可以直接调用\ndemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><font color=\"#FF6347\"><strong>通过上例的对比我们发现：</strong></font><br>(1) 如果test.php文件不存在include 会发出警告继续执行demo()和test()函数。<br>(2) 而requre则直接报错，demo()和test()函数无法继续执行。</p>\n</blockquote>\n<p>&emsp;<br>我们通过表格知道了:<strong>inlcude</strong> 和<strong>include_once</strong>的区别在于，<font color=\"#00B2EE\"><strong>检测是否重复包含。</strong></font><font color=\"red\"><strong>如果重复包含了include_once不会再包含 对应的文件了，而include 则不管这些。有没引入过文件，都再引入一次。</strong></font>include使用两次会报错，而include_once不会报错！</p>\n<p>同样刚刚的user.php我们再实验一下,我们将functions.php包含两次，分别使用<strong>include</strong>和<strong>include_once</strong>：<font color=\"#FF6347\">(3)↓↓</font></p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n//user.php\n\n//这儿被包含了两次同样的函数定义文件哟\ninclude <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\ninclude <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\n\n//可以直接调用\ndemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n运行后系统会报错！！！\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>改为<strong>include_once</strong>再试一次：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//user.php\n\n//这儿被包含了两次同样的函数定义文件哟\ninclude_once <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\ninclude_once <span class=\"token string\">'functions.php'</span><span class=\"token punctuation\">;</span>\n\n//可以直接调用\ndemo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n运行后系统不会报错！！！\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>结论：</strong><br>我们在函数定义章节讲过，函数不能定义两次，否则会报错。<font color=\"#FF7F00\"><strong>使用include时</strong></font>，因为我们将 functions.php包含了两次所以执行了两次，<font color=\"#FF7F00\"><strong>因此报这个错误</strong></font>。<br>而<font color=\"#FF7F00\"><strong>include_once不报错</strong></font>的原因是因为：他检测了functions.php曾经包含过，不再进行包含引入了。</p>\n</blockquote>\n<font face=\"Comic sans MS\">而<strong>require</strong>和<strong>require_once</strong>的功能，大家用你最最聪明的小脑袋是不是就能推理出来了呢？require_once有两个特点：<br>1. 包含的文件必须存在，否则停止执行<br>2. 会做重复包含检查哟<br></font>\n\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-3-数学常用函数\"><a href=\"#2-3-数学常用函数\" class=\"headerlink\" title=\"2.3  数学常用函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.3  数学常用函数</font></h4><p>在PHP程序中常常需要进行数据处理运算，这就需要使用数学函数。<font color=\"#00B2EE\"><strong>数学函数是最简单、最常用的系统函数</strong></font>。本章以数学函数为例讲解系统函数的调用方法。</p>\n<p>只需要记最常用的一些即可，最常用的列表：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:left\">实例</th>\n<th style=\"text-align:left\">输入</th>\n<th style=\"text-align:left\">输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">abs()</td>\n<td style=\"text-align:center\">求绝对值</td>\n<td style=\"text-align:left\">$abs = abs(-4.2); //4.2</td>\n<td style=\"text-align:left\">数字</td>\n<td style=\"text-align:left\">绝对值数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ceil()</td>\n<td style=\"text-align:center\">进一法取整</td>\n<td style=\"text-align:left\">echo ceil(9.999); // 10</td>\n<td style=\"text-align:left\">浮点数</td>\n<td style=\"text-align:left\">进一取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">floor()</td>\n<td style=\"text-align:center\">舍去法取整</td>\n<td style=\"text-align:left\">echo floor(9.999); // 9</td>\n<td style=\"text-align:left\">浮点数</td>\n<td style=\"text-align:left\">直接舍去小数部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fmod()</td>\n<td style=\"text-align:center\">浮点数取余</td>\n<td style=\"text-align:left\">“$x = 5.7;$y = 1.3;<br>$r = fmod($x, $y);<br>// $r equals 0.5, <br>because 4 *  1.3 + 0.5 = 5.7”</td>\n<td style=\"text-align:left\">两个浮点数,x&gt;y</td>\n<td style=\"text-align:left\">浮点余数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pow()</td>\n<td style=\"text-align:center\">返回数的n次方</td>\n<td style=\"text-align:left\">echo pow(-1, 20); // 1</td>\n<td style=\"text-align:left\">基础数n次方</td>\n<td style=\"text-align:left\">乘方值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">round()</td>\n<td style=\"text-align:center\">浮点数四舍五入</td>\n<td style=\"text-align:left\">echo round(1.95583, 2);// 1.96</td>\n<td style=\"text-align:left\">一个数值</td>\n<td style=\"text-align:left\">保留小数点后多少位,默认为0,舍入后的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sqrt()</td>\n<td style=\"text-align:center\">求平方根</td>\n<td style=\"text-align:left\">echo sqrt(9); //3</td>\n<td style=\"text-align:left\">被开方的数</td>\n<td style=\"text-align:left\">平方根</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max()</td>\n<td style=\"text-align:center\">求最大值</td>\n<td style=\"text-align:left\">“echo max(1, 3, 5, 6, 7);  <br>// 7 echo max(array(2, 4, 5)); <br>// 5”</td>\n<td style=\"text-align:left\">多个数字或数组</td>\n<td style=\"text-align:left\">返回其中的最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">min()</td>\n<td style=\"text-align:center\">求最小值</td>\n<td style=\"text-align:left\">min</td>\n<td style=\"text-align:left\">多个数字或数组</td>\n<td style=\"text-align:left\">返回其中的最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mt_rand()</td>\n<td style=\"text-align:center\">更好的随机数</td>\n<td style=\"text-align:left\">echo mt_rand(0,9);//n</td>\n<td style=\"text-align:left\">最小/最大,随机数</td>\n<td style=\"text-align:left\">随机返回范围内的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rand()</td>\n<td style=\"text-align:center\">随机数</td>\n<td style=\"text-align:left\">echo rand()</td>\n<td style=\"text-align:left\">最小/最大,随机数</td>\n<td style=\"text-align:left\">随机返回范围内的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pi()</td>\n<td style=\"text-align:center\">获取圆周率值</td>\n<td style=\"text-align:left\">echo pi(); <br>// 3.1415926535898</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">获取圆周率</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-4-获取时期时间信息函数\"><a href=\"#2-4-获取时期时间信息函数\" class=\"headerlink\" title=\"2.4  获取时期时间信息函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.4  获取时期时间信息函数</font></h4><font face=\"Comic sans MS\">在正式学习日期函数前大家得了解几个概念：<br><font color=\"#00B2EE\"><strong>1. 时区</strong><br><strong>2. 世界时</strong><br><strong>3 .unix时间戳</strong></font><br></font>\n\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>时区</strong></font><br>这个概念，之前大家听说过很多。我们来啰嗦两句，我们现实生活中使用的实区，在电脑里面也是一样有规定的。<br>1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区。<br>在中国采用首都北京所在地东八区的时间为全国统一使用时间。</p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>世界时</strong></font><br>不光是天文学家使用格林尼治时间（英文简写:GMT），就是在新闻报刊上也经常出现这个名词。我们知道各地都有各地的地方时间。如果对国际上某一重大事情，用地方时间来记录，就会感到复杂不便．而且将来日子一长容易搞错。因此，天文学家就提出一个大家都能接受且又方便的记录方法，那就是以格林尼治（英国某地区）的地方时间为标准。</p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF7F00\"><strong>unix时间戳</strong></font><br>电脑本身不认识时间，我们在电脑里面设置一个时间方便运算。于是我们规定了一种计算方式，unix时间戳。<br>从Unix纪元（1970 年 1月1日零时）开始到一个时间经过的秒数。</p>\n</blockquote>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>1. 设置时区</strong></font><br>如果，我们是跨国的多语方程序，我们通常是通过在配置文件里面来写好了个时区，每次程序运行的时候。都会读取这个时区的设置，来显示时间。<br><br>设置时区的函数为：<br>1). <font color=\"red\"><strong>date_default_timezone_get()</strong></font><br>2). <font color=\"red\"><strong>date_default_timezone_set()</strong></font><br></font>\n\n<p>&emsp;</p>\n<font color=\"#FF6347\">(1)↓↓</font><br>第一个函数就不重点讲解了，比较简单。<br>用法如下：<br><font color=\"#00B2EE\"><strong>string date_default_timezone_get ( void )</strong></font><br>功能如下：<strong>取得一个脚本中所有日期时间函数所使用的默认时区</strong><br>示例：<br><font color=\"#00B2EE\"></font>\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">date_default_timezone_get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n\n输出<span class=\"token punctuation\">:</span><span class=\"token constant\">UTC</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font color=\"#FF6347\">(2)↓↓</font><br>第二个函数是重点：<br>用法如下：<br><font color=\"#00B2EE\"><strong>bool date_default_timezone_set ( string $timezone_identifier )</strong></font><br>功能如下：<strong>用于所有日期时间函数的默认时区</strong><font color=\"#00B2EE\">&emsp;[注：<a href=\"http://php.net/manual/zh/timezones.php\" target=\"_blank\" rel=\"noopener\">时区列表请详见官方手册</a>]</font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//定义一下时区常量，以后你可以放到配置文件里\ndefine<span class=\"token punctuation\">(</span><span class=\"token string\">'TIME_ZONE'</span>,<span class=\"token string\">'Asia/shanghai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//执行函数\ndate_default_timezone_set<span class=\"token punctuation\">(</span>TIME_ZONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> date<span class=\"token punctuation\">(</span><span class=\"token string\">'Y-m-d H:i:s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n输出：2019-02-17 13:03:42\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>2. time()获取当前的unix时间戳</strong></font><br>以下代码输出当前时间的Unix时间戳。<br></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n   <span class=\"token variable\">$time</span><span class=\"token operator\">=</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   print_r<span class=\"token punctuation\">(</span> <span class=\"token variable\">$time</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n程序运行结果：\n1421597858\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>3. “亚麻跌”是PHP学习时间处理的关键</strong></font><br><font color=\"red\"><strong>Y</strong></font> &emsp;英文是 year， 为年份   代表年 ——亚<br><font color=\"red\"><strong>m</strong></font> &emsp;英文代表month，为月份  代表月 ——麻<br><font color=\"red\"><strong>d</strong></font> &emsp;英文代表day， 为日期   代表日 ——跌<br><font color=\"red\"><strong>H:i:s</strong></font> &emsp;代表的是：时分秒<br><font color=\"red\"><strong>h</strong></font> &emsp;的英文为：hour 代表小时<br><font color=\"red\"><strong>i</strong></font>&emsp; 的英文为：minute 代表分钟<br><font color=\"red\"><strong>s</strong></font>&emsp; 的英文为：second 代表秒<br></font>\n\n<p>所以我们需要输出前前的年份，月份，日期的话。例如：1997年7月1日，我们就可以用到上面的三个参数。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n<span class=\"token keyword\">echo</span> date<span class=\"token punctuation\">(</span><span class=\"token string\">'Y年m月d日'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n2019年02月17日\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>写全了就是：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n\n//就可以显示出来当前的时间了哟。\n<span class=\"token keyword\">echo</span> date<span class=\"token punctuation\">(</span><span class=\"token string\">'Y-m-d H:i:s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"red\"><strong>date函数</strong></font>用于将一个时间进行格式化输出，以方便时间的显示或存储。其语法格式如下：<br><font color=\"#00B2EE\"><strong>string date ( string $forrnat [, int $timestamp] )</strong></font><br>在参数列表中:<br>$timestamp是一个时间戳，函数将这个时间戳按$format规定的格式输出。<br>如果$timestamp没有输入值，则默认为当前的时间。<br>$format是一个时间输出格式的字符串，需要使用规定的字符构造输出格式。<br></font>\n\n<p>&emsp;</p>\n<font color=\"#FF7F00\"><strong>date函数的格式参数表：</strong></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:left\">月份中的第几天，有前导零的2位数字</td>\n<td style=\"text-align:left\">01到31</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:left\">英文星期几，3个字母</td>\n<td style=\"text-align:left\">Mon到Sun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">j</td>\n<td style=\"text-align:left\">月份中的第几天，没有前导零</td>\n<td style=\"text-align:left\">1到31</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l(字母)</td>\n<td style=\"text-align:left\">英文星期几</td>\n<td style=\"text-align:left\">Sunday到 Saturday</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:left\">1格式数字表示的星期</td>\n<td style=\"text-align:left\">1（表示星期一）到7（表示星期天)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:left\">每月天数后面的英文后缀，2个字符</td>\n<td style=\"text-align:left\">st，nd，rd或者th。可以和jg一起用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">星期中的第几天，数字表示</td>\n<td style=\"text-align:left\">0（表示星期天）到 6（表示星期六）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:left\">一年中的第几天</td>\n<td style=\"text-align:left\">0到366</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:left\">年份中的第几周，每周从星期一开始</td>\n<td style=\"text-align:left\">42（当年的第42周）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:left\">月份，完整的文本格式</td>\n<td style=\"text-align:left\">January 到 December</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:left\">数字表示月份，有前导零</td>\n<td style=\"text-align:left\">01 到 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:left\">3个字母缩写表示的月份</td>\n<td style=\"text-align:left\">Jan 到Dec</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:left\">数字表示月份，没有前导零</td>\n<td style=\"text-align:left\">1 到 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">t</td>\n<td style=\"text-align:left\">给定月份所应有的天数</td>\n<td style=\"text-align:left\">28 到 31</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:left\">是否为闰年</td>\n<td style=\"text-align:left\">如果是闰年为1，否则为o</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:left\">格式年份数字</td>\n<td style=\"text-align:left\">例如2007</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:left\">4 位数字完整表示年份</td>\n<td style=\"text-align:left\">例如1999或2008</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:left\">2 位数字表示的年份</td>\n<td style=\"text-align:left\">例如99或08</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:left\">小写的上午和下午值</td>\n<td style=\"text-align:left\">am或pm</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:left\">大写的上午和下午值</td>\n<td style=\"text-align:left\">AM或PM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">g</td>\n<td style=\"text-align:left\">小时，12小时格式，没有前导零</td>\n<td style=\"text-align:left\">1到12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:left\">小时，24小时格式，没有前导零</td>\n<td style=\"text-align:left\">0 到 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:left\">有前导零的分钟数</td>\n<td style=\"text-align:left\">00 到 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:left\">秒数，有前导零</td>\n<td style=\"text-align:left\">00到59</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:left\">时区标识    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:left\">从Unix纪元开始至今的秒数</td>\n<td style=\"text-align:left\">长整型数字</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>4. getdate获取当前系统时间</strong></font><br><font color=\"red\"><strong>getdate</strong></font>用来获取当前系统的时间，或者获得一个时间戳的具体含义。时间戳是一个长整数，表示getdate的语法格式如下所示。<br><font color=\"red\"><strong>array getdate ([ int $timestamp = time() ] )</strong></font><br>函数的返回值是一个根据timestamp得到的包含有时间信息的<strong>数组</strong>。如果没有参数，则会返回当前的时间。getdate返回的数组，键名包括时间和日期的完整信息。<br></font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">secnods</td>\n<td style=\"text-align:left\">秒</td>\n<td style=\"text-align:left\">数字0到 59</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minutes</td>\n<td style=\"text-align:left\">分钟</td>\n<td style=\"text-align:left\">数字0到59</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hours</td>\n<td style=\"text-align:left\">小时</td>\n<td style=\"text-align:left\">数字 0到 23</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mday</td>\n<td style=\"text-align:left\">月份中第几天    数字</td>\n<td style=\"text-align:left\">1到 31</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wday</td>\n<td style=\"text-align:left\">星期中第几天    数字</td>\n<td style=\"text-align:left\">0（表示星期天）到6（表示星期六）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mon</td>\n<td style=\"text-align:left\">月份</td>\n<td style=\"text-align:left\">数字 1 到 12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">year</td>\n<td style=\"text-align:left\">年</td>\n<td style=\"text-align:left\">4 位数字表示的完整年份</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">yday</td>\n<td style=\"text-align:left\">一年中第几天    数字</td>\n<td style=\"text-align:left\">0到365</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">weekday</td>\n<td style=\"text-align:left\">星期几的英文</td>\n<td style=\"text-align:left\">Sunday到 Saturday</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">month</td>\n<td style=\"text-align:left\">月份的英文</td>\n<td style=\"text-align:left\">January 到 December</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">自从Unix纪元开始的秒数</td>\n<td style=\"text-align:left\">长整型数字</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>&emsp;<br>以下代码可以返回getdate 数组的详细信息。</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n   <span class=\"token variable\">$mytime</span><span class=\"token operator\">=</span><span class=\"token function\">getdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$mytime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br><strong>print_r</strong>可以输出一个数组中所有的键名与值。运行这段代码，结果如下所示。程序输出当前计算机的时间与日期详细信息：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token keyword\">Array</span>\n<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>seconds<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>            <span class=\"token comment\" spellcheck=\"true\">//秒</span>\n    <span class=\"token punctuation\">[</span>minutes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">10</span>            <span class=\"token comment\" spellcheck=\"true\">//分钟</span>\n    <span class=\"token punctuation\">[</span>hours<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">17</span>            <span class=\"token comment\" spellcheck=\"true\">//小时</span>\n    <span class=\"token punctuation\">[</span>mday<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">18</span>            <span class=\"token comment\" spellcheck=\"true\">//日</span>\n    <span class=\"token punctuation\">[</span>wday<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">0</span>            <span class=\"token comment\" spellcheck=\"true\">//星期中的第几天</span>\n    <span class=\"token punctuation\">[</span>mon<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span>            <span class=\"token comment\" spellcheck=\"true\">//月</span>\n    <span class=\"token punctuation\">[</span>year<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">2015</span>            <span class=\"token comment\" spellcheck=\"true\">//年</span>\n    <span class=\"token punctuation\">[</span>yday<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">17</span>            <span class=\"token comment\" spellcheck=\"true\">//年中的第几天</span>\n    <span class=\"token punctuation\">[</span>weekday<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> Sunday        <span class=\"token comment\" spellcheck=\"true\">//星期</span>\n    <span class=\"token punctuation\">[</span>month<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> January        <span class=\"token comment\" spellcheck=\"true\">//月份</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1421597401</span>        <span class=\"token comment\" spellcheck=\"true\">//时间戳</span>\n<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font color=\"#FF6347\">↓↓</font>理解了getdate函数和返回的数组以后，就很容易取得当前的时间信息了。下面的代码就是用getdate函数取得时间信息，调用返回时间数组的值输出时间信息。<br><font color=\"#00B2EE\"></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php \n<span class=\"token variable\">$mytime</span> <span class=\"token operator\">=</span> getdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"年 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"月 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'mon'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"日 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'mday'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"时 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hours'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"分 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'minutes'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"秒 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'seconds'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"一个小时中的第几钟 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'minutes'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"这是一分钟的第几秒 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'seconds'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"星期名称 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'weekday'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"月份名称 :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string\">'month'</span><span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"时间戳   :\"</span><span class=\"token keyword\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>.<span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n年 :2019 \n月 :2 \n日 :17 \n时 :5 \n分 :39 \n秒 :34 \n一个小时中的第几钟 :39 \n这是一分钟的第几秒 :34 \n星期名称 :Sunday \n月份名称 :February \n时间戳 :1550381974\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>5. 日期验证函数</strong></font><br><font color=\"red\"><strong>checkdate</strong></font>可以判断一个输出的日期是否有效。<br>在实际的工作中，我们需要经常用于检测常用于用户提交表单的数据验证。<br>例如：<strong>验证用户输入的时间是否正确</strong>。<br>函数的语法格式如下：<br><font color=\"red\"><strong>bool checkdate ( int $month , int $day , int $year )</strong></font><br></font><br>&emsp;<br><font color=\"red\"></font>\n\n\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkdate</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkdate</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span>\n输出结果：\n\n<span class=\"token function\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;</p>\n<font face=\"Comic sans MS\"><font color=\"#00B2EE\"><strong>6.获取本地化时间戳函数</strong></font> </font><br><strong>mktime()函数、strtotime()函数。</strong><br><font color=\"#00B2EE\">[注：<a href=\"http://www.php.cn/code/1116.html\" target=\"_blank\" rel=\"noopener\">使用方法</a>]</font>\n\n\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-5-检测程序执行时间\"><a href=\"#2-5-检测程序执行时间\" class=\"headerlink\" title=\"2.5  检测程序执行时间\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.5  检测程序执行时间</font></h4><font face=\"Comic sans MS\">我们有的时经常需要做程序的执行时间执行效率判断。</font><br>实现的思路如下：<br><font color=\"red\"></font>\n\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//记录开始时间\n\n\n\n//记录结整时\n\n\n// 开始时间  减去（-）  结束时间  得到程序的运行时间\n\n?<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;<br>&emsp;</p>\n<font face=\"Comic sans MS\">可是不要忘了，程序的运行速度太快了。快到只有0.00000几秒的一刹那。那这个时候大家要记录一个特函的函数了：</font><br><font color=\"red\"><strong>mixed microtime ([ bool $get_as_float ] )</strong></font><br><strong>microtime()这个函数，能够返回当前 Unix 时间戳和微秒数。</strong><br><font color=\"red\"></font>\n\n<blockquote>\n<font color=\"#FF6347\"><strong>参数：</strong><br>如果你传入true的话，将会返回一个浮点类型的时间，这样方便参与运算。</font>\n</blockquote>\n<p>模拟一个检测函数执行时间的例子，测试某个函数效率的快慢：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>?php\n//开始时间\n<span class=\"token variable\">$time_start</span> <span class=\"token operator\">=</span> microtime<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n//循环一万次\nfor<span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> 0 <span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> 10000 <span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span>++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   //你可以用上，mktime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 生成一个昨天的时间\n   //再用strtotime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 生成一个昨天的时间\n   //对比两个函数认的效率高\n<span class=\"token punctuation\">}</span>\n//结整时间\n<span class=\"token variable\">$time_end</span> <span class=\"token operator\">=</span> microtime<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n//相减得到运行时间\n<span class=\"token variable\">$time</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$time_end</span> - <span class=\"token variable\">$time_start</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"这个脚本执行的时间为 <span class=\"token variable\">$time</span> seconds\\n\"</span><span class=\"token punctuation\">;</span>\n?<span class=\"token operator\">></span>\n\n运行结果：\n这个脚本执行的时间为 0.00016498565673828 seconds\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>最后输出的结果就是我们实际的函数的执行时间。你可以多对比几次，看看最终的结果。<br>谁的时间短，在实际的工作中，你就可以经常使用哪个函数。</p>\n</blockquote>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"2-6-字符串常用函数\"><a href=\"#2-6-字符串常用函数\" class=\"headerlink\" title=\"2.6  字符串常用函数\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.6  字符串常用函数</font></h4><font color=\"red\"><strong>数组</strong></font>、<font color=\"red\"><strong>字符串</strong></font>和<font color=\"red\"><strong>数据库</strong></font>是我们函数里面最、最、最常用的三类函数。<br><br><font face=\"Comic sans MS\">当然PHP的字符串函数也有很多。我们最常使用的两个系列的字符串：<br>    1.单字节字符串处理函数<br>    2.多字节字符串处理函数<br>    3.字符串编码转换函数<br></font>\n\n<blockquote>\n<p><font color=\"#FF6347\"><strong>我们来说说为什么要学这么多函数：</strong></font><br>    1.我们学的是中文，是双字节或者三字节的。老外的函数只能处理英文和数字这些单字节的字符串处理不鸟中文。达不到我们的功能需求<br>    2.有的时候需要做不同字符编码间的转换，例如：把GBK的转为UTF-8<br>    3.英文这些字符在电脑里又是必须要处理的</p>\n</blockquote>\n<p>&emsp;</p>\n<blockquote>\n<p>中文主要用的是GBK和utf-8两种编码格式。<br>GBK和utf-8是两个不同的编码委员会对于汉字进行的编码的标准。<br>他们规定GBK是双字节，也就是一个汉字占用2Bytes。<br>utf-8是三字节，一个汉字占用三个字节长度的存储空间。</p>\n</blockquote>\n<p>&emsp;</p>\n<font color=\"#00B2EE\">PHP常用函数：</font>\n\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">trim()</td>\n<td style=\"text-align:left\">删除字符串两端的空格或其他预定义字符</td>\n<td style=\"text-align:left\">“$str = “\\r\\nHello World!\\r\\n”; echo trim($str);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rtrim()</td>\n<td style=\"text-align:left\">删除字符串右边的空格或其他预定义字符</td>\n<td style=\"text-align:left\">“$str = “Hello World!\\n\\n”; echo rtrim($str);”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chop()</td>\n<td style=\"text-align:left\">rtrim()的别名</td>\n<td style=\"text-align:left\">同上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ltrim()</td>\n<td style=\"text-align:left\">删除字符串左边的空格或其他预定义字符</td>\n<td style=\"text-align:left\">“$str = “\\r\\nHello World!”; echo ltrim($str);”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dirname()</td>\n<td style=\"text-align:left\">回路径中的目录部分（我们把它归在了字符串函数里了）</td>\n<td style=\"text-align:left\">echo dirname(“c:/testweb/home.php”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_pad()</td>\n<td style=\"text-align:left\">把字符串填充为指定的长度</td>\n<td style=\"text-align:left\">$str = “Hello World”; echo str_pad($str,20,”.”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_repeat()</td>\n<td style=\"text-align:left\">重复使用指定字符串</td>\n<td style=\"text-align:left\">echo str_repeat(“.”,13);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_split()</td>\n<td style=\"text-align:left\">把字符串分割到数组中</td>\n<td style=\"text-align:left\">print_r(str_split(“Hello”));</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strrev()</td>\n<td style=\"text-align:left\">反转字符串</td>\n<td style=\"text-align:left\">echo strrev(“Hello World!”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wordwrap()</td>\n<td style=\"text-align:left\">按照指定长度对字符串进行折行处理</td>\n<td style=\"text-align:left\">“$str = “”An example on a long word is: Supercalifragulistic””; echo wordwrap($str,15);”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_shuffle()</td>\n<td style=\"text-align:left\">随机地打乱字符串中所有字符</td>\n<td style=\"text-align:left\">echo str_shuffle(“Hello World”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parse_str()</td>\n<td style=\"text-align:left\">将字符串解析成变量</td>\n<td style=\"text-align:left\">“parse_str(“id=23&amp;name=John%20Adams”,$myArray); print_r($myArray);”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number_format()</td>\n<td style=\"text-align:left\">通过千位分组来格式化数字</td>\n<td style=\"text-align:left\">“echo number_format(“1000000”); echo number_format(“1000000”,2); echo number_format(“1000000”,2,””,””,””.””);”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strtolower()</td>\n<td style=\"text-align:left\">字符串转为小写</td>\n<td style=\"text-align:left\">echo strtolower(“Hello WORLD!”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strtoupper()</td>\n<td style=\"text-align:left\">字符串转为大写</td>\n<td style=\"text-align:left\">echo strtoupper(“Hello WORLD!”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ucfirst()</td>\n<td style=\"text-align:left\">字符串首字母大写</td>\n<td style=\"text-align:left\">echo ucfirst(“hello world”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ucwords()</td>\n<td style=\"text-align:left\">字符串每个单词首字符转为大写</td>\n<td style=\"text-align:left\">echo ucwords(“hello world”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htmlentities()</td>\n<td style=\"text-align:left\">把字符转为HTML实体</td>\n<td style=\"text-align:left\">$str = “”John &amp; ‘Adams’””; echo htmlentities($str, ENT_COMPAT);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htmlspecialchars()</td>\n<td style=\"text-align:left\">预定义字符转html编码    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nl2br()</td>\n<td style=\"text-align:left\">\\n转义为标签</td>\n<td style=\"text-align:left\">echo nl2br(“One line.\\nAnother line.”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strip_tags()</td>\n<td style=\"text-align:left\">剥去 HTML、XML 以及 PHP 的标签</td>\n<td style=\"text-align:left\">echo strip_tags(“Hello world!”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">addcslashes()</td>\n<td style=\"text-align:left\">在指定的字符前添加反斜线转义字符串中字符</td>\n<td style=\"text-align:left\">$str = “”Hello, my name is John Adams.” echo $str; echo addcslashes($str,’m’);”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stripcslashes()</td>\n<td style=\"text-align:left\">删除由addcslashes()添加的反斜线</td>\n<td style=\"text-align:left\">echo stripcslashes(“Hello, \\my na\\me is Kai Ji\\m.”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">addslashes()</td>\n<td style=\"text-align:left\">指定预定义字符前添加反斜线</td>\n<td style=\"text-align:left\">$str = “Who’s John Adams?”;echo addslashes($str);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stripslashes()</td>\n<td style=\"text-align:left\">删除由addslashes()添加的转义字符</td>\n<td style=\"text-align:left\">echo stripslashes(“Who\\’s John Adams?”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">quotemeta()</td>\n<td style=\"text-align:left\">在字符串中某些预定义的字符前添加反斜线</td>\n<td style=\"text-align:left\">$str = “Hello world. (can you hear me?)”; echo quotemeta($str);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chr()</td>\n<td style=\"text-align:left\">从指定的 ASCII 值返回字符</td>\n<td style=\"text-align:left\">echo chr(052);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ord()</td>\n<td style=\"text-align:left\">返回字符串第一个字符的 ASCII值</td>\n<td style=\"text-align:left\">echo ord(“hello”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strcasecmp()</td>\n<td style=\"text-align:left\">不区分大小写比较两字符串</td>\n<td style=\"text-align:left\">echo strcasecmp(“Hello world!”,”HELLO WORLD!”);</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strcmp()</td>\n<td style=\"text-align:left\">区分大小写比较两字符串    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strncmp()</td>\n<td style=\"text-align:left\">比较字符串前n个字符,区分大小写    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strncasecmp()</td>\n<td style=\"text-align:left\">比较字符串前n个字符,不区分大小写</td>\n<td style=\"text-align:left\">int strncasecmp ( string $str1 , string $str2 , int $len )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strnatcmp()</td>\n<td style=\"text-align:left\">自然顺序法比较字符串长度,区分大小写</td>\n<td style=\"text-align:left\">int strnatcmp ( string $str1 , string $str2 )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strnatcasecmp()</td>\n<td style=\"text-align:left\">自然顺序法比较字符串长度,不区分大小写</td>\n<td style=\"text-align:left\">int strnatcasecmp ( string $str1 , string $str2 )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chunk_split()</td>\n<td style=\"text-align:left\">将字符串分成小块</td>\n<td style=\"text-align:left\">str chunk_split(str $body[,int $len[,str $end]])</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strtok()</td>\n<td style=\"text-align:left\">切开字符串</td>\n<td style=\"text-align:left\">str strtok(str $str,str $token)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">explode()</td>\n<td style=\"text-align:left\">使用一个字符串为标志分割另一个字符串</td>\n<td style=\"text-align:left\">array explode(str $sep,str $str[,int $limit])</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">implode()</td>\n<td style=\"text-align:left\">同join,将数组值用预订字符连接成字符串</td>\n<td style=\"text-align:left\">string implode ( string $glue , array $pieces )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">substr()</td>\n<td style=\"text-align:left\">截取字符串</td>\n<td style=\"text-align:left\">string substr ( string $string , int $start [, int $length ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_replace()</td>\n<td style=\"text-align:left\">字符串替换操作,区分大小写</td>\n<td style=\"text-align:left\">mix str_replace(mix $search,,mix $replace,mix $subject[,int &amp;$num])</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_ireplace()</td>\n<td style=\"text-align:left\">字符串替换操作,不区分大小写</td>\n<td style=\"text-align:left\">mix str_ireplace ( mix $search , mix $replace , mix $subject [, int &amp;$count ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">substr_count()</td>\n<td style=\"text-align:left\">统计一个字符串,在另一个字符串中出现次数</td>\n<td style=\"text-align:left\">int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">substr_replace()</td>\n<td style=\"text-align:left\">替换字符串中某串为另一个字符串</td>\n<td style=\"text-align:left\">mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">similar_text()</td>\n<td style=\"text-align:left\">返回两字符串相同字符的数量</td>\n<td style=\"text-align:left\">int similar_text(str $str1,str $str2)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strchr()</td>\n<td style=\"text-align:left\">返回一个字符串在另一个字符串中开始位置到结束的字符串</td>\n<td style=\"text-align:left\">string strstr ( string $str, string $needle , bool $before_needle )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strrchr()</td>\n<td style=\"text-align:left\">返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串</td>\n<td style=\"text-align:left\">string strrchr ( string $haystack , mixed $needle )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stristr()</td>\n<td style=\"text-align:left\">返回一个字符串在另一个字符串中开始位置到结束的字符串，不区分大小写</td>\n<td style=\"text-align:left\">string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strtr()</td>\n<td style=\"text-align:left\">转换字符串中的某些字符</td>\n<td style=\"text-align:left\">string strtr ( string $str , string $from , string $to )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strpos()</td>\n<td style=\"text-align:left\">寻找字符串中某字符最先出现的位置</td>\n<td style=\"text-align:left\">int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stripos()</td>\n<td style=\"text-align:left\">寻找字符串中某字符最先出现的位置,不区分大小写</td>\n<td style=\"text-align:left\">int stripos ( string $haystack , string $needle [, int $offset ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strrpos()</td>\n<td style=\"text-align:left\">寻找某字符串中某字符最后出现的位置</td>\n<td style=\"text-align:left\">int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strripos()</td>\n<td style=\"text-align:left\">寻找某字符串中某字符最后出现的位置,不区分大小写</td>\n<td style=\"text-align:left\">int strripos ( string $haystack , string $needle [, int $offset ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strspn()</td>\n<td style=\"text-align:left\">返回字符串中首次符合mask的子字符串长度</td>\n<td style=\"text-align:left\">int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strcspn()</td>\n<td style=\"text-align:left\">返回字符串中不符合mask的字符串的长度</td>\n<td style=\"text-align:left\">int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str_word_count()</td>\n<td style=\"text-align:left\">统计字符串含有的单词数</td>\n<td style=\"text-align:left\">mix str_word_count(str $str,[])</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strlen()</td>\n<td style=\"text-align:left\">统计字符串长度</td>\n<td style=\"text-align:left\">int strlen(str $str)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count_chars()</td>\n<td style=\"text-align:left\">统计字符串中所有字母出现次数(0..255)</td>\n<td style=\"text-align:left\">mixed count_chars ( string $string [, int $mode ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">md5()</td>\n<td style=\"text-align:left\">字符串md5编码</td>\n<td style=\"text-align:left\">$str = “Hello”; echo md5($str)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><font color=\"red\"><strong>iconv：</strong></font></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_substr</td>\n<td style=\"text-align:left\">获取字符串的部分</td>\n<td style=\"text-align:left\">string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_http_output</td>\n<td style=\"text-align:left\">设置/获取 HTTP 输出字符编码</td>\n<td style=\"text-align:left\">mixed mb_http_output ([ string $encoding = mb_http_output() ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_strlen</td>\n<td style=\"text-align:left\">获取字符串的长度</td>\n<td style=\"text-align:left\">mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iconv</td>\n<td style=\"text-align:left\">字符串按要求的字符编码来转换</td>\n<td style=\"text-align:left\">string iconv ( string $in_charset , string $out_charset , string $str )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iconv_substr</td>\n<td style=\"text-align:left\">截取字符串的部分    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iconv_get_encoding</td>\n<td style=\"text-align:left\">获取 iconv 扩展的内部配置变量    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_substr_count</td>\n<td style=\"text-align:left\">统计字符串出现的次数    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_check_encoding</td>\n<td style=\"text-align:left\">检查字符串在指定的编码里是否有效    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_strrpos</td>\n<td style=\"text-align:left\">查找字符串在一个字符串中最后出现的位置    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mb_split</td>\n<td style=\"text-align:left\">使用正则表达式分割多字节字符串    </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parse_url</td>\n<td style=\"text-align:left\">解释URL成为一个数组    </td>\n</tr>\n</tbody>\n</table></div></div>\n","prev":{"title":"PHP-文件系统","slug":"PHP-FileSystem"},"next":{"title":"PHP-正则表达式","slug":"PHP-Regular-Expression"},"link":"Treecatee.gitgub.io/post/PHP-function/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 自定义函数</font>","id":"一-自定义函数","index":"1","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.1 自定义函数函数基本概念</font>","id":"1-1-自定义函数函数基本概念","index":"1.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.2 回调函数</font>","id":"1-2-回调函数","index":"1.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.3 变量函数</font>","id":"1-3-变量函数","index":"1.3"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.4 匿名函数</font>","id":"1-4-匿名函数","index":"1.4"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.5 内部函数</font>","id":"1-5-内部函数","index":"1.5"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.6 参数的引用</font>","id":"1-6-参数的引用","index":"1.6"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.7 递归函数</font>","id":"1-7-递归函数","index":"1.7"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">1.8 静态变量</font>","id":"1-8-静态变量","index":"1.8"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 系统函数</font>","id":"二-系统函数","index":"2","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.1 使用介绍</font>","id":"2-1-使用介绍","index":"2.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.2 文件包含函数</font>","id":"2-2-文件包含函数","index":"2.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.3  数学常用函数</font>","id":"2-3-数学常用函数","index":"2.3"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.4  获取时期时间信息函数</font>","id":"2-4-获取时期时间信息函数","index":"2.4"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.5  检测程序执行时间</font>","id":"2-5-检测程序执行时间","index":"2.5"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.6  字符串常用函数</font>","id":"2-6-字符串常用函数","index":"2.6"}]}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/PHP-function/\" title=\"PHP-函数\">Treecatee.gitgub.io/post/PHP-function/</a>","published":"February 15, 2019"}}