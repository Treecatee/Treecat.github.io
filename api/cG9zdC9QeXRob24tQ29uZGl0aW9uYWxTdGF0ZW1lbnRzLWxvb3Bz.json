{"title":"Python-条件语句与循环","date":"2019-03-01T03:29:20.000Z","thumbnail":"https://i.loli.net/2019/03/01/5c780b7be7025.jpg","slug":"Python-ConditionalStatements-loops","tags":["Python语言"],"categories":["Python"],"updated":"2019-03-01T07:11:19.281Z","content":"<p>记得冒号和换行的缩进呀…(｡◕︎‿◕︎)ﾉﾟ･ﾟ･<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>条件语句与循环</strong></font> </center>\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-条件语句\"><a href=\"#一-条件语句\" class=\"headerlink\" title=\"一. 条件语句\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一. 条件语句</font></h3><p><br></p>\n<ol>\n<li><p>if-else-elif是条件语句，判断bool类型，判断为True就继续执行后面的缩进语句，判断为Flase则不执行缩进语句。</p>\n</li>\n<li><p>Python程序语言指定任何非0和非空（Null）值为True，0 或者 null为False。</p>\n</li>\n<li><p>Python<font color=\"#FF7F00\"><strong>只执行if-elif-else 结构中的一个代码块</strong></font>，它依次检查每个条件测试，直到遇到通过了的条件测试。测试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p>\n</li>\n<li><p>python 并<font color=\"#FF7F00\"><strong>不支持 switch 语句</strong></font>，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p>\n</li>\n<li><p>设置if 语句的格式。在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如== 、&gt;= 和&lt;= 等比较运算符两边各添加一个空格，例如，<code>if age &lt; 4:</code> 要比<code>if age&lt;4:</code> 好。这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。</p>\n</li>\n<li><p>注意条件语句如果有多条缩进语句时<font color=\"#FF7F00\"><strong>不能忘了冒号（ <code>:</code> ）</strong></font>，不像C语言或其它语言一样，if后面没有括号。</p>\n</li>\n</ol>\n<p><br></p>\n<p>书写格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件判断<span class=\"number\">1</span>&gt;:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">1</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件判断<span class=\"number\">2</span>&gt;:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">2</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件判断<span class=\"number\">3</span>&gt;:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">3</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    &lt;执行<span class=\"number\">4</span>&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-循环语句\"><a href=\"#二-循环语句\" class=\"headerlink\" title=\"二. 循环语句\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二. 循环语句</font></h3><p><br></p>\n<p>Python提供了for循环和while循环（在Python中<strong>没有do..while循环</strong>）:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">循环类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><font color=\"#00B2EE\"><a href=\"http://www.runoob.com/python/python-while-loop.html\" target=\"_blank\" rel=\"noopener\">while 循环</a></font></td>\n<td style=\"text-align:left\">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><font color=\"#00B2EE\"><a href=\"http://www.runoob.com/python/python-for-loop.html\" target=\"_blank\" rel=\"noopener\">for 循环</a></font></td>\n<td style=\"text-align:left\">重复执行语句</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><font color=\"#00B2EE\"><a href=\"http://www.runoob.com/python/python-nested-loops.html\" target=\"_blank\" rel=\"noopener\">嵌套循环</a></font></td>\n<td style=\"text-align:left\">你可以在while循环体中嵌套for循环</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p><strong>循环控制语句</strong><br>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">循环类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><font color=\"#00B2EE\"><a href=\"http://www.runoob.com/python/python-break-statement.html\" target=\"_blank\" rel=\"noopener\">break 语句</a></font></td>\n<td style=\"text-align:left\">在语句块执行过程中终止循环，并且跳出整个循环</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><font color=\"#00B2EE\"><a href=\"http://www.runoob.com/python/python-continue-statement.html\" target=\"_blank\" rel=\"noopener\">continue 语句</a></font></td>\n<td style=\"text-align:left\">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><font color=\"#00B2EE\"><a href=\"http://www.runoob.com/python/python-pass-statement.html\" target=\"_blank\" rel=\"noopener\">pass 语句</a></font></td>\n<td style=\"text-align:left\">pass是空语句，是为了保持程序结构的完整性。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<h4 id=\"2-1-While-循环语句\"><a href=\"#2-1-While-循环语句\" class=\"headerlink\" title=\"2.1 While 循环语句\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.1 While 循环语句</font></h4><p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（Null）的值均为True。当判断条件假False时，循环结束。其基本形式为（<strong>注意并没有括号</strong>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 判断条件：</span><br><span class=\"line\">    执行语句……</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>Gif 演示 Python while 语句执行过程：</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/01/5c789f82d8f65.gif\" alt=\"loop-over-python-list-animation.gif\"></p></div>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>循环使用 else 语句：</strong></font>\n\n<p>在 python 中，while … else 在循环条件为 False 时执行 else 语句块：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> count &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (count, <span class=\"string\">\" is  less than 5\"</span>)</span><br><span class=\"line\">   count = count + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (count, <span class=\"string\">\" is not less than 5\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"keyword\">is</span>  less than <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"keyword\">is</span>  less than <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"keyword\">is</span>  less than <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"keyword\">is</span>  less than <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"keyword\">is</span>  less than <span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">5</span>  <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> less than <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><br></p>\n<h4 id=\"2-2-for-in-语句\"><a href=\"#2-2-for-in-语句\" class=\"headerlink\" title=\"2.2 for..in 语句\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.2 for..in 语句</font></h4><ol>\n<li><p>Python for循环可以遍历任何序列的项目，如一个<font color=\"#FF7F00\"><strong>列表</strong></font>或者一个<font color=\"#FF7F00\"><strong>字符串</strong></font>。</p>\n</li>\n<li><p>Python 中的 for 语句和 C 或 Pascal 中的略有不同。通常的循环可能会依据一个等差数值步进过程（如 Pascal），或由用户来定义迭代步骤和中止条件（如 C ），Python 的 for 语句依据任意序列（列表或字符串）中的子项，按它们在序列中的顺序来进行迭代。</p>\n</li>\n<li><p>在迭代过程中修改迭代序列不安全（只有在使用列表这样的可变序列时才会有这样的情况）。如果你想要修改你迭代的序列（例如，复制选择项），你可以迭代它的复本。使用切割标识就可以很方便的做到这一点</p>\n</li>\n</ol>\n<p><br></p>\n<blockquote>\n<p><font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>for…in语句处理字符串和列表不同：</strong></font></p>\n<ol>\n<li><strong>处理列表：</strong><font color=\"#FF7F00\"><strong>每次取列表的一个元素赋给 in 前面的变量</strong></font>；</li>\n<li><strong>处理字符串：</strong><font color=\"#FF7F00\"><strong>每次取字符串的一个字符赋给 in 前面的变量</strong></font>；</li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]:</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'beauty'</span>:</span><br><span class=\"line\">     print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"number\">5</span> </span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\">b </span><br><span class=\"line\">e </span><br><span class=\"line\">a </span><br><span class=\"line\">u </span><br><span class=\"line\">t </span><br><span class=\"line\">y</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<blockquote>\n<font color=\"#FF7F00\"><strong>上例列表 for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。这就像把序列中的每一个数(或对象)分配给x，一次一个,然后为每个x值执行语句块。</strong></font>\n</blockquote>\n<p><br></p>\n<h4 id=\"2-2-break、continue、pass-语句\"><a href=\"#2-2-break、continue、pass-语句\" class=\"headerlink\" title=\"2.2 break、continue、pass 语句\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">2.2 break、continue、pass 语句</font></h4><p><font color=\"#FF7F00\"><strong>break语句：</strong></font> 在循环中，可以提前退出循环。</p>\n<p><font color=\"#FF7F00\"><strong>break语句：</strong></font> 在循环过程中，跳过当前的这次循环，直接开始下一次循环。</p>\n<p><font color=\"#FF7F00\"><strong>pass语句：</strong></font> pass 是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</p>\n<p><br>    </p>\n<p>Python 语言 pass 语句语法格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 Python 的每个字母</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'Python'</span>:</span><br><span class=\"line\">   <span class=\"keyword\">if</span> letter == <span class=\"string\">'h'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br><span class=\"line\">      print(<span class=\"string\">'这是 pass 块'</span>)</span><br><span class=\"line\">   print(<span class=\"string\">'当前字母 :'</span>, letter)</span><br><span class=\"line\"> </span><br><span class=\"line\">print(<span class=\"string\">'Good bye!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">当前字母 : P </span><br><span class=\"line\">当前字母 : y </span><br><span class=\"line\">当前字母 : t </span><br><span class=\"line\">这是 <span class=\"keyword\">pass</span> 块 </span><br><span class=\"line\">当前字母 : h </span><br><span class=\"line\">当前字母 : o </span><br><span class=\"line\">当前字母 : n </span><br><span class=\"line\">Good bye!</span><br></pre></td></tr></table></figure>","prev":{"title":"Python-运算符","slug":"Python-Operators"},"next":{"title":"Python-列表、元组、字典、集合","slug":"Python-list-tuple-dict-set"},"link":"Treecatee.gitgub.io/post/Python-ConditionalStatements-loops/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 条件语句</font>","id":"一-条件语句","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 循环语句</font>","id":"二-循环语句","index":"2","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.1 While 循环语句</font>","id":"2-1-While-循环语句","index":"2.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.2 for..in 语句</font>","id":"2-2-for-in-语句","index":"2.2"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">2.2 break、continue、pass 语句</font>","id":"2-2-break、continue、pass-语句","index":"2.3"}]}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Python-ConditionalStatements-loops/\" title=\"Python-条件语句与循环\">Treecatee.gitgub.io/post/Python-ConditionalStatements-loops/</a>","published":"March 1, 2019"}}