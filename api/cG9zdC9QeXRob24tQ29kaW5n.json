{"title":"Python-字符编码&字符串&格式化","date":"2019-02-27T17:15:48.000Z","thumbnail":"https://i.loli.net/2019/02/28/5c77487f0d3ef.jpg","slug":"Python-Coding","tags":["Python语言"],"categories":["Python"],"updated":"2019-02-28T03:38:54.922Z","content":"<p>字符编码、字符串(๑°⌓︎°๑)<br><a id=\"more\"></a></p>\n<p><br></p>\n<p><br></p>\n<center><font color=\"#00B2EE\" face=\"Comic sans MS\" size=\"5\"><strong>Python-字符编码、字符串、格式化</strong></font> </center>\n\n<p><br></p>\n<p><br></p>\n<h3 id=\"一-字符编码\"><a href=\"#一-字符编码\" class=\"headerlink\" title=\"一. 字符编码\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">一. 字符编码</font></h3><ol>\n<li><p>我们已经讲过了，字符串也是一种数据类型，但是，<strong>字符串</strong>比较特殊的是还有一个<strong>编码</strong>问题。</p>\n</li>\n<li><p><font color=\"#FF7F00\"><strong>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong></font>。最早的计算机在设计时采用8个比特（<strong><code>8 bit</code></strong>）作为一个字节（<strong><code>1 byte</code></strong>）。</p>\n<ol>\n<li>所以，<strong><code>一个字节</code></strong>能表示的最大的整数就是<strong><code>255</code></strong>（二进制11111111=十进制255）；</li>\n<li>如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，<strong><code>4个字节</code></strong>可以表示的最大整数是<strong><code>4294967295</code></strong>。</li>\n</ol>\n</li>\n<li><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<font color=\"#FF7F00\"><strong>ASCII编码</strong></font>，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p>\n</li>\n<li><p>但是要处理中文显然一个字节是不够的，<strong>至少需要两个字节</strong>，而且还不能和ASCII编码冲突，所以，<font color=\"#FF7F00\"><strong>中国制定了GB2312编码，用来把中文编进去</strong></font>。</p>\n</li>\n<li><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>\n</li>\n<li><p>因此，<code>Unicode</code>应运而生。<font color=\"#FF7F00\"><strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong></font>。</p>\n<ol>\n<li>Unicode标准也在不断发展，但最常用的是<font color=\"#00B2EE\"><strong>用两个字节表示一个字符</strong></font>（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</li>\n<li><p>现在，捋一捋ASCII编码和Unicode编码的区别：<font color=\"#00B2EE\"><strong>ASCII编码是1个字节，而Unicode编码通常是2个字节</strong></font>。</p>\n<ol>\n<li>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li>\n<li>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符’0’(‘零’)和整数0(零)是不同的；</li>\n<li>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li>\n<li>你可以猜测，如果<font color=\"red\"><strong>把ASCII编码的A用Unicode编码，只需要在前面补0(零)就可以</strong></font>，因此，A的Unicode编码是00000000 01000001。</li>\n</ol>\n</li>\n<li><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，<font color=\"#00B2EE\"><strong>用Unicode编码比ASCII编码需要多一倍的存储空间</strong></font>，在存储和传输上就十分不划算。</p>\n</li>\n<li>所以，<strong>本着节约的精神</strong>，又出现了<font color=\"#00B2EE\"><strong>把Unicode编码转化为“可变长编码”的UTF-8编码</strong></font>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</li>\n</ol>\n</li>\n</ol>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td style=\"text-align:center\">字符</td>\n<td style=\"text-align:center\">ASCII</td>\n<td style=\"text-align:center\">Unicode</td>\n<td style=\"text-align:center\">UTF-8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">1000001</td>\n<td style=\"text-align:center\">00000000 01000001</td>\n<td style=\"text-align:center\">01000001</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">中</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">01001110 00101101</td>\n<td style=\"text-align:center\">11100100 10111000 10101101</td>\n</tr>\n</tbody>\n</table></div></div>\n<blockquote>\n<ol>\n<li>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是<font color=\"#FF7F00\"><strong>ASCII编码实际上可以被看成是UTF-8编码的一部分</strong></font>，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</li>\n</ol>\n</blockquote>\n<p><strong>总结一下现在计算机系统通用的字符编码工作方式：</strong></p>\n<ol>\n<li><font color=\"#FF7F00\"><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong></font>。</li>\n<li>举例：用记事本编辑(计算机内存中)的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8(保存到文件硬盘或者需要传输)</li>\n</ol>\n<p><br></p>\n<p>PS：所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>\n<p><br></p>\n<p><br></p>\n<h3 id=\"二-代码编码和文件编码的设置\"><a href=\"#二-代码编码和文件编码的设置\" class=\"headerlink\" title=\"二. 代码编码和文件编码的设置\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">二. 代码编码和文件编码的设置</font></h3><blockquote>\n<p><strong>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</strong><br>解决方法为只要在文件开头加入<code># -*- coding: UTF-8 -*-</code> 或者 <code>#coding=utf-8</code> 就行了<br>（<strong>注意：</strong><code>#coding=utf-8</code> 的 <code>=</code> 号两边不要空格。）</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"你好，世界\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">你好，世界</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：</strong></p>\n<ol>\n<li>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文，无需指定 UTF-8 编码。</li>\n<li>注意：如果你使用编辑器，同时需要设置 py 文件存储的格式为 UTF-8</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p><br></p>\n<h3 id=\"三-字符与编码的转换\"><a href=\"#三-字符与编码的转换\" class=\"headerlink\" title=\"三. 字符与编码的转换\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">三. 字符与编码的转换</font></h3><p>在最新的Python 3版本中，<font color=\"#FF7F00\"><strong>字符串是以Unicode编码的</strong></font>，也就是说，Python的字符串支持多语言（字符串可以写任意国家文字）。</p>\n<p><br></p>\n<h4 id=\"3-1-字符与十进制编码的转换\"><a href=\"#3-1-字符与十进制编码的转换\" class=\"headerlink\" title=\"3.1 字符与十进制编码的转换\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.1 字符与十进制编码的转换</font></h4><blockquote>\n<p><strong>使用函数：</strong></p>\n<ol>\n<li>ord()：将字符转换成其对应的整数（十进制），注意不是字符串；</li>\n<li>chr()：将十进制整数转换成其对应的字符。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=ord(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">b=chr(<span class=\"number\">120</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">65</span> </span><br><span class=\"line\">x</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"3-2-不同编码之间的转换\"><a href=\"#3-2-不同编码之间的转换\" class=\"headerlink\" title=\"3.2 不同编码之间的转换\"></a><font color=\"#3CB371\" face=\"Comic sans MS\">3.2 不同编码之间的转换</font></h4><p>由于Python的字符串类型是str，<font color=\"#FF7F00\"><strong>在内存中以Unicode表示，一个字符对应若干个字节</strong></font>。如果要在网络上传输，或者保存到磁盘上，就需要<font color=\"#FF7F00\"><strong>把str变为以字节为单位的bytes</strong></font>。</p>\n<p>Python对bytes类型的数据用带<code>b前缀</code>的<font color=\"#FF7F00\"><strong>单引号</strong></font>或<font color=\"#FF7F00\"><strong>双引号</strong></font>表示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">b'ABC'</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"string\">b'ABC'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>结论：</strong>要注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但<font color=\"#FF7F00\"><strong>bytes的每个字符都只占用一个字节</strong></font>。</p>\n</blockquote>\n<p><br></p>\n<font color=\"#00B2EE\" face=\"Comic sans MS\"><strong>不同编码之间的转换使用函数：</strong></font>\n\n<ol>\n<li><strong>decode()：</strong> 解码，将其他编码的字符串解码成unicode编码；</li>\n<li><strong>encode()：</strong> 转码，将unicode编码的字符串转码成其他编码。</li>\n<li><strong>decode(“utf-8”, errors=”ignore”) ：</strong> 忽略其中有异常的编码，仅显示有效的编码；</li>\n<li><strong>decode(“utf-8”, errors=”replace”)：</strong> 替换其中异常的编码，这个相对来可能一眼就知道那些字符编码出问题了；</li>\n<li><strong>len()：</strong> 计算的是str的字符数，如果换成bytes，len()函数就计算字节数。</li>\n</ol>\n<p><br></p>\n<p>资料查阅：<font color=\"#00B2EE\">[<a href=\"https://blog.csdn.net/xw_classmate/article/details/51934723\" target=\"_blank\" rel=\"noopener\">Python中的编码（encode）与解码（decode）程</a>]</font></p>\n<p><br></p>\n<p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为<font color=\"#FF7F00\"><strong>中间编码</strong></font>，即先将其他编码的字符串解码（<code>decode</code>）成unicode，再从unicode编码（<code>encode</code>）成另一种编码。</p>\n<p><br></p>\n<p>举例1：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'ABC'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"string\">b'ABC'</span> </span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span> </span><br><span class=\"line\">Traceback (most recent call last): </span><br><span class=\"line\">  File <span class=\"string\">\"C:\\Users\\Alvin\\AppData\\Local\\Temp\\learn_python_q5t__kzk_py\\test_21.py\"</span>, line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> &lt;module&gt; </span><br><span class=\"line\">    print(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>)) </span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<blockquote>\n<p>第三个输出报错是因为含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p>\n</blockquote>\n<p><br></p>\n<p>举例2：以Unicode表示的str通过<code>encode()</code>方法可以编码为指定的bytes    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">b'ABC'</span>.decode(<span class=\"string\">'ascii'</span>))</span><br><span class=\"line\">print(<span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">print(<span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">ABC </span><br><span class=\"line\">中文 </span><br><span class=\"line\">Traceback (most recent call last): </span><br><span class=\"line\">  File <span class=\"string\">\"C:\\Users\\Alvin\\AppData\\Local\\Temp\\learn_python_q5t__kzk_py\\test_22.py\"</span>, line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> &lt;module&gt; </span><br><span class=\"line\">    print(<span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>)) </span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'utf-8'</span> codec can<span class=\"string\">'t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三个输出报错是因为bytes中包含无法解码的字节，decode()方法会报错。</p>\n</blockquote>\n<p><br></p>\n<p>举例3：如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">b'\\xe4\\xb8\\xad'</span>.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'中'</span>.encode())</span><br><span class=\"line\">print(<span class=\"string\">b'\\xe4\\xb8\\xad\\xff'</span>.decode(<span class=\"string\">'utf-8'</span>, errors=<span class=\"string\">'ignore'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">中 </span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad'</span> </span><br><span class=\"line\">中</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>举例4：<code>len()</code>函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(len(<span class=\"string\">'ABC'</span>))</span><br><span class=\"line\">print(len(<span class=\"string\">'中文'</span>))</span><br><span class=\"line\">print(len(<span class=\"string\">b'ABC'</span>))</span><br><span class=\"line\">print(len(<span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<blockquote>\n<ol>\n<li>可见，1个中文字符经过UTF-8编码后通常<font color=\"#FF7F00\"><strong>会占用3个字节，而1个英文字符只占用1个字节</strong></font>。</li>\n<li>在操作字符串时，我们经常遇到str和bytes的互相转换。<font color=\"#FF7F00\"><strong>为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换</strong></font>。</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p><br></p>\n<h3 id=\"四-格式化\"><a href=\"#四-格式化\" class=\"headerlink\" title=\"四. 格式化\"></a><font color=\"#FF6347\" face=\"Comic sans MS\">四. 格式化</font></h3><blockquote>\n<p><font color=\"#FF7F00\"><strong>重要总结：</strong></font></p>\n<ol>\n<li>一个常见的问题是如何输出格式化的字符串。<ol>\n<li>我们经常会输出类似”亲爱的<code>xxx</code>你好！你<code>xx</code>月的话费是<code>xx</code>，余额是<code>xx</code>“之类的字符串，而<code>xxx</code>的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</li>\n</ol>\n</li>\n<li>在Python中，采用的格式化方式和C语言是一致的，用<font color=\"#FF7F00\"><strong>%</strong></font>实现。</li>\n<li>%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</li>\n<li>格式化整数还可以指定<font color=\"#FF7F00\"><strong>是否补0和整数</strong></font>；浮点数可以指定<font color=\"#FF7F00\"><strong>小数的位数</strong></font>。</li>\n<li>要输出%，用%对其进行转义，即用%%来表示一个%。</li>\n<li>另一种格式化字符串的方法是使用字符串的<font color=\"#FF7F00\"><strong>format()方法</strong></font>，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多</li>\n</ol>\n</blockquote>\n<p><br></p>\n<p>常见的占位符有：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">占位符</th>\n<th style=\"text-align:center\">替换内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:center\">整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:center\">浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:center\">字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:center\">十六进制整数</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><br></p>\n<p>示例代码：（里面的“//”并不代表注释符）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span>    // 替换一个不使用括号</span><br><span class=\"line\">b = <span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>)   // 替换多个使用括号</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"string\">'%6d-%02d'</span> % (<span class=\"number\">3</span>, <span class=\"number\">1</span>)  //  %<span class=\"number\">6</span>d  表示输出<span class=\"number\">3</span>之前有（<span class=\"number\">6</span><span class=\"number\">-1</span>）个空格输出</span><br><span class=\"line\">                         //  %<span class=\"number\">05</span>d 表示输出<span class=\"number\">1</span>之前有（<span class=\"number\">5</span><span class=\"number\">-1</span>）个<span class=\"number\">0</span>输出</span><br><span class=\"line\">d = <span class=\"string\">'%.2f'</span> % <span class=\"number\">3.145926</span>    //  %<span class=\"number\">.2</span>f 表示输出的浮点数保留两位小数，第三位小数&gt;=<span class=\"number\">5</span>就向前进<span class=\"number\">1</span></span><br><span class=\"line\">e = <span class=\"string\">'growth rate: %d %%'</span> % <span class=\"number\">7</span>   //  转义，用%%表示一个%输出</span><br><span class=\"line\">f=<span class=\"string\">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class=\"string\">'小明'</span>, <span class=\"number\">17.125</span>)</span><br><span class=\"line\">                         //  使用字符串format()方法，注意括号里面的<span class=\"number\">1</span>的意义</span><br><span class=\"line\"></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">print(e)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">Hello, world </span><br><span class=\"line\">Hi, Michael, you have $<span class=\"number\">1000000.</span> </span><br><span class=\"line\">     <span class=\"number\">3</span><span class=\"number\">-000000001</span> </span><br><span class=\"line\"><span class=\"number\">3.15</span></span><br><span class=\"line\">growth rate: <span class=\"number\">7</span> % </span><br><span class=\"line\">Hello, 小明, 成绩提升了 <span class=\"number\">17.1</span>%</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","prev":{"title":"Python-列表、元组、字典、集合","slug":"Python-list-tuple-dict-set"},"next":{"title":"Python-变量和数据类型","slug":"Python-Variables-DataTypes"},"link":"Treecatee.gitgub.io/post/Python-Coding/","toc":[{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">一. 字符编码</font>","id":"一-字符编码","index":"1"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">二. 代码编码和文件编码的设置</font>","id":"二-代码编码和文件编码的设置","index":"2"},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">三. 字符与编码的转换</font>","id":"三-字符与编码的转换","index":"3","children":[{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.1 字符与十进制编码的转换</font>","id":"3-1-字符与十进制编码的转换","index":"3.1"},{"title":"<font color=\"#3CB371\" face=\"Comic sans MS\">3.2 不同编码之间的转换</font>","id":"3-2-不同编码之间的转换","index":"3.2"}]},{"title":"<font color=\"#FF6347\" face=\"Comic sans MS\">四. 格式化</font>","id":"四-格式化","index":"4"}],"copyright":{"author":"Treecatee","license":"不可转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"Treecatee.gitgub.io/post/Python-Coding/\" title=\"Python-字符编码&字符串&格式化\">Treecatee.gitgub.io/post/Python-Coding/</a>","published":"February 28, 2019"}}